ext {
    ceylonModuleName = 'typechecker'
}

apply from : "${rootProject.projectDir}/gradle/java-for-modules.gradle"
apply plugin : CeylonAntlr

dependencies {
    compile project(':common')
    compile project(':model')
    compile project(':cmr')
    antlr 'org.antlr:antlr:3.4'
}

sourceSets {
    main {
        java {
            srcDirs = ['src',{generateGrammarSource.destinationDirectory}]
        }
        compileClasspath = configurations.antlr + configurations.compile
    }
    treegen {
        java {
            srcDirs = []
            source sourceSets.main.java
            include '**/typechecker/treegen/*.java'
        }
        compileClasspath = configurations.antlr + configurations.compile
        runtimeClasspath = output + compileClasspath
    }
}

//"""
//    <target name="antlr.parser"
//            description="Generate code from ANTLR grammar">
//        <mkdir dir="${antlr.dst}/com/redhat/ceylon/compiler/typechecker/parser"/>
//        <java classname="org.antlr.Tool">
//            <arg value="-o"/>
//            <arg value="${antlr.dst}/com/redhat/ceylon/compiler/typechecker/parser"/>
//            <arg value="${antlr.src}"/>
//            <classpath>
//                <pathelement location="${antlr.lib}"/>
//            </classpath>
//        </java>
//    </target>
//

// TODO: Should we delete these tokens?
//        <delete>
//            <fileset dir="${antlr.dst}/com/redhat/ceylon/compiler/typechecker/treegen"
//                     includes="*.tokens"/>
//        </delete>
//    </target>

generateGrammarSource {

    destinationDirectory = "${buildDir}/gensrc"

    antlrGroup 'com/redhat/ceylon/compiler/typechecker/parser',
        fileTree("antlr/com/redhat/ceylon/compiler/typechecker/parser") { include '**/*.g' }

    antlrGroup 'com/redhat/ceylon/compiler/typechecker/treegen',
        fileTree("antlr/com/redhat/ceylon/compiler/typechecker/treegen") { include '**/*.g' }
}

//    <target name="treegen" depends="antlr.tree, antlr.parser">
//        <mkdir dir="${build.classes}"/>
//        <javac
//                srcdir="${src}:${gensrc}"
//                destdir="${build.classes}"
//                debug="true"
//                encoding="UTF-8"
//                classpath="${antlr.lib}"
//                target="${compile.java.target}"
//                source="${compile.java.source}"
//                bootclasspath="${compile.java.bootclasspath}">
//            <include name="com/redhat/ceylon/compiler/typechecker/treegen/*.java"/>
//        </javac>
//    </target>

compileTreegenJava {
    dependsOn generateGrammarSource
}


//    <target name="tree" depends="treegen"
//            description="Generate the tree builder code">
//        <mkdir dir="${gensrc}/com/redhat/ceylon/compiler/typechecker/tree"/>
//        <java classname="com.redhat.ceylon.compiler.typechecker.treegen.Generate" dir="${basedir}" fork="yes">
//            <arg value="antlr/Ceylon.nodes"/>
//            <classpath>
//                <pathelement location="${antlr.lib}"/>
//                <pathelement location="${build.classes}"/>
//            </classpath>
//        </java>
//    </target>

task tree( type : JavaExec ) {
    group 'Build'
    description 'Generates the tree builder code'
    dependsOn treegenClasses

    ext {
        genDir = "${generateGrammarSource.destinationDirectory}/com/redhat/ceylon/compiler/typechecker/tree"
    }

    outputs.dir genDir
    main 'com.redhat.ceylon.compiler.typechecker.treegen.Generate'
    classpath sourceSets.treegen.runtimeClasspath
    args "${projectDir}/antlr/Ceylon.nodes"
    workingDir buildDir

    doFirst {
        mkdir genDir
    }
}

//    <target name="compile" depends="tree" description="compile the type checker">
//        <javac
//                srcdir="${src}:${gensrc}"
//                destdir="${build.classes}"
//                debug="true"
//                encoding="UTF-8"
//                classpathref="classpath"
//                target="${compile.java.target}"
//                source="${compile.java.source}"
//                bootclasspath="${compile.java.bootclasspath}">
//            <include name="**/*.java"/>
//        </javac>
//    </target>

compileJava {
    dependsOn tree
}

// Add generated source to source distribution.
sourceZip {
    from ({generateGrammarSource.destinationDirectory}) {
        include '**/*.java'
    }
}


//ant.importBuild('build.xml') { antTargetName ->
//    'ant-' + antTargetName
//}
//
//compileJava.dependsOn 'ant-tree'
//clean.dependsOn 'ant-clean'

/*
apply plugin: 'antlr'

dependencies {
    antlr "org.antlr:antlr:3.4"
    compile project(':common'),
        project(':model'),
        project(':cmr')
}

sourceSets {
    main {
        antlr {
            srcDir 'antlr'
        }
    }
}   

generateGrammarSource {
    outputDirectory = new File(rootProject.buildDir, 'typechecker/gensrc')
}
*/

