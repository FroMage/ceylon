<chapter id="modulesandtools">
    <title>Module architecture and toolset</title>
    
    <para>The Ceylon module architecture enables a toolset which relieves 
    developers of many mundane tasks.</para>

<section id="modules">
    <title>Module architecture</title>

    <para>Compiled code is automatically packaged into <emphasis>module
    archives</emphasis> by the Ceylon compiler. A <emphasis>module 
    repository</emphasis> is a repository containing module archives.
    A module archive is automatically obtained from a module repository 
    when a class belonging to the module is needed by the compiler or
    module runtime.</para>
    
    <para>Modules that form part of the Ceylon SDK are found in the
    module repository in the <literal>modules</literal> directory of 
    the Ceylon distribution.</para>
    
    <para>Red Hat maintains a central module repository at 
    <literal>http://modules.ceylon.org</literal>.</para>
    
    <section id="modulenamesandversionidentifiers">
        <title>Module names and version identifiers</title>
        
        <para>A module <emphasis>name</emphasis> is a period-separated
        list of lowercase identifiers, for example:</para>
        
        <programlisting>ceylon.lang</programlisting>
        <programlisting>org.hibernate</programlisting>
        
        <para>It is recommended that module names follow the Java package
        naming convention embedding the organization's domain name (in
        this case, <literal>hibernate.org</literal>). The namespace
        <literal>ceylon</literal> is reserved for SDK modules.</para>
        
        <para>Any package whose name begins with the module name belongs
        to the module, for example, the packages:</para>

        <programlisting>ceylon.lang</programlisting>
        <programlisting>ceylon.lang.assertion</programlisting>
        <programlisting>ceylon.lang.metamodel</programlisting>
        
        <para>belong to the module <literal>ceylon.lang</literal>. The 
        packages:</para>
        
        <programlisting>org.hibernate</programlisting>
        <programlisting>org.hibernate.impl</programlisting>
        <programlisting>org.hibernate.cache</programlisting>
        
        <para>belong to the module <literal>org.hibernate</literal>.</para>
        
        <para>A module <emphasis>version identifier</emphasis> is a
        character string containing digits, periods, and lowercase
        letters, for example:</para>
        
        <programlisting>1.0.1</programlisting>
        <programlisting>3.0.0.beta</programlisting>
        
        <para>A <emphasis>module archive name</emphasis> is constructed from 
        the module name and version identifier. A module archive name is of 
        the following standard form:</para>
        
        <programlisting><emphasis>&lt;module&gt;</emphasis>-<emphasis>&lt;version&gt;</emphasis>.car</programlisting>
        
        <para>where <literal><emphasis>&lt;module&gt;</emphasis></literal> 
        is the full name of the module, and 
        <literal><emphasis>&lt;version&gt;</emphasis></literal> is the module 
        version identifier. For example:</para>
        
        <programlisting>ceylon.lang-1.0.1.car</programlisting>
        <programlisting>org.hibernate-3.0.0.beta.car</programlisting>
        
        <para>A <emphasis>source archive name</emphasis> is of the following 
        standard form:</para>
        
        <programlisting><emphasis>&lt;module&gt;</emphasis>-<emphasis>&lt;version&gt;</emphasis>.src</programlisting>
        
        <para>For example:</para>
        
        <programlisting>ceylon.lang-1.0.1.src</programlisting>
        <programlisting>org.hibernate-3.0.0.beta.src</programlisting>
        
        <para>Finally, a <emphasis>legacy archive name</emphasis> is of the 
        following standard form:</para>
        
        <programlisting><emphasis>&lt;module&gt;</emphasis>-<emphasis>&lt;version&gt;</emphasis>.jar</programlisting>
        
        <para>For example:</para>
        
        <programlisting>org.h2-1.2.141.jar</programlisting>
        
    </section>
    
    <section id="modulearchives">
        <title>Module archives</title>
        
        <para>A Ceylon module archive is a Java <literal>jar</literal>
        archive which:</para>
        
        <itemizedlist>
            <listitem>
                <para>contains a Ceylon module descriptor in the
                <emphasis>module directory</emphasis>,</para>
            </listitem>
            <listitem>
                <para>contains the compiled <literal>.class</literal>
                files for all compilation units belonging to the module, 
                and</para>
            </listitem>
            <listitem>
                <para>has a filename which adheres to the standard for
                module archive names.</para>
            </listitem>
        </itemizedlist>
        
        <para>The module directory of the module archive is the directory
        containing the package with the same name as the module. For 
        example, the module directory for the module <literal>ceylon.lang</literal>
        is the directory <literal>/ceylon/lang</literal>. The module directory 
        for the module <literal>org.hibernate</literal> is the directory
        <literal>/org/hibernate</literal>.</para>
        
        <para>Thus, the structure of the module archive for the module
        <literal>org.hello</literal> might be the following:</para>
        
        <programlisting><![CDATA[org.hello-1.0.0.car
    META-INF/
        MANIFEST.MF
    org/
        hello/
            module.class      //the module descriptor
            main/
                hello.class
            default/
                DefaultHello.class
            personalized/
                PersonalizedHello.class]]></programlisting>
                
        <para>A module archive may not contain multiple modules.</para>
        
        <para>A module archive may be accompanied by a <emphasis>legacy 
        archive</emphasis>. A legacy archive is a standard Java <literal>jar</literal>
        containing compiled classes required by the module, whose filename 
        adheres to the standard for legacy archive names. At runtime there 
        is no difference between a class packaged in a legacy archive and a 
        class packaged directly in the module archive.</para>
        
    </section>
    
    <section id="sourcearchives">
        <title>Source archives</title>
        
        <para>A <emphasis>source archive</emphasis> is a <literal>zip</literal> 
        archive which:</para>
        
        <itemizedlist>
            <listitem>
                <para>contains the source code (<literal>.ceylon</literal>
                and <literal>.java</literal> files) for all compilation units 
                belonging to the module, and</para>
            </listitem>
            <listitem>
                <para>has a filename which adheres to the standard for
                source archive names.</para>
            </listitem>
        </itemizedlist>
        
        <para>Inside a source archive, a Ceylon or Java source file is located in 
        the <emphasis>package directory</emphasis> of the package to which the 
        compilation unit belongs.</para>
        
        <para>The path of a package directory is formed by replacing every period 
        with the directory separator character in the name of the package.</para>
        
        <para>Thus, the structure of the source archive for the module
        <literal>org.hello</literal> might be the following:</para>
        
        <programlisting><![CDATA[org.hello-1.0.0.src
    org/
        hello/
            module.ceylon      //the module descriptor
            main/
                hello.ceylon
            default/
                DefaultHello.ceylon
            personalized/
                PersonalizedHello.ceylon]]></programlisting>
        
        <para>A source archive may not contain the source of multiple modules.</para>
        
    </section>
    
    <section id="modulerepositories">
        <title>Module repositories</title>
        
        <para>A module repository is a directory structure on the local
        filesystem or a remote HTTP or FTP server.</para>
        
        <itemizedlist>
            <listitem>
                <para>A <emphasis>local</emphasis> module repository is 
                identified by a filesystem path.</para>
            </listitem>
            <listitem> 
                <para>A <emphasis>remote</emphasis> module repository is 
                identified by a URL with protocol <literal>http:</literal>,
                <literal>https:</literal>, or <literal>ftp:</literal>.</para> 
            </listitem>
        </itemizedlist>
        
        <para>For example:</para>
        
        <programlisting>modules</programlisting>
        <programlisting>/usr/bin/ceylon/modules</programlisting>
        <programlisting>http://jboss.org/ceylon/modules</programlisting>
        <programlisting>ftp://gavin:secret@modules.ceylon.org/hibernate</programlisting>
        
        <para>A module repository contains module archives, legacy archives, 
        and source archives. The address of an archive belonging to the 
        repository adheres to the following standard form:</para>
        
        <programlisting><emphasis>&lt;repository&gt;</emphasis>/<emphasis>&lt;module-path&gt;</emphasis>/<emphasis>&lt;version&gt;</emphasis>/<emphasis>&lt;archive&gt;</emphasis></programlisting>
        
        <para>where <literal><emphasis>&lt;repository&gt;</emphasis></literal> 
        is the filesystem path or URL of the repository,
        <literal><emphasis>&lt;repository&gt;</emphasis></literal> is the name
        of the archive, and <literal><emphasis>&lt;module-path&gt;</emphasis></literal> 
        is formed by replacing every period with a slash in the module name.</para> 
        
        <para>For example, the module archive <literal>ceylon.lang-1.0.1.car</literal> 
        and source archive <literal>ceylon.lang-1.0.1.src</literal> belonging to the 
        repository included in the Ceylon SDK are obtained from the following
        addresses:</para>
 
        <programlisting>modules/ceylon/lang/1.0.1/ceylon.lang-1.0.1.car</programlisting>        
        <programlisting>modules/ceylon/lang/1.0.1/ceylon.lang-1.0.1.src</programlisting>
        
        <para>The module archive <literal>org.hibernate-3.0.0.beta.car</literal>
        and source archive <literal>org.hibernate-3.0.0.beta.src</literal>
        belonging to the repository <literal>http://jboss.org/ceylon/modules</literal>
        are obtained from the following addresses:</para>
        
        <programlisting>http://jboss.org/ceylon/modules/org/hibernate/3.0.0.beta/org.hibernate-3.0.0.beta.car</programlisting>
        <programlisting>http://jboss.org/ceylon/modules/org/hibernate/3.0.0.beta/org.hibernate-3.0.0.beta.src</programlisting>
        
        <para>The module archive <literal>org.h2-1.2.141.car</literal> and legacy 
        archive <literal>org.h2-1.2.141.jar</literal> belonging to the repository 
        <literal>/usr/bin/ceylon/modules</literal> are obtained from the following 
        addresses:</para>
        
        <programlisting>/usr/bin/ceylon/modules/org/h2/1.2.141/org.h2-1.2.141.car</programlisting>
        <programlisting>/usr/bin/ceylon/modules/org/h2/1.2.141/org.h2-1.2.141.jar</programlisting>
        
        <para>For each archive, the module repository may contain a SHA-1 checksum 
        file. The checksum file is a plain text file containing just the SHA-1 checksum
        of the archive. The address of a checksum file adheres to the following standard 
        form:</para>
        
        <programlisting><emphasis>&lt;repository&gt;</emphasis>/<emphasis>&lt;module-path&gt;</emphasis>/<emphasis>&lt;version&gt;</emphasis>/<emphasis>&lt;archive&gt;</emphasis>.sha1</programlisting>
        
        <para>The compiler or module runtime verifies the checksum after downloading
        the archive from the module repository.</para>
        
        <para>A module repository may contain documentation generated by the Ceylon
        documentation compiler. A module's documentation resides in the
        <emphasis>module documentation directory</emphasis>, a directory with address 
        adhering to the following standard form:</para>
        
        <programlisting><emphasis>&lt;repository&gt;</emphasis>/<emphasis>&lt;module-path&gt;</emphasis>/<emphasis>&lt;version&gt;</emphasis>/module-doc/</programlisting>
        
        <para>For example, the home page for the documentation of the module
        <literal>org.hibernate</literal> is:</para>
        
        <programlisting>http://jboss.org/ceylon/modules/org/hibernate/module-doc/index.html</programlisting>
        
    </section>
    
    <section id="moduledescriptors">
        <title>Module descriptors</title>
        
        <para>A <emphasis>module descriptor</emphasis> is a toplevel method
        of the root package of the module&mdash;the package with the same name as 
        the module&mdash;with the following signature:</para>
        
        <programlisting>public Module module() { ... }</programlisting>
        
        <para>This method is usually specified as a toplevel expression.</para>
        
        <para>A module may be <emphasis>runnable</emphasis>. The module descriptor
        for a runnable module specifies an <emphasis>entry point</emphasis>, a 
        toplevel method or class with a single formal parameter of type 
        <literal>Process</literal>.</para>
        
        <para>The following classes define the format of the Ceylon module
        descriptor:</para>
        
        <programlisting>doc "A module descriptor."
public class Module(

        doc "The name of the module."
        ModuleName name, 
        
        doc "The version id of the module."
        ModuleVersion version,
        
        doc "A description of the module."
        String? doc=null, 
        
        doc "The license under which the module
             is distributed."
        URL? license=null,
        
        doc "The entry point of a runnable
             module."
        void run(Process process) = notRunnable,
        
        doc "Modules used by this module."
        Import... dependencies) { 
        
    ... 

}</programlisting>
        
        <programlisting>doc "Specifies an imported module (dependency) of a 
     module."
public class Import(

        doc "The name of this imported module."
        ModuleName name, 
        
        doc "The version id of this imported module."
        ModuleVersion version=null,
        
        doc "Determines if this imported module is
             required by the module."
        Boolean optional=false, 
        
        doc "Determines if this imported module is
             exported transitively to other modules
             that import the module."
        Boolean export=false) { 
        
    ... 
    
}</programlisting>
                        
        <para>For example:</para>
        
        <programlisting>Module {
    name = 'org.hibernate';
    version = '3.0.0.beta';
    doc = "The best-ever ORM solution!";
    license = 'http://www.gnu.org/licenses/lgpl.html';
    Import {
        name = 'ceylon.lang';
        version = '1.0.1';
        export = true;
    },
    Import {
        name = 'jdbc';
        version = '4.0';
    }
}</programlisting>

        <programlisting>Module {
    name = 'org.hibernate.test';
    version = '3.0.0.beta';
    doc = "The test suite for Hibernate";
    license = 'http://www.gnu.org/licenses/lgpl.html';
    void run(Process process) {
        new TestSuite(process).run();
    }
    Import {
        name = 'org.hibernate';
        version = '3.0.0.beta';
    }
}</programlisting>

    </section>

</section>

<section id="tools">
    <title>Toolset</title>

    <para>The Ceylon SDK contains the following tools:</para>
    
    <itemizedlist>
        <listitem>
            <para>the Java VM, <literal>java</literal>,</para>
        </listitem>
        <listitem>
            <para>the front end for the Java VM, <literal>ceylon</literal>,</para>
        </listitem>
        <listitem>
            <para>the compiler, <literal>ceylonc</literal>,</para>
        </listitem>
        <listitem>
            <para>the module info tool, <literal>ceylonp</literal>,</para>
        </listitem>
        <listitem>
            <para>the documentation compiler, <literal>ceylond</literal>,</para>
        </listitem>
        <listitem>
            <para>the repository replicator, <literal>ceylonr</literal>, and</para>
        </listitem>
        <listitem>
            <para>the source archive extractor, <literal>ceylonf</literal>.</para>
        </listitem>
    </itemizedlist>
    
    <section id="sourcedirectories">
        <title>Source directories</title>
        
        <para>A <emphasis>source directory</emphasis> contains Ceylon source 
        code in files with the extension <literal>.ceylon</literal> and Java 
        source code in files with the extension <literal>.java</literal>. 
        The module and package to which a compilation unit belongs is 
        determined by the subdirectory in which the source file is found.</para>
        
        <para>The name of the package to which a compilation unit belongs is 
        formed by replacing every path directory separator character with a 
        period in the relative path from the source directory to the 
        subdirectory containing the source file. In the case of a Java source 
        file, the subdirectory must agree with the package specified by the 
        Java <literal>package</literal> declaration.</para>
        
        <para>The name of the module to which a compilation unit belongs is 
        determined by searching all containing directories for a module 
        descriptor. The name of the module is formed by replacing every path
        directory separator character with a period in the relative path 
        from the source directory to the subdirectory containing the module 
        descriptor.</para>
        
        <para>Thus, the structure of the source directory containing the module
        <literal>org.hello</literal> might be the following:</para>
        
        <programlisting><![CDATA[source/
    org/
        hello/
            module.ceylon      //the module descriptor
            main/
                hello.ceylon
            default/
                DefaultHello.ceylon
            personalized/
                PersonalizedHello.ceylon]]></programlisting>
                
        <para>The source code for multiple modules may be contained in a
        single source directory.</para>
                
        <comment><para>TODO: define some kind of "default module" for the
        case where no module descriptor is found, just for test code.</para></comment>
        
    </section>
    
    <section>
        <title>Identifying versioned modules</title>
        
        <para>The command line tools expect the following format for a versioned
        module name:</para>
        
        <programlisting><emphasis>&lt;module&gt;</emphasis>/<emphasis>&lt;version&gt;</emphasis></programlisting>
        
        <para>where <literal><emphasis>&lt;module&gt;</emphasis></literal> 
        is the full name of the module, and 
        <literal><emphasis>&lt;version&gt;</emphasis></literal> is the module 
        version identifier. For example:</para>
        
        <programlisting>ceylon.lang/1.0.1</programlisting>
        <programlisting>org.h2/1.2.141</programlisting>
        
        <para>The VM front end supports an extended format that identifies a
        versioned reference to a toplevel declaration:</para>
        
        <programlisting><emphasis>&lt;package&gt;</emphasis>.<emphasis>&lt;name&gt;</emphasis>/<emphasis>&lt;version&gt;</emphasis></programlisting>
        
        <para>where <literal><emphasis>&lt;package&gt;</emphasis></literal> 
        is the full name of the module, and 
        <literal><emphasis>&lt;name&gt;</emphasis></literal> is the name of a
        toplevel method or class. For example:</para>
        
        <programlisting>org.hello.main.hello/1.0.1</programlisting>
        <programlisting>org.hibernate.test.TestSuite/3.0.0.beta</programlisting>
        
    </section>
    
    <section id="vmfrontend">
        <title>The VM front end</title>
        
        <para>The <literal>ceylon</literal> command accepts either:</para>
        
        <itemizedlist>
        <listitem>
            <para>the name of a runnable module with an optional version, or</para>
        </listitem>
        <listitem>
            <para>the fully qualified name of a toplevel method or class with a 
            single formal parameter of type <literal>Process</literal> with an 
            optional version,</para>
        </listitem>
        </itemizedlist>
        
        <para>together with the following options:</para>
        
        <itemizedlist>
            <listitem>
                <para><literal>-rep</literal> specifies a module
                repository.</para>
            </listitem>
            <listitem>
                <para><literal>-src</literal> specifies a source
                directory.</para>
            </listitem>
            <listitem>
                <para><literal>-d</literal> disables the default
                module repositories and source directory.</para>
            </listitem>
        </itemizedlist>
        
        <para>The default module repositories are <literal>modules</literal>
        and <literal>http://modules.ceylon.org</literal>,
        and the default source directory is <literal>source</literal>.</para>
        
        <programlisting>ceylon org.hibernate.test/3.0.0.beta \
        -rep http://jboss.org/ceylon/modules \
        -src ~/projects/hibernate/src</programlisting>
               
        <para>Execution begins with the named toplevel method, and imported 
        modules are loaded lazily as classes they contain are needed. The 
        name and version id of the imported module containing the needed 
        class are determined from the imported package name specified by
        the compilation unit and the imported module version specified by 
        the module descriptor.</para>
        
        <comment><para>TODO: one slight issue with this is that with 
        wildcard imports it is sometimes ambiguous which package a class
        belongs to.</para></comment>
        
        <para>Each version of each module is loaded using a different class 
        loader. Classes inside a module have access to other classes in the 
        same module and to classes belonging to modules that are explicitly 
        imported in the module descriptor. Classes in other modules are not 
        accessible.</para>
        
        <para>The module runtime searches for modules in the following 
        locations:</para>
        
        <itemizedlist>
            <listitem>
                <para>module archives in the specified repositories,</para>
            </listitem>
            <listitem>
                <para>source archives in the specified repositories, 
                and</para>
            </listitem>
            <listitem>
                <para>module directories in the specified source 
                directories.</para>
            </listitem>
        </itemizedlist>
        
        <para>If no version identifier is specified for a module, the module 
        is assumed to exist in a source directory.</para>
        
        <para>Source code in source archives and source directories is 
        automatically compiled by the module runtime.</para>
                
    </section>

    <section id="compiler">
        <title>The compiler</title>
        
        <para>The Ceylon compiler is able to compile Ceylon and Java source 
        code and directly produce module and source archives in a module 
        repository.</para>
        
        <para>The <literal>ceylonc</literal> command accepts a list of
        module names (without versions), along with the following options:</para>
        
        <itemizedlist>
            <listitem>
                <para><literal>-out</literal> specifies the output module 
                repository (which must be a local module repository or a
                remote module repository with protocol <literal>ftp:</literal>).</para>
            </listitem>
            <listitem>
                <para><literal>-src</literal> specifies a source
                directory.</para>
            </listitem>
            <listitem>
                <para><literal>-rep</literal> specifies a module
                repository containing dependencies.</para>
            </listitem>
            <listitem>
                <para><literal>-d</literal> disables the default
                module repositories and source directory.</para>
            </listitem>
        </itemizedlist>
        
        <para>The default module repositories are <literal>modules</literal>
        and <literal>http://modules.ceylon.org</literal>,
        and the default source directory is <literal>source</literal>.
        The default output module repository is <literal>modules</literal>.</para>
        
        <programlisting>ceylonc org.hibernate.test org.hibernate \
        -rep http://jboss.org/ceylon/modules \
        -src ~/projects/hibernate/src \
        -out ~/projects/hibernate/build</programlisting>
        
        <comment><para>TODO: how do you create signed jars? Some additional
        commandline options?</para></comment>
        
        <para>The compiler searches for compilation units belonging to the 
        specified modules in the specified source directories. For each 
        specified module, the compiler generates a module archive, source 
        archive, and their checksum files in the specified output module 
        repository.</para>
        
        <para>All program elements imported by a compilation unit must
        belong to the same module as the compilation unit, or must belong
        to a module that is explicitly imported in the module descriptor.</para>
        
        <para>The compiler searches for dependencies in the following 
        locations:</para>
        
        <itemizedlist>
            <listitem>
                <para>module archives in the specified repositories,</para>
            </listitem>
            <listitem>
                <para>source archives in the specified repositories, 
                and</para>
            </listitem>
            <listitem>
                <para>module directories in the specified source 
                directories.</para>
            </listitem>
        </itemizedlist>
                
    </section>
    
    <section id="moduleinfotool">
        <title>The module info tool</title>
        
        <para>The module info tool prints information about the contents of
        a module archive, its description, its licence, and its dependencies
        to the console.</para>
        
        <para>The <literal>ceylonp</literal> command accepts a list of module 
        names with optional versions, along with the following options:</para>
        
        <itemizedlist>
            <listitem>
                <para><literal>-rep</literal> specifies a module
                repository.</para>
            </listitem>
            <listitem>
                <para><literal>-src</literal> specifies a source
                directory.</para>
            </listitem>
            <listitem>
                <para><literal>-d</literal> disables the default
                module repositories and source directory.</para>
            </listitem>
        </itemizedlist>
        
        <para>The default module repositories are <literal>modules</literal>
        and <literal>http://modules.ceylon.org</literal>,
        and the default source directory is <literal>source</literal>.</para>
        
        <programlisting>ceylonp org.hibernate/3.0.0.beta
        -rep http://jboss.org/ceylon/modules</programlisting>
        
        <para>The tool searches for modules in the following locations:</para>
        
        <itemizedlist>
            <listitem>
                <para>module archives in the specified repositories,</para>
            </listitem>
            <listitem>
                <para>source archives in the specified repositories, 
                and</para>
            </listitem>
            <listitem>
                <para>module directories in the specified source 
                directories.</para>
            </listitem>
        </itemizedlist>
        
        <para>If no version identifier is specified for a module, the tool 
        prints information about all available versions of the module.</para>

    </section>
        
    <section id="documentationcompiler">
        <title>The documentation compiler</title>
        
        <para>The documentation compiler generates XHTML-format 
        documentation from Ceylon source files.</para>
        
        <para>The <literal>ceylond</literal> command accepts a list of
        module names with optional versions, along with the following options:</para>
        
        <itemizedlist>
            <listitem>
                <para><literal>-out</literal> specifies the output module 
                repository (which must be a local module repository or a 
                remote module repository with protocol <literal>ftp:</literal>).</para>
            </listitem>
            <listitem>
                <para><literal>-src</literal> specifies a source
                directory.</para>
            </listitem>
            <listitem>
                <para><literal>-rep</literal> specifies a module
                repository containing source archives.</para>
            </listitem>
            <listitem>
                <para><literal>-d</literal> disables the default
                module repositories and source directory.</para>
            </listitem>
        </itemizedlist>
        
        <para>The default module repositories are <literal>modules</literal>
        and <literal>http://modules.ceylon.org</literal>,
        and the default source directory is <literal>source</literal>.
        The default output module repository is <literal>modules</literal>.</para>
        
        <programlisting>ceylond org.hibernate/3.0.0.beta \
        -src ~/projects/hibernate/src \
        -out ~/projects/hibernate/build</programlisting>
        
        <para>The documentation compiler searches for compilation units 
        belonging to the specified modules in the specified source directories
        and in source archives in the specified module repositories. For each 
        specified module, the compiler generates a set of XHTML pages in the 
        module documentation directory (the <literal>module-doc</literal> 
        directory) of the specified output module repository.</para>
        
        <para>The compiler searches for source in the following locations:</para>
        
        <itemizedlist>
            <listitem>
                <para>source archives in the specified repositories, 
                and</para>
            </listitem>
            <listitem>
                <para>module directories in the specified source 
                directories.</para>
            </listitem>
        </itemizedlist>
                
        <para>If no version identifier is specified for a module, the module 
        is assumed to exist in a source directory.</para>
        
    </section>
    
    <section id="repositoryreplicator">
        <title>The repository replicator</title>
        
        <para>The repository replicator copies modules from one repository
        to another. For example, it may be used to create local copies of
        modules in remote repositories, or to publish modules to a remote 
        repository.</para>
        
        <para>To publish a module to <literal>http://modules.ceylon.org</literal>,
        a module developer may use the repository replicator to submit the
        module to the developer's private repository at 
        <literal>ftp://modules.ceylon.org</literal>.</para>
        
        <para>The <literal>ceylonr</literal> command accepts a list of 
        versioned module names, along with the following options:</para>
        
        <itemizedlist>
            <listitem>
                <para><literal>-out</literal> specifies the output module 
                repository (which must be a local module repository or a 
                remote module repository with protocol <literal>ftp:</literal>).</para>
            </listitem>
            <listitem>
                <para><literal>-rep</literal> specifies a module
                repository containing source archives.</para>
            </listitem>
            <listitem>
                <para><literal>-d</literal> disables the default
                module repositories.</para>
            </listitem>
            <listitem>
                <para><literal>-nosrc</literal> disables replication of
                source archives.</para>
            </listitem>
            <listitem>
                <para><literal>-nodoc</literal> disables replication of
                module documentation directories.</para>
            </listitem>
        </itemizedlist>
        
        <para>The default module repositories are <literal>modules</literal>
        and <literal>http://modules.ceylon.org</literal>. The default output
        module repository is <literal>modules</literal>.</para>
        
        <programlisting>ceylonr org.hibernate/3.0.0.beta org.hibernate.test/3.0.0.beta org.hibernate.example/3.0.0.beta \
        -rep http://jboss.org/ceylon/modules</programlisting>
        
        <programlisting>ceylonr org.hibernate/3.0.0.beta \
        -rep modules \
        -out ftp://gavin:secret@modules.ceylon.org/hibernate</programlisting>
        
        <para>The repository replicator searches for directories containing
        the specified modules in the specified module repositories and, if 
        found, replicates their contents into the specified output module 
        repository.</para>
        
    </section>
    
    <section id="sourcearchiveextractor">
        <title>The source archive extractor</title>
        
        <para>The source archive extractor fetches source archives and 
        extracts their contents into a source directory. This is
        especially useful for working with example projects.</para>
        
        <para>The <literal>ceylonf</literal> command accepts a list of
        versioned module names, along with the following options:</para>
        
        <itemizedlist>
            <listitem>
                <para><literal>-src</literal> specifies the output source
                directory.</para>
            </listitem>
            <listitem>
                <para><literal>-rep</literal> specifies a module
                repository containing source archives.</para>
            </listitem>
            <listitem>
                <para><literal>-d</literal> disables the default
                module repositories.</para>
            </listitem>
        </itemizedlist>
        
        <para>The default module repositories are <literal>modules</literal>
        and <literal>http://modules.ceylon.org</literal>. The default output 
        source directory is <literal>source</literal>.</para>
        
        <programlisting>ceylonf org.hibernate.example/3.0.0.beta \
        -rep http://jboss.org/ceylon/modules \
        -src ~/projects/hibernate/src</programlisting>
        
        <para>The source archive extractor searches for source archives for
        the specified modules in the specified module repositories and, if
        found, extracts their contents into the specified source directory.</para>
        
    </section>

</section>

</chapter>