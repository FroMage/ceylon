<chapter id="lexical">
    <title>Lexical structure</title>
    
    <para>The lexical structure of Ceylon source files is very similar to Java. 
    Like Java, Unicode escape sequences <literal>\uXXXX</literal> are processed
    first, to produce a raw stream of Unicode characters. This character stream 
    is then processed by the lexer to produce a stream of terminal tokens of the 
    Ceylon grammar.</para>
        
        <comment><para>TODO: what is the character encoding? Does it work just like
        <literal>javac</literal>?</para></comment>
        
    <section>
        <title>Whitespace</title>
        
        <para>Whitespace characters are the ASCII <literal>SP</literal>, 
        <literal>HT</literal> <literal>FF</literal>, <literal>LF</literal> and 
        <literal>CR</literal> characters.</para>
        
        <programlisting>Whitespace := " " | Tab | Formfeed | Newline | Return</programlisting>
        
        <para>Outside of a comment, string literal, or single quoted literal,
        whitespace acts as a token separator and is immediately discarded by
        the lexer. Whitespace is not used as a statement separator.</para>
        
    </section>
    
    <section>
        <title>Comments</title>
        
        <para>There are two kinds of comments:</para>
        
        <itemizedlist>
            <listitem>
                <para>a multiline comment that begins with <literal>/*</literal> 
                and extends until <literal>*/</literal>, and</para>
            </listitem>
            <listitem>
                <para>an end-of-line comment begins with <literal>//</literal> and 
                extends until a line terminator: an ASCII <literal>LF</literal>,
                <literal>CR</literal> or <literal>CR LF</literal>.</para>
            </listitem>
        </itemizedlist>
        
        <para>Both kinds of comments can be nested.</para>
        
        <programlisting>LineComment := "//" ~(Newline|Return)* (Return Newline | Return | Newline)</programlisting>
        
        <programlisting>MultilineComment := "/*" ( MultilineCommmentCharacter | MultilineComment )* "*/"</programlisting>
        
        <programlisting>MultilineCommmentCharacter := ~("/"|"*") | ("/" ~"*") => "/" | ("*" ~"/") => "*"</programlisting>
        
        <para>The following examples are legal comments:</para>
        
        <programlisting>//this comment stops at the end of the line</programlisting>
        
        <programlisting>/*
   but this is a comment that spans
   multiple lines
*/</programlisting>
  
        <para>Comments are treated as whitespace by both the compiler and documentation
        compiler. Comments may act as token separators, but their content is immediately 
        discarded by the lexer.</para>
  
    </section>
    
    <section>
        <title>Identifiers and keywords</title>
        
        <para>Identifiers may contain upper and lowercase letters, digits and 
        underscore.</para>
        
        <programlisting>IdentifierChar := LowercaseChar | UppercaseChar | Digit</programlisting>
        <programlisting>Digit := "0".."9"</programlisting>
        <programlisting>LowercaseChar := "a".."z" | "_"</programlisting>
        <programlisting>UppercaseChar := "A".."Z"</programlisting>
        
        <para>The Ceylon lexer distinguishes identifiers which begin with an initial 
        uppercase character from identifiers which begin with an initial lowercase
        character or underscore.</para>
        
        <programlisting>LIdentifier := LowercaseChar IdentifierChar*</programlisting>
        <programlisting>UIdentifier := UppercaseChar IdentifierChar*</programlisting>

        <para>The following examples are legal identifiers:</para>
        
        <programlisting>Person</programlisting>
        <programlisting>name</programlisting>
        <programlisting>personName</programlisting>
        <programlisting>_id</programlisting>
        <programlisting>x2</programlisting>
        
        <para>Package and module names are built from all-lowercase identifiers.</para>
        
        <programlisting>PIdentifier := LowercaseChar+</programlisting>
        
        <para>The following reserved words are not legal identifier names:</para>
        
        <para><literal>
        import
        class interface alias 
        satisfies extends abstracts
        in out
        given
        void subtype local assign
        return break throw retry 
        this super
        if else switch case for fail do while try catch finally
        exists nonempty is
        public module package
        abstract default fixed override mutable extension 
        deprecated volatile small
        </literal></para>
        
        <comment><para>TODO: Eventually we will probably want to support identifiers 
        in non-European character sets. We can use an initial underscore to distinguish
        "initial lowercase" identifiers.</para></comment>
        
    </section>
    
    <section>
        <title>Literals</title>
        
    <section>
        <title>Numeric literals</title>
        
        <para>A natural number literal has this form:</para>
        
        <programlisting>NaturalLiteral = Digit+</programlisting>
        
        <para>A floating point number literal has this form:</para>
        
        <programlisting>FloatLiteral := Digit+ "." Digit+ ( ("E"|"e") ("+"|"-")? Digit+ )?</programlisting>
        
        <para>The following examples are legal numeric literals:</para>
        
        <programlisting>69</programlisting>
        <programlisting>6.9</programlisting>
        <programlisting>0.999e-10</programlisting>
        <programlisting>1.0E2</programlisting>
        
        <para>The following are <emphasis>not</emphasis> valid numeric literals:</para>
        
        <programlisting>.33  //Error: floating point literals may not begin with a decimal point</programlisting>
        <programlisting>1.  //Error: floating point literals may not end with a decimal point</programlisting>
        <programlisting>99E+3   //Error: floating point literals with an exponent must contain a decimal point</programlisting>
        
        <comment><para>TODO: The symbol <literal>.</literal> is also an operator. Are
        expressions like <literal>1.decimal</literal> and <literal>1.0.whole</literal>
        allowed, or do we force the use of parentheses as in <literal>(1).decimal</literal> 
        and <literal>(1.0).whole</literal>?</para></comment>
        
    </section>
    
    <section>
        <title>Character literals</title>
        
        <para>A single character literal consists of a character, surrounded by backticks.</para> 
        
        <programlisting>CharacterLiteral := "`" Character "`"</programlisting>
        
        <programlisting>Character := ~("`" | "\" | Tab | Formfeed | Newline | Return | Backspace) | EscapeSequence</programlisting>
        
        <programlisting>EscapeSequence := "\" ("b" | "t" | "n" | "f" | "r" | "\" | "&quot;" | "'" | "`" )</programlisting>
        
        <para>The following are legal character literals:</para>
        
        <programlisting>`A`</programlisting>
        <programlisting>`#`</programlisting>
        <programlisting>` `</programlisting>
        <programlisting>`\n`</programlisting>
        
        <comment><para>TODO: should we support an escape sequence for Unicode character names
        <literal>\N{name}</literal> like Python does?</para></comment>
        
    </section>
    
    <section>
        <title>String literals</title>
        
        <para>A character string literal is a character sequence surrounded by 
        double quotes.</para>
        
        <programlisting>StringLiteral := "&quot;" StringCharacter* "&quot;"</programlisting>
        
        <programlisting>StringCharacter := ~( "\" | "&quot;" | "'" ) | EscapeSequence</programlisting>
        
        <para>The following are legal strings:</para>
        
        <programlisting>"Hello!"</programlisting>
        
        <programlisting>" \t\n\f\r,;:"</programlisting>
    
    </section>
    
    <section>
        <title>Single quoted literals</title>
        
        <para>Single-quoted strings are used to express literal values for 
        user-defined types. A single quoted literal is a character sequence 
        surrounded by single quotes:</para>
        
        <programlisting>QuotedLiteral := "'" StringCharacter* "'"</programlisting>
        
    </section>
    
        
    </section>
    
    <section>
        <title>Operators and delimiters</title>
        
        <para>The following character sequences are operators and/or punctuation:</para>
        
        <para><literal>
        , ; ...
        { } ( ) [ ]
        . ?. []. 
        =
        + - / * % **
        ++ --
        .. ->
        ?
        ! &amp;&amp; || =>
        ~ &amp; | ^
        == != === &lt; &gt; &lt;= &gt;= &lt;=&gt;
        := .= += -= /= *= %= |= &amp;= ^= ||= &amp;&amp;= ?=
        </literal></para>
        
    </section>

</chapter>