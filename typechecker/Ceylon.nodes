"A file containing Ceylon source."
^(COMPILATION_UNIT 
    IMPORT_LIST?
    DECLARATION*(TYPE_DECLARATION MEMBER_DECLARATION))

^(IMPORT_LIST 
    IMPORT_DECLARATION*)

^(IMPORT_DECLARATION 
    IMPORT_PATH 
    IMPORT_ELEM* 
    IMPORT_WILDCARD?)

^(IMPORT_PATH 
    LIDENTIFIER*)

^(IMPORT_ELEM 
    IMPLICIT? 
    IMPORT_ALIAS 
    TYPE_NAME)

^(IMPORT_ALIAS 
    TYPE_NAME)

^(IMPLICIT)

^(IMPORT_WILDCARD)

"A declaration."
^(DECLARATION:STATEMENT ANNOTATION_LIST?)

"An annotated class or interface declaration."
^(TYPE_DECLARATION:DECLARATION 
    CLASS_OR_INTERFACE_DECLARATION(CLASS_DECLARATION INTERFACE_DECLARATION))
    
"An annotated method or attribute declaration."
^(MEMBER_DECLARATION:DECLARATION 
    METHOD_OR_ATTRIBUTE_DECLARATION(ATTRIBUTE_DECLARATION ATTRIBUTE_GETTER 
                                    ATTRIBUTE_SETTER METHOD_DECLARATION
                                    OBJECT_DECLARATION))

^(ANY_TYPE_DECLARATION
    TYPE_NAME
    CASE_TYPES?
    SATISFIED_TYPES?)

"A class or interface declaration."
^(CLASS_OR_INTERFACE_DECLARATION:ANY_TYPE_DECLARATION
    TYPE_PARAMETER_LIST?
    TYPE_CONSTRAINT_LIST?
    TYPE_SPECIFIER?)

^(SATISFIED_TYPES TYPE*)
^(ABSTRACTED_TYPE TYPE)
^(CASE_TYPES TYPE*)
^(EXTENDED_TYPE 
    TYPE 
    POSITIONAL_ARGUMENT_LIST)

"A list of constraints organized by parameter."
^(TYPE_CONSTRAINT_LIST 
    TYPE_CONSTRAINT*)

"A set of type constraints on a certain type parameter."
^(TYPE_CONSTRAINT:ANY_TYPE_DECLARATION
    PARAMETER_LIST? 
    ABSTRACTED_TYPE?)

^(TYPE_SPECIFIER TYPE)

^(CLASS_DECLARATION:CLASS_OR_INTERFACE_DECLARATION 
    EXTENDED_TYPE?
    PARAMETER_LIST
    CLASS_BODY?)

^(INTERFACE_DECLARATION:CLASS_OR_INTERFACE_DECLARATION 
    INTERFACE_BODY?)

"A method or attribute declaration."
^(METHOD_OR_ATTRIBUTE_DECLARATION 
    MEMBER_NAME)

"A simple or formal attribute declaration."
^(ATTRIBUTE_DECLARATION:METHOD_OR_ATTRIBUTE_DECLARATION 
    TYPE?
    SPECIFIER_OR_INITIALIZER_EXPRESSION?(SPECIFIER_EXPRESSION INITIALIZER_EXPRESSION))

"An attribute getter declaration."
^(ATTRIBUTE_GETTER:METHOD_OR_ATTRIBUTE_DECLARATION 
    TYPE? 
    BLOCK)

"An attribute setter declaration."
^(ATTRIBUTE_SETTER:METHOD_OR_ATTRIBUTE_DECLARATION 
    BLOCK)

"A method declaration."
^(METHOD_DECLARATION:METHOD_OR_ATTRIBUTE_DECLARATION 
    TYPE?
    VOID_MODIFIER?
    TYPE_PARAMETER_LIST?
    PARAMETER_LIST*
    TYPE_CONSTRAINT_LIST?
    BLOCK?
    SPECIFIER_EXPRESSION?)

^(VOID_MODIFIER)

^(OBJECT_DECLARATION:METHOD_OR_ATTRIBUTE_DECLARATION
    EXTENDED_TYPE?
    SATISFIED_TYPES?
    CLASS_BODY)

^(PARAMETER_LIST 
    PARAMETER*)
^(PARAMETER 
    TYPE 
    PARAMETER_NAME 
    SPECIFIER_EXPRESSION?)

^(TYPE_PARAMETER_LIST TYPE_PARAMETER*)
^(TYPE_PARAMETER
    TYPE_VARIANCE?
    TYPE_NAME)
^(TYPE_VARIANCE)

"A method or attribute body containing statements and declarations."
^(BLOCK 
    STATEMENT*(TYPE_DECLARATION MEMBER_DECLARATION 
               SPECIFIER_STATEMENT EXPRESSION_STATEMENT 
               IF SWITCH TRY FOR WHILE) 
    DIRECTIVE?(RETURN THROW CONTINUE BREAK RETRY))

"A class body."
^(CLASS_BODY 
    STATEMENT*(TYPE_DECLARATION MEMBER_DECLARATION 
               SPECIFIER_STATEMENT EXPRESSION_STATEMENT 
               IF SWITCH TRY FOR WHILE))

"An interface body."
^(INTERFACE_BODY 
    DECLARATION*(TYPE_DECLARATION MEMBER_DECLARATION))

"A produced type."
^(TYPE 
    TYPE_NAME 
    TYPE_ARGUMENT_LIST?)

"A list of type arguments in a produced type."
^(TYPE_ARGUMENT_LIST 
    TYPE*)

"A control directive."
^(DIRECTIVE)
^(RETURN:DIRECTIVE EXPRESSION?)
^(THROW:DIRECTIVE EXPRESSION?)
^(CONTINUE:DIRECTIVE)
^(BREAK:DIRECTIVE)
^(RETRY:DIRECTIVE)

"A statement or declaration."
^(STATEMENT)

"An expression statement, specification statement, or control structure."
^(EXECUTABLE_STATEMENT:STATEMENT)

^(SPECIFIER_STATEMENT:EXECUTABLE_STATEMENT 
    MEMBER_REFERENCE
    SPECIFIER_EXPRESSION)

^(EXPRESSION_STATEMENT:EXECUTABLE_STATEMENT 
    EXPRESSION)

^(IF:EXECUTABLE_STATEMENT)
^(SWITCH:EXECUTABLE_STATEMENT)
^(TRY:EXECUTABLE_STATEMENT)
^(FOR:EXECUTABLE_STATEMENT)
^(WHILE:EXECUTABLE_STATEMENT)

^(OPERATOR_EXPRESSION:TERM 
    TERM*(PRIMARY FORMAT_OP NOT_OP COMPLEMENT_OP ASSIGN_OP EQUAL_OP IDENTICAL_OP 
         AND_OP OR_OP INCREMENT_OP DECREMENT_OP SUM_OP DIFFERENCE_OP PRODUCT_OP 
         QUOTIENT_OP INTERSECTION_OP UNION_OP XOR_OP REMAINDER_OP NOT_EQUAL_OP 
         LARGER_OP SMALLER_OP LARGE_AS_OP SMALL_AS_OP ENTRY_OP COMPARE_OP IN_OP 
         IS_OP POWER_OP APPLY_OP ADD_ASSIGN_OP SUBTRACT_ASSIGN_OP MULTIPLY_ASSIGN_OP 
         DIVIDE_ASSIGN_OP INTERSECT_ASSIGN_OP UNION_ASSIGN_OP XOR_ASSIGN_OP 
         COMPLEMENT_ASSIGN_OP REMAINDER_ASSIGN_OP DEFAULT_ASSIGN_OP AND_ASSIGN_OP 
         OR_ASSIGN_OP DEFAULT_OP))
         
^(DEFAULT_OP: OPERATOR_EXPRESSION)
^(FORMAT_OP: OPERATOR_EXPRESSION)
^(NOT_OP: OPERATOR_EXPRESSION)
^(COMPLEMENT_OP: OPERATOR_EXPRESSION)
^(ASSIGN_OP: OPERATOR_EXPRESSION)
^(EQUAL_OP: OPERATOR_EXPRESSION)
^(IDENTICAL_OP: OPERATOR_EXPRESSION)
^(AND_OP: OPERATOR_EXPRESSION)
^(OR_OP: OPERATOR_EXPRESSION)
^(INCREMENT_OP: OPERATOR_EXPRESSION)
^(DECREMENT_OP: OPERATOR_EXPRESSION)
^(SUM_OP: OPERATOR_EXPRESSION)
^(DIFFERENCE_OP: OPERATOR_EXPRESSION)
^(PRODUCT_OP: OPERATOR_EXPRESSION)
^(QUOTIENT_OP: OPERATOR_EXPRESSION)
^(INTERSECTION_OP: OPERATOR_EXPRESSION)
^(UNION_OP: OPERATOR_EXPRESSION)
^(XOR_OP: OPERATOR_EXPRESSION)
^(REMAINDER_OP: OPERATOR_EXPRESSION)
^(NOT_EQUAL_OP: OPERATOR_EXPRESSION)
^(LARGER_OP: OPERATOR_EXPRESSION)
^(SMALLER_OP: OPERATOR_EXPRESSION)
^(LARGE_AS_OP: OPERATOR_EXPRESSION)
^(SMALL_AS_OP: OPERATOR_EXPRESSION)
^(ENTRY_OP: OPERATOR_EXPRESSION)
^(COMPARE_OP: OPERATOR_EXPRESSION)
^(IN_OP: OPERATOR_EXPRESSION)
^(IS_OP: OPERATOR_EXPRESSION)
^(POWER_OP: OPERATOR_EXPRESSION)
^(APPLY_OP: OPERATOR_EXPRESSION)
^(ADD_ASSIGN_OP: OPERATOR_EXPRESSION)
^(SUBTRACT_ASSIGN_OP: OPERATOR_EXPRESSION)
^(MULTIPLY_ASSIGN_OP: OPERATOR_EXPRESSION)
^(DIVIDE_ASSIGN_OP: OPERATOR_EXPRESSION)
^(INTERSECT_ASSIGN_OP: OPERATOR_EXPRESSION)
^(UNION_ASSIGN_OP: OPERATOR_EXPRESSION)
^(XOR_ASSIGN_OP: OPERATOR_EXPRESSION)
^(COMPLEMENT_ASSIGN_OP: OPERATOR_EXPRESSION)
^(REMAINDER_ASSIGN_OP: OPERATOR_EXPRESSION)
^(DEFAULT_ASSIGN_OP: OPERATOR_EXPRESSION)
^(AND_ASSIGN_OP: OPERATOR_EXPRESSION)
^(OR_ASSIGN_OP: OPERATOR_EXPRESSION)

^(TERM)

"A parenthesized list of expressions."
^(EXPRESSION_LIST 
    EXPRESSION*)

"An expression."
^(EXPRESSION:ATOM 
    TERM(PRIMARY FORMAT_OP NOT_OP COMPLEMENT_OP ASSIGN_OP EQUAL_OP IDENTICAL_OP 
         AND_OP OR_OP INCREMENT_OP DECREMENT_OP SUM_OP DIFFERENCE_OP PRODUCT_OP 
         QUOTIENT_OP INTERSECTION_OP UNION_OP XOR_OP REMAINDER_OP NOT_EQUAL_OP 
         LARGER_OP SMALLER_OP LARGE_AS_OP SMALL_AS_OP ENTRY_OP COMPARE_OP IN_OP 
         IS_OP POWER_OP APPLY_OP ADD_ASSIGN_OP SUBTRACT_ASSIGN_OP MULTIPLY_ASSIGN_OP 
         DIVIDE_ASSIGN_OP INTERSECT_ASSIGN_OP UNION_ASSIGN_OP XOR_ASSIGN_OP 
         COMPLEMENT_ASSIGN_OP REMAINDER_ASSIGN_OP DEFAULT_ASSIGN_OP AND_ASSIGN_OP 
         OR_ASSIGN_OP DEFAULT_OP))

^(PRIMARY:TERM
    RECEIVER(CALL_EXPRESSION MEMBER_EXPRESSION 
             TYPE_REFERENCE MEMBER_REFERENCE 
             EXPRESSION SEQUENCE_ENUMERATION STRING_TEMPLATE
             FLOAT_LITERAL NATURAL_LITERAL 
             CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL))

"The receiver of a member reference or invocation expression."
^(RECEIVER)

"An invocation expression."
^(CALL_EXPRESSION:RECEIVER
    PRIMARY
    ARGUMENT_LIST(NAMED_ARGUMENT_LIST POSITIONAL_ARGUMENT_LIST))

"A qualified member reference expression."
^(MEMBER_EXPRESSION:RECEIVER 
    PRIMARY
    MEMBER_REFERENCE)

"A reference to a member in an expression."
^(MEMBER_REFERENCE:ATOM
    MEMBER_NAME 
    TYPE_ARGUMENT_LIST?)

"A reference to a type in an expression."
^(TYPE_REFERENCE:ATOM
    TYPE_NAME 
    TYPE_ARGUMENT_LIST?)

"A list of arguments in an invocation expression."
^(ARGUMENT_LIST)

"A list of named arguments."
^(NAMED_ARGUMENT_LIST:ARGUMENT_LIST 
    NAMED_ARGUMENT*)

"A list of positional arguments."
^(POSITIONAL_ARGUMENT_LIST:ARGUMENT_LIST 
    POSITIONAL_ARGUMENT*)

^(NAMED_ARGUMENT
    NAMED_ARGUMENT_DECLARATION(SPECIFIED_ARGUMENT))
^(POSITIONAL_ARGUMENT 
    EXPRESSION)

^(NAMED_ARGUMENT_DECLARATION)
^(SPECIFIED_ARGUMENT:NAMED_ARGUMENT_DECLARATION 
    PARAMETER_NAME 
    SPECIFIER_EXPRESSION)

^(SPECIFIER_OR_INITIALIZER_EXPRESSION EXPRESSION)

"A specifier expression."
^(SPECIFIER_EXPRESSION:SPECIFIER_OR_INITIALIZER_EXPRESSION)

"An initializer expression."
^(INITIALIZER_EXPRESSION:SPECIFIER_OR_INITIALIZER_EXPRESSION)

"A member reference, type reference, literal, string template, or parenthesized expression."
^(ATOM:RECEIVER)
^(SEQUENCE_ENUMERATION:ATOM 
    EXPRESSION_LIST)
^(FLOAT_LITERAL:ATOM)
^(NATURAL_LITERAL:ATOM)
^(CHAR_LITERAL:ATOM)
^(QUOTED_LITERAL:ATOM)
^(STRING_LITERAL:ATOM)

"A string template."
^(STRING_TEMPLATE:ATOM 
    STRING_LITERAL* 
    EXPRESSION*)

"A type name."
^(TYPE_NAME UIDENTIFIER)

"A member name."
^(MEMBER_NAME LIDENTIFIER)

"A parameter name."
^(PARAMETER_NAME LIDENTIFIER)

"A list of annotations of a program element."
^(ANNOTATION_LIST 
    ANNOTATION*)

"A program element annotation."
^(ANNOTATION)

"An initial lowercase identifier."
^(LIDENTIFIER)

"An initial uppercase identifier."
^(UIDENTIFIER)
