"A file containing Ceylon source."
^(COMPILATION_UNIT 
    IMPORT_LIST?
    DECL*(TYPE_DECL MEMBER_DECL))

^(IMPORT_LIST 
    IMPORT_DECL*)

^(IMPORT_DECL 
    IMPORT_PATH 
    IMPORT_ELEM* 
    IMPORT_WILDCARD?)

^(IMPORT_PATH 
    LIDENTIFIER*)

^(IMPORT_ELEM 
    IMPLICIT? 
    IMPORT_ALIAS 
    TYPE_NAME)

^(IMPORT_ALIAS 
    TYPE_NAME)

^(IMPLICIT)

^(IMPORT_WILDCARD)

"A declaration."
^(DECL:ABSTRACT_STATEMENT)

"An annotated class or interface declaration."
^(TYPE_DECL:DECL 
    ABSTRACT_TYPE_DECL(CLASS_DECL INTERFACE_DECL) 
    ANNOTATION_LIST?)
    
"An annotated method or attribute declaration."
^(MEMBER_DECL:DECL 
    ABSTRACT_MEMBER_DECL(ATTRIBUTE_DECL ATTRIBUTE_GETTER ATTRIBUTE_SETTER METHOD_DECL) 
    ANNOTATION_LIST?)
    
"A class or interface declaration."
^(ABSTRACT_TYPE_DECL TYPE_NAME)

^(CLASS_DECL:ABSTRACT_TYPE_DECL 
    CLASS_BODY)

^(INTERFACE_DECL:ABSTRACT_TYPE_DECL 
    INTERFACE_BODY)

"A method or attribute declaration."
^(ABSTRACT_MEMBER_DECL 
    MEMBER_NAME)

"A simple or formal attribute declaration."
^(ATTRIBUTE_DECL:ABSTRACT_MEMBER_DECL 
    TYPE?)

"An attribute getter declaration."
^(ATTRIBUTE_GETTER:ABSTRACT_MEMBER_DECL 
    TYPE? 
    BLOCK)

"An attribute setter declaration."
^(ATTRIBUTE_SETTER:ABSTRACT_MEMBER_DECL 
    BLOCK)

"A method declaration."
^(METHOD_DECL:ABSTRACT_MEMBER_DECL 
    TYPE? 
    BLOCK)

"A method or attribute body containing statements and declarations."
^(BLOCK 
    ABSTRACT_STATEMENT*(TYPE_DECL MEMBER_DECL STATEMENT) 
    DIRECTIVE?)

"A class body."
^(CLASS_BODY 
    ABSTRACT_STATEMENT*(TYPE_DECL MEMBER_DECL STATEMENT))

"An interface body."
^(INTERFACE_BODY 
    DECL*(TYPE_DECL MEMBER_DECL))

"A produced type."
^(TYPE TYPE_NAME TYPE_ARG_LIST?)

"A list of type arguments in a produced type."
^(TYPE_ARG_LIST TYPE*)

"A control directive."
^(DIRECTIVE 
    ABSTRACT_DIRECTIVE*(RETURN THROW CONTINUE BREAK RETRY))

^(ABSTRACT_DIRECTIVE)
^(RETURN:ABSTRACT_DIRECTIVE EXPR?)
^(THROW:ABSTRACT_DIRECTIVE EXPR?)
^(CONTINUE:ABSTRACT_DIRECTIVE)
^(BREAK:ABSTRACT_DIRECTIVE)
^(RETRY:ABSTRACT_DIRECTIVE)

"A statement or declaration."
^(ABSTRACT_STATEMENT)

"A statement."
^(STATEMENT:ABSTRACT_STATEMENT 
    ABSTRACT_EXECUTABLE_STATEMENT(SPEC_STMT EXPR_STMT IF SWITCH TRY FOR WHILE))

"An expression statement, specification statement, or control structure."
^(ABSTRACT_EXECUTABLE_STATEMENT)
^(SPEC_STMT:ABSTRACT_EXECUTABLE_STATEMENT SPEC_EXPR)
^(EXPR_STMT:ABSTRACT_EXECUTABLE_STATEMENT EXPR)
^(IF:ABSTRACT_EXECUTABLE_STATEMENT)
^(SWITCH:ABSTRACT_EXECUTABLE_STATEMENT)
^(TRY:ABSTRACT_EXECUTABLE_STATEMENT)
^(FOR:ABSTRACT_EXECUTABLE_STATEMENT)
^(WHILE:ABSTRACT_EXECUTABLE_STATEMENT)

"A parenthesized list of expressions."
^(EXPR_LIST 
    EXPR*)

"An expression."
^(EXPR:ABSTRACT_ATOM 
    PRIMARY?)

^(PRIMARY 
    ABSTRACT_RECEIVER(CALL_EXPR MEMBER_EXPR BASE))

"The receiver of a member reference or invocation expression."
^(ABSTRACT_RECEIVER)

"An invocation expression."
^(CALL_EXPR:ABSTRACT_RECEIVER
    ABSTRACT_RECEIVER(CALL_EXPR MEMBER_EXPR BASE)
    ABSTRACT_ARG_LIST(NAMED_ARG_LIST POS_ARG_LIST))

"A qualified member reference expression."
^(MEMBER_EXPR:ABSTRACT_RECEIVER 
    ABSTRACT_RECEIVER(CALL_EXPR MEMBER_EXPR BASE) 
    MEMBER_REF)

"A reference to a member in an expression."
^(MEMBER_REF:ABSTRACT_ATOM
    MEMBER_NAME 
    TYPE_ARG_LIST?)

"A reference to a type in an expression."
^(TYPE_REF:ABSTRACT_ATOM
    TYPE_NAME 
    TYPE_ARG_LIST?)

^(BASE:ABSTRACT_RECEIVER 
    ABSTRACT_ATOM(TYPE_REF MEMBER_REF EXPR SEQUENCE_ENUM FLOAT_LITERAL NATURAL_LITERAL 
                  CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL STRING_CONCAT))

"A list of arguments in an invocation expression."
^(ABSTRACT_ARG_LIST)

"A list of named arguments."
^(NAMED_ARG_LIST:ABSTRACT_ARG_LIST 
    NAMED_ARG*)

"A list of positional arguments."
^(POS_ARG_LIST:ABSTRACT_ARG_LIST 
    POS_ARG*)

^(NAMED_ARG
    ABSTRACT_NAMED_ARG_DECL(SPEC_ARG))
^(POS_ARG 
    EXPR)

^(ABSTRACT_NAMED_ARG_DECL)
^(SPEC_ARG:ABSTRACT_NAMED_ARG_DECL 
    PARAM_NAME 
    SPEC_EXPR)

"A specifier expression."
^(SPEC_EXPR 
    EXPR)

"A member reference, type reference, literal, string template, or parenthesized expression."
^(ABSTRACT_ATOM)
^(SEQUENCE_ENUM:ABSTRACT_ATOM 
    EXPR_LIST)
^(FLOAT_LITERAL:ABSTRACT_ATOM)
^(NATURAL_LITERAL:ABSTRACT_ATOM)
^(CHAR_LITERAL:ABSTRACT_ATOM)
^(QUOTED_LITERAL:ABSTRACT_ATOM)
^(STRING_LITERAL:ABSTRACT_ATOM)

"A string template."
^(STRING_CONCAT:ABSTRACT_ATOM 
    STRING_LITERAL* 
    EXPR*)

"A type name."
^(TYPE_NAME UIDENTIFIER)

"A member name."
^(MEMBER_NAME LIDENTIFIER)

"A parameter name."
^(PARAM_NAME LIDENTIFIER)

"A list of annotations of a program element."
^(ANNOTATION_LIST 
    ANNOTATION*)

"A program element annotation."
^(ANNOTATION)

"An initial lowercase identifier."
^(LIDENTIFIER)

"An initial uppercase identifier."
^(UIDENTIFIER)
