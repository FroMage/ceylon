"A file containing Ceylon source."
^(COMPILATION_UNIT 
    IMPORT_LIST?
    DECLARATION*(CLASS_DECLARATION INTERFACE_DECLARATION 
                 ATTRIBUTE_DECLARATION ATTRIBUTE_GETTER 
                 ATTRIBUTE_SETTER METHOD_DECLARATION
                 OBJECT_DECLARATION))

^(IMPORT_LIST 
    IMPORT*)

^(IMPORT
    IMPORT_PATH 
    IMPORT_MEMBER_OR_TYPE*(IMPORT_MEMBER IMPORT_TYPE)
    IMPORT_WILDCARD?)

^(IMPORT_PATH 
    IDENTIFIER*)

^(IMPORT_MEMBER_OR_TYPE 
    IMPLICIT?
    ALIAS?
    IDENTIFIER)
^(IMPORT_MEMBER:IMPORT_MEMBER_OR_TYPE)
^(IMPORT_TYPE:IMPORT_MEMBER_OR_TYPE)

^(ALIAS 
    IDENTIFIER)
^(IMPLICIT)
^(IMPORT_WILDCARD)

"A declaration."
^(DECLARATION:STATEMENT
    IDENTIFIER)

"A class, interface, or type parameter declaration."
^(TYPE_DECLARATION:DECLARATION
    CASE_TYPES?
    SATISFIED_TYPES?)

"A class or interface declaration."
^(CLASS_OR_INTERFACE_DECLARATION:TYPE_DECLARATION
    TYPE_PARAMETER_LIST?
    TYPE_CONSTRAINT_LIST?
    TYPE_SPECIFIER?)

^(SATISFIED_TYPES 
    TYPE*)
^(ABSTRACTED_TYPE 
    TYPE)
^(CASE_TYPES 
    TYPE* 
    MEMBER*)
^(EXTENDED_TYPE 
    TYPE 
    POSITIONAL_ARGUMENT_LIST)

"A list of constraints organized by parameter."
^(TYPE_CONSTRAINT_LIST 
    TYPE_CONSTRAINT*)

"A set of type constraints on a certain type parameter."
^(TYPE_CONSTRAINT:TYPE_DECLARATION
    PARAMETER_LIST? 
    ABSTRACTED_TYPE?)

^(TYPE_SPECIFIER 
    TYPE)

^(CLASS_DECLARATION:CLASS_OR_INTERFACE_DECLARATION 
    EXTENDED_TYPE?
    PARAMETER_LIST
    CLASS_BODY?)

^(INTERFACE_DECLARATION:CLASS_OR_INTERFACE_DECLARATION 
    INTERFACE_BODY?)

^(TYPED_DECLARATION:DECLARATION
    TYPE_OR_SUBTYPE?(TYPE SUBTYPE LOCAL_MODIFIER VOID_MODIFIER SEQUENCED_TYPE))

"A method or attribute declaration."
^(METHOD_OR_ATTRIBUTE_DECLARATION:TYPED_DECLARATION)

^(ANY_ATTRIBUTE_DECLARATION:METHOD_OR_ATTRIBUTE_DECLARATION)

"A simple or formal attribute declaration."
^(ATTRIBUTE_DECLARATION:ANY_ATTRIBUTE_DECLARATION 
    SPECIFIER_OR_INITIALIZER_EXPRESSION?(SPECIFIER_EXPRESSION INITIALIZER_EXPRESSION))

"An attribute getter declaration."
^(ATTRIBUTE_GETTER:ANY_ATTRIBUTE_DECLARATION
    BLOCK)

"An attribute setter declaration."
^(ATTRIBUTE_SETTER:METHOD_OR_ATTRIBUTE_DECLARATION 
    BLOCK)

"A method declaration."
^(METHOD_DECLARATION:METHOD_OR_ATTRIBUTE_DECLARATION
    TYPE_PARAMETER_LIST?
    PARAMETER_LIST*
    TYPE_CONSTRAINT_LIST?
    BLOCK?
    SPECIFIER_EXPRESSION?)

^(VOID_MODIFIER:TYPE_OR_SUBTYPE)

^(OBJECT_DECLARATION:METHOD_OR_ATTRIBUTE_DECLARATION
    EXTENDED_TYPE?
    SATISFIED_TYPES?
    CLASS_BODY)

^(PARAMETER_LIST 
    PARAMETER*)
^(PARAMETER:TYPED_DECLARATION
    PARAMETER_LIST*
    SPECIFIER_EXPRESSION?)

^(TYPE_PARAMETER_LIST 
    TYPE_PARAMETER*
    SEQUENCED_TYPE_PARAMETER?)
^(TYPE_PARAMETER:DECLARATION
    TYPE_VARIANCE?)
^(TYPE_VARIANCE)
^(SEQUENCED_TYPE_PARAMETER
    IDENTIFIER)

"A method or attribute body containing statements and declarations."
^(BLOCK 
    STATEMENT*(CLASS_DECLARATION INTERFACE_DECLARATION 
               ATTRIBUTE_DECLARATION ATTRIBUTE_GETTER 
               ATTRIBUTE_SETTER METHOD_DECLARATION
               OBJECT_DECLARATION
               SPECIFIER_STATEMENT EXPRESSION_STATEMENT 
               IF_STATEMENT SWITCH_STATEMENT 
               TRY_CATCH_STATEMENT FOR_STATEMENT 
               WHILE_STATEMENT DO_WHILE_STATEMENT) 
    DIRECTIVE?(RETURN THROW CONTINUE BREAK RETRY))

"A class body."
^(CLASS_BODY 
    STATEMENT*(CLASS_DECLARATION INTERFACE_DECLARATION 
               ATTRIBUTE_DECLARATION ATTRIBUTE_GETTER 
               ATTRIBUTE_SETTER METHOD_DECLARATION
               OBJECT_DECLARATION 
               SPECIFIER_STATEMENT EXPRESSION_STATEMENT 
               IF_STATEMENT SWITCH_STATEMENT 
               TRY_CATCH_STATEMENT FOR_STATEMENT 
               WHILE_STATEMENT DO_WHILE_STATEMENT))

"An interface body."
^(INTERFACE_BODY 
    DECLARATION*(CLASS_DECLARATION INTERFACE_DECLARATION 
                 ATTRIBUTE_DECLARATION ATTRIBUTE_GETTER 
                 ATTRIBUTE_SETTER METHOD_DECLARATION
                 OBJECT_DECLARATION))

^(TYPE_OR_SUBTYPE:MEMBER_OR_TYPE)

"A produced type."
^(TYPE:TYPE_OR_SUBTYPE
    IDENTIFIER 
    TYPE_ARGUMENT_LIST?)

"The runtime type of the current instance."
^(SUBTYPE:TYPE_OR_SUBTYPE)

"Specifies that the type of a declaration should be inferred."
^(LOCAL_MODIFIER:TYPE_OR_SUBTYPE)

"A list of type arguments in a produced type."
^(TYPE_ARGUMENT_LIST 
    TYPE_OR_SUBTYPE*(TYPE SUBTYPE SEQUENCED_TYPE))

^(SEQUENCED_TYPE:TYPE_OR_SUBTYPE
    TYPE)

"A control directive."
^(DIRECTIVE)
^(RETURN:DIRECTIVE EXPRESSION?)
^(THROW:DIRECTIVE EXPRESSION?)
^(CONTINUE:DIRECTIVE)
^(BREAK:DIRECTIVE)
^(RETRY:DIRECTIVE)

"A statement or declaration."
^(STATEMENT
    ANNOTATION_LIST?)

"An expression statement, specification statement, or control structure."
^(EXECUTABLE_STATEMENT:STATEMENT)

^(SPECIFIER_STATEMENT:EXECUTABLE_STATEMENT 
    MEMBER
    SPECIFIER_EXPRESSION)

^(EXPRESSION_STATEMENT:EXECUTABLE_STATEMENT 
    EXPRESSION)

^(CONTROL_CLAUSE)

^(IF_STATEMENT:EXECUTABLE_STATEMENT
    IF_CLAUSE
    ELSE_CLAUSE?)
^(IF_CLAUSE:CONTROL_CLAUSE
    CONDITION(BOOLEAN_CONDITION EXISTS_CONDITION NONEMPTY_CONDITION 
              IS_CONDITION SATISFIES_CONDITION) 
    BLOCK)
^(ELSE_CLAUSE:CONTROL_CLAUSE
    BLOCK)

^(SWITCH_STATEMENT:EXECUTABLE_STATEMENT
    SWITCH_CLAUSE
    SWITCH_CASE_LIST)
^(SWITCH_CLAUSE
    EXPRESSION)
^(SWITCH_CASE_LIST 
    CASE_CLAUSE* 
    ELSE_CLAUSE?)
^(CASE_CLAUSE:CONTROL_CLAUSE
    CASE_ITEM(MATCH_CASE IS_CASE SATISFIES_CASE)
    BLOCK)
    
^(CASE_ITEM)
^(MATCH_CASE:CASE_ITEM
    EXPRESSION_LIST)
^(IS_CASE:CASE_ITEM
    TYPE)
^(SATISFIES_CASE:CASE_ITEM
    TYPE)

^(TRY_CATCH_STATEMENT:EXECUTABLE_STATEMENT
    TRY_CLAUSE
    CATCH_CLAUSE* 
    FINALLY_CLAUSE?)
^(TRY_CLAUSE:CONTROL_CLAUSE
    TRY_RESOURCE? 
    BLOCK)
^(CATCH_CLAUSE:CONTROL_CLAUSE
    VARIABLE 
    BLOCK)
^(FINALLY_CLAUSE:CONTROL_CLAUSE
    BLOCK)
^(TRY_RESOURCE:CONTROL_CLAUSE
    VARIABLE_OR_EXPRESSION)

^(FOR_STATEMENT:EXECUTABLE_STATEMENT
    FOR_CLAUSE
    FAIL_CLAUSE?)
^(FOR_CLAUSE:CONTROL_CLAUSE
    FOR_ITERATOR(VALUE_ITERATOR KEY_VALUE_ITERATOR) 
    BLOCK)
^(FAIL_CLAUSE:CONTROL_CLAUSE
    BLOCK)
^(FOR_ITERATOR 
    SPECIFIER_EXPRESSION)
^(VALUE_ITERATOR:FOR_ITERATOR
    VARIABLE)
^(KEY_VALUE_ITERATOR:FOR_ITERATOR
    VARIABLE keyVariable
    VARIABLE valueVariable)

^(WHILE_STATEMENT:EXECUTABLE_STATEMENT
    WHILE_CLAUSE)
^(DO_WHILE_STATEMENT:EXECUTABLE_STATEMENT
    DO_CLAUSE)
^(WHILE_CLAUSE:CONTROL_CLAUSE
    CONDITION(BOOLEAN_CONDITION EXISTS_CONDITION NONEMPTY_CONDITION 
              IS_CONDITION SATISFIES_CONDITION) 
    BLOCK)
^(DO_CLAUSE:CONTROL_CLAUSE
    BLOCK
    CONDITION(BOOLEAN_CONDITION EXISTS_CONDITION NONEMPTY_CONDITION 
              IS_CONDITION SATISFIES_CONDITION))

^(CONDITION)
^(BOOLEAN_CONDITION:CONDITION
    EXPRESSION)
^(EXISTS_CONDITION:CONDITION
    VARIABLE_OR_EXPRESSION)
^(NONEMPTY_CONDITION:CONDITION
    VARIABLE_OR_EXPRESSION)
^(IS_CONDITION:CONDITION
    TYPE
    VARIABLE_OR_EXPRESSION)
^(SATISFIES_CONDITION:CONDITION
    TYPE*)

^(VARIABLE_OR_EXPRESSION 
    VARIABLE?
    SPECIFIER_EXPRESSION?
    EXPRESSION?)
^(VARIABLE:TYPED_DECLARATION
    IDENTIFIER 
    PARAMETER_LIST*)

^(TERM)
^(OPERATOR_EXPRESSION:TERM)

^(BINARY_OPERATOR_EXPRESSION:OPERATOR_EXPRESSION
    TERM leftTerm (EXPRESSION INVOCATION_EXPRESSION 
          MEMBER_OP SAFE_MEMBER_OP SPREAD_OP 
          POSTFIX_INCREMENT_OP POSTFIX_DECREMENT_OP 
          SAFE_INDEX_OP INDEX_OP
          SEQUENCE_ENUMERATION STRING_TEMPLATE
          TYPE MEMBER FLOAT_LITERAL NATURAL_LITERAL 
          CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL
          THIS SUPER OUTER SUBTYPE
          FORMAT_OP NOT_OP COMPLEMENT_OP ASSIGN_OP EQUAL_OP IDENTICAL_OP 
          AND_OP OR_OP INCREMENT_OP DECREMENT_OP SUM_OP DIFFERENCE_OP PRODUCT_OP 
          QUOTIENT_OP INTERSECTION_OP UNION_OP XOR_OP REMAINDER_OP NOT_EQUAL_OP 
          LARGER_OP SMALLER_OP LARGE_AS_OP SMALL_AS_OP ENTRY_OP COMPARE_OP IN_OP 
          IS_OP POWER_OP APPLY_OP ADD_ASSIGN_OP SUBTRACT_ASSIGN_OP MULTIPLY_ASSIGN_OP 
          DIVIDE_ASSIGN_OP INTERSECT_ASSIGN_OP UNION_ASSIGN_OP XOR_ASSIGN_OP 
          COMPLEMENT_ASSIGN_OP REMAINDER_ASSIGN_OP DEFAULT_ASSIGN_OP AND_ASSIGN_OP 
          OR_ASSIGN_OP DEFAULT_OP EXISTS NONEMPTY RANGE_OP NEGATIVE_OP FLIP_OP)
    TERM rightTerm (EXPRESSION INVOCATION_EXPRESSION 
          MEMBER_OP SAFE_MEMBER_OP SPREAD_OP 
          POSTFIX_INCREMENT_OP POSTFIX_DECREMENT_OP 
          SAFE_INDEX_OP INDEX_OP
          SEQUENCE_ENUMERATION STRING_TEMPLATE
          TYPE MEMBER FLOAT_LITERAL NATURAL_LITERAL 
          CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL
          THIS SUPER OUTER SUBTYPE
          FORMAT_OP NOT_OP COMPLEMENT_OP ASSIGN_OP EQUAL_OP IDENTICAL_OP 
          AND_OP OR_OP INCREMENT_OP DECREMENT_OP SUM_OP DIFFERENCE_OP PRODUCT_OP 
          QUOTIENT_OP INTERSECTION_OP UNION_OP XOR_OP REMAINDER_OP NOT_EQUAL_OP 
          LARGER_OP SMALLER_OP LARGE_AS_OP SMALL_AS_OP ENTRY_OP COMPARE_OP IN_OP 
          IS_OP POWER_OP APPLY_OP ADD_ASSIGN_OP SUBTRACT_ASSIGN_OP MULTIPLY_ASSIGN_OP 
          DIVIDE_ASSIGN_OP INTERSECT_ASSIGN_OP UNION_ASSIGN_OP XOR_ASSIGN_OP 
          COMPLEMENT_ASSIGN_OP REMAINDER_ASSIGN_OP DEFAULT_ASSIGN_OP AND_ASSIGN_OP 
          OR_ASSIGN_OP DEFAULT_OP EXISTS NONEMPTY RANGE_OP NEGATIVE_OP FLIP_OP))

^(DEFAULT_OP: BINARY_OPERATOR_EXPRESSION)
^(ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(EQUAL_OP: BINARY_OPERATOR_EXPRESSION)
^(IDENTICAL_OP: BINARY_OPERATOR_EXPRESSION)
^(AND_OP: BINARY_OPERATOR_EXPRESSION)
^(OR_OP: BINARY_OPERATOR_EXPRESSION)
^(SUM_OP: BINARY_OPERATOR_EXPRESSION)
^(DIFFERENCE_OP: BINARY_OPERATOR_EXPRESSION)
^(PRODUCT_OP: BINARY_OPERATOR_EXPRESSION)
^(QUOTIENT_OP: BINARY_OPERATOR_EXPRESSION)
^(INTERSECTION_OP: BINARY_OPERATOR_EXPRESSION)
^(UNION_OP: BINARY_OPERATOR_EXPRESSION)
^(XOR_OP: BINARY_OPERATOR_EXPRESSION)
^(REMAINDER_OP: BINARY_OPERATOR_EXPRESSION)
^(NOT_EQUAL_OP: BINARY_OPERATOR_EXPRESSION)
^(LARGER_OP: BINARY_OPERATOR_EXPRESSION)
^(SMALLER_OP: BINARY_OPERATOR_EXPRESSION)
^(LARGE_AS_OP: BINARY_OPERATOR_EXPRESSION)
^(SMALL_AS_OP: BINARY_OPERATOR_EXPRESSION)
^(ENTRY_OP: BINARY_OPERATOR_EXPRESSION)
^(RANGE_OP: BINARY_OPERATOR_EXPRESSION)
^(COMPARE_OP: BINARY_OPERATOR_EXPRESSION)
^(IN_OP: BINARY_OPERATOR_EXPRESSION)
^(IS_OP: BINARY_OPERATOR_EXPRESSION)
^(POWER_OP: BINARY_OPERATOR_EXPRESSION)
^(APPLY_OP: BINARY_OPERATOR_EXPRESSION)
^(ADD_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(SUBTRACT_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(MULTIPLY_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(DIVIDE_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(INTERSECT_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(UNION_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(XOR_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(COMPLEMENT_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(REMAINDER_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(DEFAULT_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(AND_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(OR_ASSIGN_OP: BINARY_OPERATOR_EXPRESSION)
^(COMPLEMENT_OP: BINARY_OPERATOR_EXPRESSION)

^(UNARY_OPERATOR_EXPRESSION:OPERATOR_EXPRESSION
    TERM (EXPRESSION INVOCATION_EXPRESSION 
          MEMBER_OP SAFE_MEMBER_OP SPREAD_OP 
          POSTFIX_INCREMENT_OP POSTFIX_DECREMENT_OP 
          SAFE_INDEX_OP INDEX_OP
          SEQUENCE_ENUMERATION STRING_TEMPLATE
          TYPE MEMBER FLOAT_LITERAL NATURAL_LITERAL 
          CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL
          THIS SUPER OUTER SUBTYPE
          FORMAT_OP NOT_OP COMPLEMENT_OP ASSIGN_OP EQUAL_OP IDENTICAL_OP 
          AND_OP OR_OP INCREMENT_OP DECREMENT_OP SUM_OP DIFFERENCE_OP PRODUCT_OP 
          QUOTIENT_OP INTERSECTION_OP UNION_OP XOR_OP REMAINDER_OP NOT_EQUAL_OP 
          LARGER_OP SMALLER_OP LARGE_AS_OP SMALL_AS_OP ENTRY_OP COMPARE_OP IN_OP 
          IS_OP POWER_OP APPLY_OP ADD_ASSIGN_OP SUBTRACT_ASSIGN_OP MULTIPLY_ASSIGN_OP 
          DIVIDE_ASSIGN_OP INTERSECT_ASSIGN_OP UNION_ASSIGN_OP XOR_ASSIGN_OP 
          COMPLEMENT_ASSIGN_OP REMAINDER_ASSIGN_OP DEFAULT_ASSIGN_OP AND_ASSIGN_OP 
          OR_ASSIGN_OP DEFAULT_OP EXISTS NONEMPTY RANGE_OP NEGATIVE_OP FLIP_OP))

^(FORMAT_OP: UNARY_OPERATOR_EXPRESSION)
^(NOT_OP: UNARY_OPERATOR_EXPRESSION)
^(INCREMENT_OP: UNARY_OPERATOR_EXPRESSION)
^(DECREMENT_OP: UNARY_OPERATOR_EXPRESSION)
^(EXISTS: UNARY_OPERATOR_EXPRESSION)
^(NONEMPTY: UNARY_OPERATOR_EXPRESSION)
^(FLIP_OP: UNARY_OPERATOR_EXPRESSION)
^(NEGATIVE_OP: UNARY_OPERATOR_EXPRESSION)

"A parenthesized list of expressions."
^(EXPRESSION_LIST 
    EXPRESSION*)

"An expression."
^(EXPRESSION:ATOM 
    TERM(EXPRESSION INVOCATION_EXPRESSION 
         MEMBER_OP SAFE_MEMBER_OP SPREAD_OP 
         POSTFIX_INCREMENT_OP POSTFIX_DECREMENT_OP 
         SAFE_INDEX_OP INDEX_OP
         SEQUENCE_ENUMERATION STRING_TEMPLATE
         TYPE MEMBER FLOAT_LITERAL NATURAL_LITERAL 
         CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL
         THIS SUPER OUTER SUBTYPE
         FORMAT_OP NOT_OP COMPLEMENT_OP ASSIGN_OP EQUAL_OP IDENTICAL_OP 
         AND_OP OR_OP INCREMENT_OP DECREMENT_OP SUM_OP DIFFERENCE_OP PRODUCT_OP 
         QUOTIENT_OP INTERSECTION_OP UNION_OP XOR_OP REMAINDER_OP NOT_EQUAL_OP 
         LARGER_OP SMALLER_OP LARGE_AS_OP SMALL_AS_OP ENTRY_OP COMPARE_OP IN_OP 
         IS_OP POWER_OP APPLY_OP ADD_ASSIGN_OP SUBTRACT_ASSIGN_OP MULTIPLY_ASSIGN_OP 
         DIVIDE_ASSIGN_OP INTERSECT_ASSIGN_OP UNION_ASSIGN_OP XOR_ASSIGN_OP 
         COMPLEMENT_ASSIGN_OP REMAINDER_ASSIGN_OP DEFAULT_ASSIGN_OP AND_ASSIGN_OP 
         OR_ASSIGN_OP DEFAULT_OP EXISTS NONEMPTY RANGE_OP NEGATIVE_OP FLIP_OP))

"The receiver of a member reference or invocation expression."
^(PRIMARY:TERM)
^(POSTFIX_EXPRESSION:PRIMARY
    PRIMARY(EXPRESSION INVOCATION_EXPRESSION 
            MEMBER_OP SAFE_MEMBER_OP SPREAD_OP 
            POSTFIX_INCREMENT_OP POSTFIX_DECREMENT_OP 
            SAFE_INDEX_OP INDEX_OP
            SEQUENCE_ENUMERATION STRING_TEMPLATE
            TYPE MEMBER FLOAT_LITERAL NATURAL_LITERAL 
            CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL
            THIS SUPER OUTER SUBTYPE))

"A postfix increment or decrement expression."
^(POSTFIX_OPERATOR_EXPRESSION:POSTFIX_EXPRESSION)
^(POSTFIX_INCREMENT_OP:POSTFIX_OPERATOR_EXPRESSION)
^(POSTFIX_DECREMENT_OP:POSTFIX_OPERATOR_EXPRESSION)

"An invocation expression. Note that in the special case of 
inline callable arguments, there may be more than one
argument list."
^(INVOCATION_EXPRESSION:POSTFIX_EXPRESSION
    NAMED_ARGUMENT_LIST? POSITIONAL_ARGUMENT_LIST?)

"A qualified member reference expression."
^(MEMBER_EXPRESSION:PRIMARY
    PRIMARY(EXPRESSION INVOCATION_EXPRESSION 
            MEMBER_OP SAFE_MEMBER_OP SPREAD_OP 
            POSTFIX_INCREMENT_OP POSTFIX_DECREMENT_OP 
            SAFE_INDEX_OP INDEX_OP
            SEQUENCE_ENUMERATION STRING_TEMPLATE
            TYPE MEMBER FLOAT_LITERAL NATURAL_LITERAL 
            CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL
            THIS SUPER OUTER SUBTYPE)
    MEMBER_OR_TYPE(MEMBER TYPE SUBTYPE OUTER))
^(MEMBER_OP:MEMBER_EXPRESSION)
^(SAFE_MEMBER_OP:MEMBER_EXPRESSION)
^(SPREAD_OP:MEMBER_EXPRESSION)

"An index (element access by key) expression."
^(INDEX_EXPRESSION:POSTFIX_EXPRESSION
    LOWER_BOUND
    UPPER_BOUND?)
^(INDEX_OP:INDEX_EXPRESSION)
^(SAFE_INDEX_OP:INDEX_EXPRESSION)

^(LOWER_BOUND
    EXPRESSION)
^(UPPER_BOUND
    EXPRESSION)

^(MEMBER_OR_TYPE:ATOM)

"A reference to a member in an expression."
^(MEMBER:MEMBER_OR_TYPE
    IDENTIFIER 
    TYPE_ARGUMENT_LIST?)

^(OUTER:MEMBER_OR_TYPE)

"A list of arguments in an invocation expression."
^(ARGUMENT_LIST)

"A list of named arguments."
^(NAMED_ARGUMENT_LIST:ARGUMENT_LIST 
    NAMED_ARGUMENT*(SPECIFIED_ARGUMENT METHOD_ARGUMENT
                   ATTRIBUTE_ARGUMENT OBJECT_ARGUMENT)
    SEQUENCED_ARGUMENT*)

^(SEQUENCED_ARGUMENT 
    EXPRESSION_LIST)

"A list of positional arguments."
^(POSITIONAL_ARGUMENT_LIST:ARGUMENT_LIST 
    POSITIONAL_ARGUMENT*)

^(POSITIONAL_ARGUMENT 
    EXPRESSION)

^(NAMED_ARGUMENT
    IDENTIFIER)
^(SPECIFIED_ARGUMENT:NAMED_ARGUMENT
    SPECIFIER_EXPRESSION)
^(METHOD_ARGUMENT:NAMED_ARGUMENT
    TYPE_OR_SUBTYPE(TYPE VOID_MODIFIER)
    PARAMETER_LIST*
    BLOCK)
^(ATTRIBUTE_ARGUMENT:NAMED_ARGUMENT
    TYPE?
    BLOCK)
^(OBJECT_ARGUMENT:NAMED_ARGUMENT
    EXTENDED_TYPE
    SATISFIED_TYPES
    CLASS_BODY)

^(SPECIFIER_OR_INITIALIZER_EXPRESSION EXPRESSION)

"A specifier expression."
^(SPECIFIER_EXPRESSION:SPECIFIER_OR_INITIALIZER_EXPRESSION)

"An initializer expression."
^(INITIALIZER_EXPRESSION:SPECIFIER_OR_INITIALIZER_EXPRESSION)

"A member reference, type reference, literal, string template, or parenthesized expression."
^(ATOM:PRIMARY)

"A literal."
^(LITERAL:ATOM)
^(NATURAL_LITERAL:LITERAL)
^(FLOAT_LITERAL:LITERAL)
^(CHAR_LITERAL:LITERAL)
^(STRING_LITERAL:LITERAL)
^(QUOTED_LITERAL:LITERAL)

"A reference to the current instance."
^(SELF_EXPRESSION:ATOM)
^(THIS:SELF_EXPRESSION)
^(SUPER:SELF_EXPRESSION)

"Enumerated elements of a sequence."
^(SEQUENCE_ENUMERATION:ATOM 
    EXPRESSION_LIST)

"A string template."
^(STRING_TEMPLATE:ATOM 
    STRING_LITERAL* 
    EXPRESSION*)

"A program element annotation."
^(ANNOTATION:INVOCATION_EXPRESSION)

"A list of annotations of a program element."
^(ANNOTATION_LIST 
    ANNOTATION*)

"A name."
^(IDENTIFIER)
