"A file containing Ceylon source."
^(COMPILATION_UNIT 
    IMPORT_LIST?
    DECLARATION*(TYPE_DECLARATION MEMBER_DECLARATION))

^(IMPORT_LIST 
    IMPORT_DECLARATION*)

^(IMPORT_DECLARATION 
    IMPORT_PATH 
    IMPORT_ELEM* 
    IMPORT_WILDCARD?)

^(IMPORT_PATH 
    LIDENTIFIER*)

^(IMPORT_ELEM 
    IMPLICIT? 
    IMPORT_ALIAS 
    TYPE_NAME)

^(IMPORT_ALIAS 
    TYPE_NAME)

^(IMPLICIT)

^(IMPORT_WILDCARD)

"A declaration."
^(DECLARATION:ABSTRACT_STATEMENT)

"An annotated class or interface declaration."
^(TYPE_DECLARATION:DECLARATION 
    ABSTRACT_TYPE_DECLARATION(CLASS_DECLARATION INTERFACE_DECLARATION) 
    ANNOTATION_LIST?)
    
"An annotated method or attribute declaration."
^(MEMBER_DECLARATION:DECLARATION 
    ABSTRACT_MEMBER_DECLARATION(ATTRIBUTE_DECLARATION ATTRIBUTE_GETTER ATTRIBUTE_SETTER METHOD_DECLARATION) 
    ANNOTATION_LIST?)
    
"A class or interface declaration."
^(ABSTRACT_TYPE_DECLARATION 
    TYPE_NAME 
    TYPE_PARAMETER_LIST?
    SATISFIES_LIST?
    ABSTRACTS_LIST?
    CASE_LIST?
    TYPE_CONSTRAINT_LIST?)

^(SATISFIES_LIST TYPE*)
^(ABSTRACTS_LIST TYPE*)
^(CASE_LIST TYPE*)
^(EXTENDS_EXPRESSION TYPE POSITIONAL_ARGUMENT_LIST)

^(TYPE_CONSTRAINT_LIST TYPE_CONSTRAINT*)
^(TYPE_CONSTRAINT)

^(CLASS_DECLARATION:ABSTRACT_TYPE_DECLARATION 
    EXTENDS_EXPRESSION?
    PARAMETER_LIST
    CLASS_BODY)

^(INTERFACE_DECLARATION:ABSTRACT_TYPE_DECLARATION 
    INTERFACE_BODY)

"A method or attribute declaration."
^(ABSTRACT_MEMBER_DECLARATION 
    MEMBER_NAME)

"A simple or formal attribute declaration."
^(ATTRIBUTE_DECLARATION:ABSTRACT_MEMBER_DECLARATION 
    TYPE?)

"An attribute getter declaration."
^(ATTRIBUTE_GETTER:ABSTRACT_MEMBER_DECLARATION 
    TYPE? 
    BLOCK)

"An attribute setter declaration."
^(ATTRIBUTE_SETTER:ABSTRACT_MEMBER_DECLARATION 
    BLOCK)

"A method declaration."
^(METHOD_DECLARATION:ABSTRACT_MEMBER_DECLARATION 
    TYPE?
    TYPE_PARAMETER_LIST?
    PARAMETER_LIST*
    BLOCK)

^(PARAMETER_LIST 
    PARAMETER*)
^(PARAMETER 
    TYPE 
    PARAMETER_NAME 
    SPECIFIER_EXPRESSION?)

^(TYPE_PARAMETER_LIST TYPE_PARAMETER*)
^(TYPE_PARAMETER
    TYPE_VARIANCE?
    TYPE_NAME)
^(TYPE_VARIANCE)

"A method or attribute body containing statements and declarations."
^(BLOCK 
    ABSTRACT_STATEMENT*(TYPE_DECLARATION MEMBER_DECLARATION STATEMENT) 
    DIRECTIVE?)

"A class body."
^(CLASS_BODY 
    ABSTRACT_STATEMENT*(TYPE_DECLARATION MEMBER_DECLARATION STATEMENT))

"An interface body."
^(INTERFACE_BODY 
    DECLARATION*(TYPE_DECLARATION MEMBER_DECLARATION))

"A produced type."
^(TYPE 
    TYPE_NAME 
    TYPE_ARGUMENT_LIST?)

"A list of type arguments in a produced type."
^(TYPE_ARGUMENT_LIST 
    TYPE*)

"A control directive."
^(DIRECTIVE 
    ABSTRACT_DIRECTIVE*(RETURN THROW CONTINUE BREAK RETRY))

^(ABSTRACT_DIRECTIVE)
^(RETURN:ABSTRACT_DIRECTIVE EXPRESSION?)
^(THROW:ABSTRACT_DIRECTIVE EXPRESSION?)
^(CONTINUE:ABSTRACT_DIRECTIVE)
^(BREAK:ABSTRACT_DIRECTIVE)
^(RETRY:ABSTRACT_DIRECTIVE)

"A statement or declaration."
^(ABSTRACT_STATEMENT)

"A statement."
^(STATEMENT:ABSTRACT_STATEMENT 
    ABSTRACT_EXECUTABLE_STATEMENT(SPECIFIER_STATEMENT EXPRESSION_STATEMENT IF SWITCH TRY FOR WHILE))

"An expression statement, specification statement, or control structure."
^(ABSTRACT_EXECUTABLE_STATEMENT)
^(SPECIFIER_STATEMENT:ABSTRACT_EXECUTABLE_STATEMENT SPECIFIER_EXPRESSION)
^(EXPRESSION_STATEMENT:ABSTRACT_EXECUTABLE_STATEMENT EXPRESSION)
^(IF:ABSTRACT_EXECUTABLE_STATEMENT)
^(SWITCH:ABSTRACT_EXECUTABLE_STATEMENT)
^(TRY:ABSTRACT_EXECUTABLE_STATEMENT)
^(FOR:ABSTRACT_EXECUTABLE_STATEMENT)
^(WHILE:ABSTRACT_EXECUTABLE_STATEMENT)

"A parenthesized list of expressions."
^(EXPRESSION_LIST 
    EXPRESSION*)

"An expression."
^(EXPRESSION:ABSTRACT_ATOM 
    PRIMARY?)

^(PRIMARY 
    ABSTRACT_RECEIVER(CALL_EXPRESSION MEMBER_EXPRESSION BASE))

"The receiver of a member reference or invocation expression."
^(ABSTRACT_RECEIVER)

"An invocation expression."
^(CALL_EXPRESSION:ABSTRACT_RECEIVER
    ABSTRACT_RECEIVER(CALL_EXPRESSION MEMBER_EXPRESSION BASE)
    ABSTRACT_ARGUMENT_LIST(NAMED_ARGUMENT_LIST POSITIONAL_ARGUMENT_LIST))

"A qualified member reference expression."
^(MEMBER_EXPRESSION:ABSTRACT_RECEIVER 
    ABSTRACT_RECEIVER(CALL_EXPRESSION MEMBER_EXPRESSION BASE) 
    MEMBER_REFERENCE)

"A reference to a member in an expression."
^(MEMBER_REFERENCE:ABSTRACT_ATOM
    MEMBER_NAME 
    TYPE_ARGUMENT_LIST?)

"A reference to a type in an expression."
^(TYPE_REFERENCE:ABSTRACT_ATOM
    TYPE_NAME 
    TYPE_ARGUMENT_LIST?)

^(BASE:ABSTRACT_RECEIVER 
    ABSTRACT_ATOM(TYPE_REFERENCE MEMBER_REFERENCE EXPRESSION SEQUENCE_ENUMERATION STRING_CONCAT
                  FLOAT_LITERAL NATURAL_LITERAL CHAR_LITERAL QUOTED_LITERAL STRING_LITERAL))

"A list of arguments in an invocation expression."
^(ABSTRACT_ARGUMENT_LIST)

"A list of named arguments."
^(NAMED_ARGUMENT_LIST:ABSTRACT_ARGUMENT_LIST 
    NAMED_ARGUMENT*)

"A list of positional arguments."
^(POSITIONAL_ARGUMENT_LIST:ABSTRACT_ARGUMENT_LIST 
    POSITIONAL_ARGUMENT*)

^(NAMED_ARGUMENT
    ABSTRACT_NAMED_ARGUMENT_DECLARATION(SPECIFIED_ARGUMENT))
^(POSITIONAL_ARGUMENT 
    EXPRESSION)

^(ABSTRACT_NAMED_ARGUMENT_DECLARATION)
^(SPECIFIED_ARGUMENT:ABSTRACT_NAMED_ARGUMENT_DECLARATION 
    PARAMETER_NAME 
    SPECIFIER_EXPRESSION)

"A specifier expression."
^(SPECIFIER_EXPRESSION 
    EXPRESSION)

"A member reference, type reference, literal, string template, or parenthesized expression."
^(ABSTRACT_ATOM)
^(SEQUENCE_ENUMERATION:ABSTRACT_ATOM 
    EXPRESSION_LIST)
^(FLOAT_LITERAL:ABSTRACT_ATOM)
^(NATURAL_LITERAL:ABSTRACT_ATOM)
^(CHAR_LITERAL:ABSTRACT_ATOM)
^(QUOTED_LITERAL:ABSTRACT_ATOM)
^(STRING_LITERAL:ABSTRACT_ATOM)

"A string template."
^(STRING_CONCAT:ABSTRACT_ATOM 
    STRING_LITERAL* 
    EXPRESSION*)

"A type name."
^(TYPE_NAME UIDENTIFIER)

"A member name."
^(MEMBER_NAME LIDENTIFIER)

"A parameter name."
^(PARAMETER_NAME LIDENTIFIER)

"A list of annotations of a program element."
^(ANNOTATION_LIST 
    ANNOTATION*)

"A program element annotation."
^(ANNOTATION)

"An initial lowercase identifier."
^(LIDENTIFIER)

"An initial uppercase identifier."
^(UIDENTIFIER)
