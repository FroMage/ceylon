import org.apache.tools.ant.filters.ReplaceTokens

ext {
    ceylonModuleName = 'runtime'
    ceylonNamespace = 'ceylon'
    ceylonSourceLayout = false
    ceylonTestDisabled = true
}

apply from : "${rootProject.projectDir}/gradle/java-for-modules.gradle"


ext {
    externalDepsDestinationDir = "${buildDir}/ceylon-externals"
}

dependencies {
    compile project(':common')
    compile project(':cli')
    compile project(':model')
    compile project(':cmr')
    compile project(':tool-provider')
    compile project( path : ':language', configuration : 'antOutput')
}

sourceSets {
    main {
        java {
            srcDirs = [
                'api/src/main/java',
                'impl/src/main/java',
                'spi/src/main/java',
                'bootstrap/src/main/java'
            ]
            include '**/*.java'
        }
        resources {
            srcDirs = [ 'bootstrap/src/main/java' ]
            exclude '**/*.java'
        }
    }
}

task pluginFiles( type : Copy ) {
    group 'Application'
    description 'Creates version specific plugins files'

    from 'bin'
    into "${buildDir}/bin"
    filter ReplaceTokens, tokens : [ 'ceylon-version' : version ]
}

task addModuleDescriptorsForExternalDependencies {
    group "Build"
    description "Lifecycle task for handling external dependencies"
}

task fakeClasseDirForExternalDependencies  {
    ext {
        outputDir = file("${externalDepsDestinationDir}/classes")
    }
    outputs.dir outputDir
    doFirst {
        mkdir outputDir
    }
}

task sha1Externals( type : Checksum ) {
    group "Build"
    description "Create SHA1 checksum for external dependencies"
}

// Add tasks for each of the external JARs
(fileTree('dist/repo') {
    include '**/*.jar'
    exclude "**/ceylon/**" // <-- we do this as we have moved ceylon modules to their own subprojects.
}).files.each { jarFile ->
    String taskNamePostfix = jarFile.name[0..-5]
    String relativePath = CeylonBuildUtil.relativeTo(jarFile.parentFile.absoluteFile,file('dist/repo'))

    Task moduleTask = tasks.create( "addModuleXml_${taskNamePostfix}", CeylonBuildModuleXml) {
        group "Build"
        description "Prepare module.xml for ${taskNamePostfix}"
        sourceModule new File(jarFile.parentFile,'module.xml')
        destinationDir "${externalDepsDestinationDir}/${relativePath}"
    }

    Task osgiJar = tasks.create( "addOsgiManifest_${taskNamePostfix}", Jar ) {
        group "Build"
        description "Add OSGI data to manifest for ${taskNamePostfix}"
        archiveName jarFile.name
        destinationDir  file("${externalDepsDestinationDir}/${relativePath}")
        dependsOn moduleTask
        dependsOn fakeClasseDirForExternalDependencies
        setAsOsgiExternalArchive()

        from zipTree(jarFile), {
            exclude 'META-INF/MANIFEST.MF'
        }

        manifest {
            classesDir fakeClasseDirForExternalDependencies.outputDir
        }

        ceylon {
            seedFrom jarFile
            moduleLocation {moduleTask.destinationFile}
            forceNewOsgiManifest relativePath.matches(~/.+[\\\/](logmanager|slf4j)[\\\/].+/)
        }

        from moduleTask, {
            into "META-INF/jbossmodules/${relativePath}"
        }

        doFirst { mkdir manifest.classesDir }
    }

    sha1Externals.archive osgiJar
    sha1Externals.dependsOn osgiJar
    addModuleDescriptorsForExternalDependencies.dependsOn osgiJar, moduleTask, sha1Externals
}

assemble {
    dependsOn pluginFiles, addModuleDescriptorsForExternalDependencies
}

task setupRepo( type : Copy ) {
    group "Setup"
    description "Setup the basic structure of the dist folder by copying the template folder"
    dependsOn addModuleDescriptorsForExternalDependencies
    into repoDir
    from externalDepsDestinationDir
    exclude 'classes'
}

['common','cmr','language','tool-provider','java-main'].each {
    publishInternal.dependsOn ":${it}:publishInternal"
}

// TODO: Can be removed if language build is pure Gradle
compileJava.dependsOn ':language:assemble'


