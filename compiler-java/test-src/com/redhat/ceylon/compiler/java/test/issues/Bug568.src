package com.redhat.ceylon.compiler.java.test.issues;

final class bug568 {
    
    private bug568() {
    }
    
    static void bug568() {
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer> childPaths = .ceylon.language.$empty.getEmpty();
        .java.lang.Object $elem$0;
        for (.ceylon.language.Iterator<? extends .ceylon.language.String> $s$iter$4 = (
            let
            {
                .ceylon.language.FixedSized<? extends .ceylon.language.Integer> $spreadTest$1 = (.ceylon.language.FixedSized<? extends .ceylon.language.Integer>)childPaths;
            }
            returning (.ceylon.language.Iterable<? extends .ceylon.language.String>)(!$spreadTest$1.getEmpty() ? (
                let
                {
                    .ceylon.language.Sequence<? extends .ceylon.language.Integer> $spread$2$0 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)$spreadTest$1;
                    int $spread$2$2 = (int)$spread$2$0.getSize();
                    .ceylon.language.String[] $spread$2$4 = new .ceylon.language.String[$spread$2$2];
                    for (int $index$3 = 0; $index$3 < $spread$2$2; $index$3++) $spread$2$4[$index$3] = .ceylon.language.String.instance($spread$2$0.item(.ceylon.language.Integer.instance($index$3)).toString());
                }
                returning new .ceylon.language.ArraySequence<.ceylon.language.String>($spread$2$4);
            ) : .ceylon.language.$empty.getEmpty());
        ).getIterator(); !(($elem$0 = $s$iter$4.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.String s = ((.ceylon.language.String)$elem$0).toString();
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.issues.bug568.bug568();
    }
}
