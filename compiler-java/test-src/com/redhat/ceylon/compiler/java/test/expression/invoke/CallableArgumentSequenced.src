package com.redhat.ceylon.compiler.java.test.expression.invoke;

final class callableArgumentSequenced_f {
    
    private callableArgumentSequenced_f() {
    }
    
    static void callableArgumentSequenced_f(final .ceylon.language.Callable<? extends .java.lang.Object> foo) {
    }
}
final class callableArgumentSequenced_g {
    
    private callableArgumentSequenced_g() {
    }
    
    static void callableArgumentSequenced_g(final .ceylon.language.Iterable<? extends .ceylon.language.String> s) {
    }
    
    static final void callableArgumentSequenced_g() {
        (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String> $ceylontmp$s$1 = callableArgumentSequenced_g$s();
                callableArgumentSequenced_g($ceylontmp$s$1);
            }
            returning null;
        );
    }
    
    static final .ceylon.language.Iterable<? extends .ceylon.language.String> callableArgumentSequenced_g$s() {
        return .ceylon.language.$empty.getEmpty();
    }
}
final class callableArgumentSequenced_m {
    
    private callableArgumentSequenced_m() {
    }
    
    static void callableArgumentSequenced_m() {
        .com.redhat.ceylon.compiler.java.test.expression.invoke.callableArgumentSequenced_f.callableArgumentSequenced_f(new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>("ceylon.language.Callable<ceylon.language.Void,ceylon.language.Iterable<ceylon.language.String>>"){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                return (
                    let
                    {
                        .com.redhat.ceylon.compiler.java.test.expression.invoke.callableArgumentSequenced_g.callableArgumentSequenced_g((.ceylon.language.Iterable<? extends .ceylon.language.String>)$param$0);
                    }
                    returning null;
                );
            }
        });
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.invoke.callableArgumentSequenced_m.callableArgumentSequenced_m();
    }
}