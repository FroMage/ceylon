package com.redhat.ceylon.compiler.java.test.expression.operator;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon
@.com.redhat.ceylon.compiler.java.metadata.Attribute
final class optimToplevelInteger {
    private static long value;
    static {
        value = 0L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    static long getOptimToplevelInteger() {
        return value;
    }
    
    static void setOptimToplevelInteger(@.com.redhat.ceylon.compiler.java.metadata.Name("optimToplevelInteger")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    long optimToplevelInteger) {
        value = optimToplevelInteger;
    }
    
    private optimToplevelInteger() {
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "I", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE, satisfies = {}), @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "F", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE, satisfies = {}), @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "C", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE, satisfies = {}), @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "S", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE, satisfies = {}), @.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "B", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE, satisfies = {})})
abstract class OptimSuperclass<I, F, C, S, B> {
    
    public abstract void boxedIntegerArithmetic(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("I")
    final I n2);
    
    public abstract void boxedFloatArithmetic(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("F")
    final F n2);
    
    public abstract void boxedStringOperators(@.com.redhat.ceylon.compiler.java.metadata.Name("s2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("S")
    final S s2);
    
    public abstract void boxedBooleanLogical(@.com.redhat.ceylon.compiler.java.metadata.Name("b2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("B")
    final B b2);
    
    public abstract void boxedIntegerComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("I")
    final I n2);
    
    public abstract void boxedFloatComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("F")
    final F n2);
    
    public abstract void boxedStringComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("s2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("S")
    final S s2);
    
    public abstract void boxedCharacterComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("c2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("C")
    final C c2);
    
    public abstract void boxedBooleanComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("b2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("B")
    final B b2);
    
    OptimSuperclass() {
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon
@.com.redhat.ceylon.compiler.java.metadata.Class(extendsType = "com.redhat.ceylon.compiler.java.test.expression.operator.OptimSuperclass<ceylon.language.Integer,ceylon.language.Float,ceylon.language.Character,ceylon.language.String,ceylon.language.Boolean>")
class Optim extends com.redhat.ceylon.compiler.java.test.expression.operator.OptimSuperclass<ceylon.language.Integer, ceylon.language.Float, ceylon.language.Character, ceylon.language.String, ceylon.language.Boolean> {
    
    private final long $getInteger() {
        return 1L;
    }
    
    private final double $getFloat() {
        return 1.0;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "T", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE, satisfies = {})})
    private final <T>T getBoxed(final T t) {
        return t;
    }
    
    private final void unboxedIntegerArithmetic() {
        long n1 = 0L;
        long n2 = 0L;
        long n3 = 0L;
        n1++;
        ++n1;
        n1--;
        --n1;
        n1 = n2;
        n1 = 0L;
        n1 = $getInteger();
        n1 = -n2;
        n1 = -0L;
        n1 = -$getInteger();
        n1 = n2 + n3;
        n1 = n2 - n3;
        n1 = n2 * n3;
        n1 = n2 / n3;
        n1 = n2 % n3;
        n1 = .ceylon.language.Integer.instance(n2).power(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2 += n3;
        n1 = n2 *= n3;
        n1 = n2 /= n3;
        n1 = n2 %= n3;
    }
    
    @.java.lang.Override
    public final void boxedIntegerArithmetic(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    final ceylon.language.Integer n2) {
        long n1 = 0L;
        long n3 = 0L;
        n1++;
        ++n1;
        n1--;
        --n1;
        n1 = n2.getPositiveValue().longValue();
        n1 = 0L;
        n1 = <ceylon.language.Integer>getBoxed(.ceylon.language.Integer.instance(1L)).getPositiveValue().longValue();
        n1 = n2.getNegativeValue().longValue();
        n1 = -0L;
        n1 = <ceylon.language.Integer>getBoxed(.ceylon.language.Integer.instance(1L)).getNegativeValue().longValue();
        n1 = n2.plus(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.minus(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.times(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.divided(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.remainder(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = n2.power(.ceylon.language.Integer.instance(n3)).longValue();
        n1 = (let ceylon.language.Integer $ceylontmpop0 = .ceylon.language.Integer.instance(n3).plus(n2) in n3 = $ceylontmpop0.longValue(); $ceylontmpop0).longValue();
        n1 = (let ceylon.language.Integer $ceylontmpop1 = .ceylon.language.Integer.instance(n3).times(n2) in n3 = $ceylontmpop1.longValue(); $ceylontmpop1).longValue();
        n1 = (let ceylon.language.Integer $ceylontmpop2 = .ceylon.language.Integer.instance(n3).divided(n2) in n3 = $ceylontmpop2.longValue(); $ceylontmpop2).longValue();
        n1 = (let ceylon.language.Integer $ceylontmpop3 = .ceylon.language.Integer.instance(n3).remainder(n2) in n3 = $ceylontmpop3.longValue(); $ceylontmpop3).longValue();
    }
    
    private final void unboxedFloatArithmetic() {
        double n1 = 0.0;
        double n2 = 0.0;
        double n3 = 0.0;
        n1 = n2;
        n1 = 0.0;
        n1 = $getFloat();
        n1 = -n2;
        n1 = -0.0;
        n1 = -$getFloat();
        n1 = n2 + n3;
        n1 = n2 - n3;
        n1 = n2 * n3;
        n1 = n2 / n3;
        n1 = .ceylon.language.Float.instance(n2).power(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2 += n3;
        n1 = n2 *= n3;
        n1 = n2 /= n3;
    }
    
    @.java.lang.Override
    public final void boxedFloatArithmetic(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Float")
    final ceylon.language.Float n2) {
        double n1 = 0.0;
        double n3 = 0.0;
        n1 = n2.getPositiveValue().doubleValue();
        n1 = 0.0;
        n1 = <ceylon.language.Float>getBoxed(.ceylon.language.Float.instance(0.0)).getPositiveValue().doubleValue();
        n1 = n2.getNegativeValue().doubleValue();
        n1 = -0.0;
        n1 = <ceylon.language.Float>getBoxed(.ceylon.language.Float.instance(0.0)).getNegativeValue().doubleValue();
        n1 = n2.plus(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.minus(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.times(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.divided(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = n2.power(.ceylon.language.Float.instance(n3)).doubleValue();
        n1 = (let ceylon.language.Float $ceylontmpop4 = .ceylon.language.Float.instance(n3).plus(n2) in n3 = $ceylontmpop4.doubleValue(); $ceylontmpop4).doubleValue();
        n1 = (let ceylon.language.Float $ceylontmpop5 = .ceylon.language.Float.instance(n3).times(n2) in n3 = $ceylontmpop5.doubleValue(); $ceylontmpop5).doubleValue();
        n1 = (let ceylon.language.Float $ceylontmpop6 = .ceylon.language.Float.instance(n3).divided(n2) in n3 = $ceylontmpop6.doubleValue(); $ceylontmpop6).doubleValue();
    }
    
    private final void unboxedCharacterArithmetic() {
        int n1 = 'a';
        int n2 = 'a';
        int n3 = 'a';
        n1++;
        ++n1;
        n1--;
        --n1;
    }
    
    private final void unboxedBooleanLogical() {
        boolean b1 = false;
        boolean b2 = false;
        boolean b3 = false;
        b1 = b2;
        b1 = !b2;
        b1 = b2 && b3;
        b1 = b2 || b3;
        b1 = b2 |= b3;
        b1 = b2 &= b3;
    }
    
    @.java.lang.Override
    public final void boxedBooleanLogical(@.com.redhat.ceylon.compiler.java.metadata.Name("b2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    final ceylon.language.Boolean b2) {
        boolean b1 = false;
        boolean b3 = false;
        b1 = b2.booleanValue();
        b1 = !b2.booleanValue();
        b1 = b2.booleanValue() && b3;
        b1 = b2.booleanValue() || b3;
        b1 = b3 |= b2.booleanValue();
        b1 = b3 &= b2.booleanValue();
    }
    
    private final void unboxedStringOperators() {
        .java.lang.String s1 = "";
        .java.lang.String s2 = "";
        .java.lang.String s3 = "";
        s1 = s2 + s3;
        s1 = s2 += s3;
    }
    
    @.java.lang.Override
    public final void boxedStringOperators(@.com.redhat.ceylon.compiler.java.metadata.Name("s2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.String")
    final ceylon.language.String s2) {
        .java.lang.String s1 = "";
        .java.lang.String s3 = "";
        s1 = s2.plus(.ceylon.language.String.instance(s3)).toString();
        s1 = (let ceylon.language.String $ceylontmpop7 = .ceylon.language.String.instance(s3).plus(s2) in s3 = $ceylontmpop7.toString(); $ceylontmpop7).toString();
    }
    private long fieldInteger;
    
    private final long getFieldInteger() {
        return fieldInteger;
    }
    
    private final void setFieldInteger(long fieldInteger) {
        this.fieldInteger = fieldInteger;
    }
    
    private final long getFieldGetterInteger() {
        return 0L;
    }
    
    private final void setFieldGetterInteger(long fieldGetterInteger) {
    }
    
    private final void nonOptimisableArithmetic() {
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon
        @.com.redhat.ceylon.compiler.java.metadata.Attribute
        final class localGetterInteger$getter {
            
            long getLocalGetterInteger() {
                return 0L;
            }
            
            private localGetterInteger$getter() {
            }
        }
        final localGetterInteger$getter localGetterInteger$getter = new localGetterInteger$getter();
        
        @.com.redhat.ceylon.compiler.java.metadata.Ceylon
        @.com.redhat.ceylon.compiler.java.metadata.Attribute
        final class localGetterInteger$setter {
            private long value;
            
            void setLocalGetterInteger(long localGetterInteger) {
            }
            
            private localGetterInteger$setter() {
            }
        }
        final localGetterInteger$setter localGetterInteger$setter = new localGetterInteger$setter();
        setFieldInteger((let long $ceylontmpop8 = getFieldInteger() in setFieldInteger($ceylontmpop8 + 1); $ceylontmpop8));
        this.setFieldInteger((let com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmpopE9 = this,long $ceylontmpopV10 = $ceylontmpopE9.getFieldInteger() in $ceylontmpopE9.setFieldInteger($ceylontmpopV10 + 1); $ceylontmpopV10));
        setFieldGetterInteger((let long $ceylontmpop11 = getFieldGetterInteger() in setFieldGetterInteger($ceylontmpop11 + 1); $ceylontmpop11));
        localGetterInteger$setter.setLocalGetterInteger((let long $ceylontmpop12 = localGetterInteger$getter.getLocalGetterInteger() in localGetterInteger$setter.setLocalGetterInteger($ceylontmpop12 + 1); $ceylontmpop12));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.setOptimToplevelInteger((let long $ceylontmpop13 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.getOptimToplevelInteger() in .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.setOptimToplevelInteger($ceylontmpop13 + 1); $ceylontmpop13));
        setFieldInteger((let long $ceylontmpop14 = getFieldInteger() + 1 in setFieldInteger($ceylontmpop14); $ceylontmpop14));
        this.setFieldInteger((let com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmpopE15 = this,long $ceylontmpopV16 = $ceylontmpopE15.getFieldInteger() + 1 in $ceylontmpopE15.setFieldInteger($ceylontmpopV16); $ceylontmpopV16));
        setFieldGetterInteger((let long $ceylontmpop17 = getFieldGetterInteger() + 1 in setFieldGetterInteger($ceylontmpop17); $ceylontmpop17));
        localGetterInteger$setter.setLocalGetterInteger((let long $ceylontmpop18 = localGetterInteger$getter.getLocalGetterInteger() + 1 in localGetterInteger$setter.setLocalGetterInteger($ceylontmpop18); $ceylontmpop18));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.setOptimToplevelInteger((let long $ceylontmpop19 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.getOptimToplevelInteger() + 1 in .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.setOptimToplevelInteger($ceylontmpop19); $ceylontmpop19));
        setFieldInteger((let long $ceylontmpop20 = getFieldInteger() + getFieldInteger() in setFieldInteger($ceylontmpop20); $ceylontmpop20));
        this.setFieldInteger((let com.redhat.ceylon.compiler.java.test.expression.operator.Optim $ceylontmpopE21 = this,long $ceylontmpopV22 = $ceylontmpopE21.getFieldInteger() + this.getFieldInteger() in $ceylontmpopE21.setFieldInteger($ceylontmpopV22); $ceylontmpopV22));
        setFieldGetterInteger((let long $ceylontmpop23 = getFieldGetterInteger() + getFieldGetterInteger() in setFieldGetterInteger($ceylontmpop23); $ceylontmpop23));
        localGetterInteger$setter.setLocalGetterInteger((let long $ceylontmpop24 = localGetterInteger$getter.getLocalGetterInteger() + localGetterInteger$getter.getLocalGetterInteger() in localGetterInteger$setter.setLocalGetterInteger($ceylontmpop24); $ceylontmpop24));
        .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.setOptimToplevelInteger((let long $ceylontmpop25 = .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.getOptimToplevelInteger() + .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.getOptimToplevelInteger() in .com.redhat.ceylon.compiler.java.test.expression.operator.optimToplevelInteger.setOptimToplevelInteger($ceylontmpop25); $ceylontmpop25));
    }
    
    private final void unboxedIntegerComparison() {
        long n1 = 0L;
        long n2 = 0L;
        boolean sync;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final ceylon.language.Comparison c = .ceylon.language.Integer.instance(n1).compare(.ceylon.language.Integer.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final void boxedIntegerComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    final ceylon.language.Integer n2) {
        long n1 = 0L;
        boolean sync;
        sync = .ceylon.language.Integer.instance(n1).equals(n2);
        sync = !.ceylon.language.Integer.instance(n1).equals(n2);
        final ceylon.language.Comparison c = .ceylon.language.Integer.instance(n1).compare(n2);
        sync = .ceylon.language.Integer.instance(n1).compare(n2).smallerThan();
        sync = .ceylon.language.Integer.instance(n1).compare(n2).largerThan();
        sync = .ceylon.language.Integer.instance(n1).compare(n2).asSmallAs();
        sync = .ceylon.language.Integer.instance(n1).compare(n2).asLargeAs();
    }
    
    private final void unboxedFloatComparison() {
        double n1 = 0.0;
        double n2 = 0.0;
        boolean sync;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final ceylon.language.Comparison c = .ceylon.language.Float.instance(n1).compare(.ceylon.language.Float.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final void boxedFloatComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Float")
    final ceylon.language.Float n2) {
        double n1 = 0.0;
        boolean sync;
        sync = .ceylon.language.Float.instance(n1).equals(n2);
        sync = !.ceylon.language.Float.instance(n1).equals(n2);
        final ceylon.language.Comparison c = .ceylon.language.Float.instance(n1).compare(n2);
        sync = .ceylon.language.Float.instance(n1).compare(n2).smallerThan();
        sync = .ceylon.language.Float.instance(n1).compare(n2).largerThan();
        sync = .ceylon.language.Float.instance(n1).compare(n2).asSmallAs();
        sync = .ceylon.language.Float.instance(n1).compare(n2).asLargeAs();
    }
    
    private final void unboxedCharacterComparison() {
        int n1 = 'a';
        int n2 = 'a';
        boolean sync;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final ceylon.language.Comparison c = .ceylon.language.Character.instance(n1).compare(.ceylon.language.Character.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    @.java.lang.Override
    public final void boxedCharacterComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("n2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Character")
    final ceylon.language.Character n2) {
        int n1 = 'a';
        boolean sync;
        sync = .ceylon.language.Character.instance(n1).equals(n2);
        sync = !.ceylon.language.Character.instance(n1).equals(n2);
        final ceylon.language.Comparison c = .ceylon.language.Character.instance(n1).compare(n2);
        sync = .ceylon.language.Character.instance(n1).compare(n2).smallerThan();
        sync = .ceylon.language.Character.instance(n1).compare(n2).largerThan();
        sync = .ceylon.language.Character.instance(n1).compare(n2).asSmallAs();
        sync = .ceylon.language.Character.instance(n1).compare(n2).asLargeAs();
    }
    
    private final void unboxedBooleanComparison() {
        boolean b1 = false;
        boolean b2 = false;
        boolean sync;
        sync = b1 == b2;
        sync = b1 == b2;
        sync = !(b1 == b2);
    }
    
    @.java.lang.Override
    public final void boxedBooleanComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("b2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    final ceylon.language.Boolean b2) {
        boolean b1 = false;
        boolean sync;
        sync = .ceylon.language.Boolean.instance(b1) == b2;
        sync = .ceylon.language.Boolean.instance(b1).equals(b2);
        sync = !.ceylon.language.Boolean.instance(b1).equals(b2);
    }
    
    private final void unboxedStringComparison() {
        .java.lang.String s1 = "";
        .java.lang.String s2 = "";
        boolean sync;
        sync = s1.equals(s2);
        sync = !s1.equals(s2);
        final ceylon.language.Comparison c = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2));
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).smallerThan();
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).largerThan();
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).asSmallAs();
        sync = .ceylon.language.String.instance(s1).compare(.ceylon.language.String.instance(s2)).asLargeAs();
    }
    
    @.java.lang.Override
    public final void boxedStringComparison(@.com.redhat.ceylon.compiler.java.metadata.Name("s2")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.String")
    final ceylon.language.String s2) {
        .java.lang.String s1 = "";
        boolean sync;
        sync = .ceylon.language.String.instance(s1).equals(s2);
        sync = !.ceylon.language.String.instance(s1).equals(s2);
        final ceylon.language.Comparison c = .ceylon.language.String.instance(s1).compare(s2);
        sync = .ceylon.language.String.instance(s1).compare(s2).smallerThan();
        sync = .ceylon.language.String.instance(s1).compare(s2).largerThan();
        sync = .ceylon.language.String.instance(s1).compare(s2).asSmallAs();
        sync = .ceylon.language.String.instance(s1).compare(s2).asLargeAs();
    }
    
    private final void nonOptimisableComparison(final .java.lang.Object o) {
        .java.lang.String s1 = "";
        boolean b2 = false;
        boolean sync;
        sync = o == .ceylon.language.Boolean.instance(b2);
        sync = .ceylon.language.String.instance(s1).equals(.ceylon.language.Boolean.instance(b2));
        sync = !.ceylon.language.String.instance(s1).equals(.ceylon.language.Boolean.instance(b2));
    }
    
    Optim() {
        super();
        this.fieldInteger = 0L;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.Optim();
    }
}