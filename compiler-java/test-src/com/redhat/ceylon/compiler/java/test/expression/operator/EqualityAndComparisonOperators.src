package com.redhat.ceylon.compiler.java.test.expression.operator;

interface BasicOperatorsA {
}
interface BasicOperatorsB {
}
public abstract class EqualityAndComparisonInteger extends .java.lang.Object implements ceylon.language.Castable, ceylon.language.Integral<com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger> {
    
    public EqualityAndComparisonInteger() {
        super();
    }
}
public class EqualityAndComparisonOperators {
    
    private final void equalityAndComparisonUnboxed(final .java.lang.Object o1, final .java.lang.Object o2) {
        boolean sync = o1 == o2;
        long n1 = 0L;
        long n2 = 0L;
        sync = n1 == n2;
        sync = !(n1 == n2);
        final ceylon.language.Comparison c = .ceylon.language.Integer.instance(n1).compare(.ceylon.language.Integer.instance(n2));
        sync = n1 < n2;
        sync = n1 > n2;
        sync = n1 <= n2;
        sync = n1 >= n2;
    }
    
    private final void equalityAndComparisonBoxed(final .java.lang.Object o1, final .java.lang.Object o2, final com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n1, final com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n2) {
        ceylon.language.Boolean sync = .ceylon.language.Boolean.instance(o1 == o2);
        sync = .ceylon.language.Boolean.instance(n1.equals(n2));
        sync = .ceylon.language.Boolean.instance(!n1.equals(n2));
        final ceylon.language.Comparison c = n1.compare(n2);
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).smallerThan());
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).largerThan());
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).asSmallAs());
        sync = .ceylon.language.Boolean.instance(n1.compare(n2).asLargeAs());
    }
    
    private final void testInBoxed(final long n1, final long n2) {
        final boolean b1 = (let ceylon.language.Integer $ceylontmp0 = .ceylon.language.Integer.instance(n1) in new ceylon.language.Range<ceylon.language.Integer>(.ceylon.language.Integer.instance(n1), .ceylon.language.Integer.instance(n2)).contains($ceylontmp0));
    }
    
    private final void testInUnboxed(final com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n1, final com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger n2) {
        final ceylon.language.Boolean b1 = .ceylon.language.Boolean.instance((let com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger $ceylontmp1 = n1 in new ceylon.language.Range<com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonInteger>(n1, n2).contains($ceylontmp1)));
    }
    
    private final void testIs() {
        boolean sync = false;
        final .java.lang.Object foo = .ceylon.language.Boolean.instance(sync);
        sync = .ceylon.language.Boolean.instance(sync) instanceof ceylon.language.Empty;
        final ceylon.language.Boolean dest = .ceylon.language.Boolean.instance(.ceylon.language.Boolean.instance(true) instanceof ceylon.language.Empty);
        sync = foo instanceof ceylon.language.Boolean;
        sync = .com.redhat.ceylon.compiler.java.Util.isEquality(foo);
        sync = .com.redhat.ceylon.compiler.java.Util.isIdentifiableObject(foo);
        sync = foo instanceof .java.lang.Throwable;
    }
    
    public EqualityAndComparisonOperators() {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.EqualityAndComparisonOperators();
    }
}