package com.redhat.ceylon.compiler.java.test.structure.nesting.cci;

interface C$CC$CCI<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
}
class C<T extends .ceylon.language.String, X extends .ceylon.language.Boolean> {
    
    private final <U>T m1(final X b, final U u) {
        throw new .ceylon.language.Exception(null, null);
    }
    
    private final <U>T m1(final X b) {
        return (
            let
            {
                U $ceylontmp$u$1 = m1$u(b);
            }
            returning m1(b, $ceylontmp$u$1);
        );
    }
    
    private final <U>U m1$u(final X b) {
        return null;
    }
    
    class CC {
        
        final class CCI$impl {
            private final .com.redhat.ceylon.compiler.java.test.structure.nesting.cci.C$CC$CCI<? extends T, ? super X> $this;
            
            private T m2() {
                return m1(null);
            }
            
            CCI$impl(.com.redhat.ceylon.compiler.java.test.structure.nesting.cci.C$CC$CCI<? extends T, ? super X> $this) {
                this.$this = $this;
            }
        }
        
        CC() {
        }
    }
    
    C() {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.structure.nesting.cci.C();
    }
}