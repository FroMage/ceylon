package com.redhat.ceylon.compiler.java.test.expression.operator;

class C {
    
    private final void m(final .ceylon.language.Iterable<? extends .ceylon.language.String> seq) {
        final .ceylon.language.Callable<? extends .ceylon.language.Iterable<? extends .ceylon.language.String>> f = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Iterable<? extends .ceylon.language.String>>("Callable<String[],Integer>"){
            
            @.java.lang.Override
            public .ceylon.language.Iterable<.ceylon.language.String> $call(final .java.lang.Object $param$0) {
                return (
                    let
                        .ceylon.language.FixedSized<? extends .ceylon.language.String> $spreadTest$3 = (.ceylon.language.FixedSized<? extends .ceylon.language.String>)seq
                    in {
                    }
                    returning !$spreadTest$3.getEmpty() ? (
                        let
                            .ceylon.language.Sequence<? extends .ceylon.language.String> $spread$4$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>)$spreadTest$3,
                            int $spread$4$2 = (int)$spread$4$0.getSize(),
                            .ceylon.language.String[] $spread$4$4 = new .ceylon.language.String[$spread$4$2]
                        in {
                            for (int $index$5 = 0; $index$5 < $spread$4$2; $index$5++) $spread$4$4[$index$5] = .ceylon.language.String.instance($spread$4$0.item(.ceylon.language.Integer.instance($index$5)).initial(((.ceylon.language.Integer)$param$0).longValue()));
                        }
                        returning new .ceylon.language.ArraySequence<.ceylon.language.String>($spread$4$4)
                    ) : .ceylon.language.$empty.getEmpty()
                );
            }
        };
    }
    
    C() {
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.operator.C();
    }
}
