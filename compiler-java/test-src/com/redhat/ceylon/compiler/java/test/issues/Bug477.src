package com.redhat.ceylon.compiler.java.test.issues;

abstract class Bug477_1<T> implements .ceylon.language.List<T> {
    private final .ceylon.language.List$impl<T> $ceylon$language$List$this;
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this.getSize();
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterator<? extends T> getIterator() {
        return $ceylon$language$List$this.getIterator();
    }
    private final .ceylon.language.Collection$impl<T> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this.getEmpty();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.contains(element);
    }
    
    @.java.lang.Override
    public long count(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.count(element);
    }
    private final .ceylon.language.Iterable$impl<T> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public T find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> sorted(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sorted(comparing);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    private final .ceylon.language.Container$impl $ceylon$language$Container$this;
    private final .ceylon.language.Sized$impl $ceylon$language$Sized$this;
    private final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsEvery$elements() {
        return $ceylon$language$Category$this.containsEvery$elements();
    }
    
    @.java.lang.Override
    public final boolean containsEvery() {
        return $ceylon$language$Category$this.containsEvery();
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsAny$elements() {
        return $ceylon$language$Category$this.containsAny$elements();
    }
    
    @.java.lang.Override
    public final boolean containsAny() {
        return $ceylon$language$Category$this.containsAny();
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    private final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>> $ceylon$language$Cloneable$this;
    private final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesEvery$keys() {
        return $ceylon$language$Correspondence$this.definesEvery$keys();
    }
    
    @.java.lang.Override
    public final boolean definesEvery() {
        return $ceylon$language$Correspondence$this.definesEvery();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesAny$keys() {
        return $ceylon$language$Correspondence$this.definesAny$keys();
    }
    
    @.java.lang.Override
    public final boolean definesAny() {
        return $ceylon$language$Correspondence$this.definesAny();
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> items$keys() {
        return $ceylon$language$Correspondence$this.items$keys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends T> items() {
        return $ceylon$language$Correspondence$this.items();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    private final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>> $ceylon$language$Ranged$this;
    private final .com.redhat.ceylon.compiler.java.test.issues.Bug477_1<? extends T> clone;
    
    @.java.lang.Override
    public final .com.redhat.ceylon.compiler.java.test.issues.Bug477_1<? extends T> getClone() {
        return clone;
    }
    private final .java.lang.String string;
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return string;
    }
    private final int hash;
    
    @.java.lang.Override
    public final int hashCode() {
        return hash;
    }
    
    @.java.lang.Override
    public final boolean equals(final .java.lang.Object that) {
        return ((.ceylon.language.Boolean).ceylon.language.bottom.getBottom()).booleanValue();
    }
    
    Bug477_1() {
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<T>(this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<T>(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<T>(this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl(this);
        this.$ceylon$language$Sized$this = new .ceylon.language.Sized$impl(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>>((.ceylon.language.Cloneable<.ceylon.language.Collection<? extends T>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T>(this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>>(this);
        this.clone = (.com.redhat.ceylon.compiler.java.test.issues.Bug477_1<? extends T>).ceylon.language.bottom.getBottom();
        this.string = ((.ceylon.language.String).ceylon.language.bottom.getBottom()).toString();
        this.hash = (int)1L;
    }
}
abstract class Bug477_2<T> implements .ceylon.language.List<T> {
    private final .ceylon.language.List$impl<T> $ceylon$language$List$this;
    
    @.java.lang.Override
    public long getSize() {
        return $ceylon$language$List$this.getSize();
    }
    
    @.java.lang.Override
    public boolean defines(final .ceylon.language.Integer index) {
        return $ceylon$language$List$this.defines(index);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterator<? extends T> getIterator() {
        return $ceylon$language$List$this.getIterator();
    }
    private final .ceylon.language.Collection$impl<T> $ceylon$language$Collection$this;
    
    @.java.lang.Override
    public boolean getEmpty() {
        return $ceylon$language$Collection$this.getEmpty();
    }
    
    @.java.lang.Override
    public boolean contains(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.contains(element);
    }
    
    @.java.lang.Override
    public long count(final .java.lang.Object element) {
        return $ceylon$language$Collection$this.count(element);
    }
    private final .ceylon.language.Iterable$impl<T> $ceylon$language$Iterable$this;
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> getSequence() {
        return $ceylon$language$Iterable$this.getSequence();
    }
    
    @.java.lang.Override
    public <Result>.ceylon.language.Iterable<? extends Result> map(final .ceylon.language.Callable<? extends Result> collecting) {
        return $ceylon$language$Iterable$this.map(collecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> filter(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.filter(selecting);
    }
    
    @.java.lang.Override
    public <Result>Result fold(final Result initial, final .ceylon.language.Callable<? extends Result> accumulating) {
        return $ceylon$language$Iterable$this.fold(initial, accumulating);
    }
    
    @.java.lang.Override
    public T find(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.find(selecting);
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> sorted(final .ceylon.language.Callable<? extends .ceylon.language.Comparison> comparing) {
        return $ceylon$language$Iterable$this.sorted(comparing);
    }
    
    @.java.lang.Override
    public boolean any(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.any(selecting);
    }
    
    @.java.lang.Override
    public boolean every(final .ceylon.language.Callable<? extends .ceylon.language.Boolean> selecting) {
        return $ceylon$language$Iterable$this.every(selecting);
    }
    private final .ceylon.language.Container$impl $ceylon$language$Container$this;
    private final .ceylon.language.Sized$impl $ceylon$language$Sized$this;
    private final .ceylon.language.Category$impl $ceylon$language$Category$this;
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsEvery$elements() {
        return $ceylon$language$Category$this.containsEvery$elements();
    }
    
    @.java.lang.Override
    public final boolean containsEvery() {
        return $ceylon$language$Category$this.containsEvery();
    }
    
    @.java.lang.Override
    public boolean containsEvery(final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsEvery(elements);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsAny$elements() {
        return $ceylon$language$Category$this.containsAny$elements();
    }
    
    @.java.lang.Override
    public final boolean containsAny() {
        return $ceylon$language$Category$this.containsAny();
    }
    
    @.java.lang.Override
    public boolean containsAny(final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $ceylon$language$Category$this.containsAny(elements);
    }
    private final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>> $ceylon$language$Cloneable$this;
    private final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T> $ceylon$language$Correspondence$this;
    
    @.java.lang.Override
    public .ceylon.language.Category getKeys() {
        return $ceylon$language$Correspondence$this.getKeys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesEvery$keys() {
        return $ceylon$language$Correspondence$this.definesEvery$keys();
    }
    
    @.java.lang.Override
    public final boolean definesEvery() {
        return $ceylon$language$Correspondence$this.definesEvery();
    }
    
    @.java.lang.Override
    public boolean definesEvery(final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesEvery(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesAny$keys() {
        return $ceylon$language$Correspondence$this.definesAny$keys();
    }
    
    @.java.lang.Override
    public final boolean definesAny() {
        return $ceylon$language$Correspondence$this.definesAny();
    }
    
    @.java.lang.Override
    public boolean definesAny(final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.definesAny(keys);
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> items$keys() {
        return $ceylon$language$Correspondence$this.items$keys();
    }
    
    @.java.lang.Override
    public final .ceylon.language.Iterable<? extends T> items() {
        return $ceylon$language$Correspondence$this.items();
    }
    
    @.java.lang.Override
    public .ceylon.language.Iterable<? extends T> items(final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $ceylon$language$Correspondence$this.items(keys);
    }
    private final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>> $ceylon$language$Ranged$this;
    private final .ceylon.language.List<? extends T> clone;
    
    @.java.lang.Override
    public final .ceylon.language.List<? extends T> getClone() {
        return clone;
    }
    private final .java.lang.String string;
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return string;
    }
    private final int hash;
    
    @.java.lang.Override
    public final int hashCode() {
        return hash;
    }
    
    @.java.lang.Override
    public final boolean equals(final .java.lang.Object that) {
        return ((.ceylon.language.Boolean).ceylon.language.bottom.getBottom()).booleanValue();
    }
    
    Bug477_2() {
        this.$ceylon$language$List$this = new .ceylon.language.List$impl<T>(this);
        this.$ceylon$language$Collection$this = new .ceylon.language.Collection$impl<T>(this);
        this.$ceylon$language$Iterable$this = new .ceylon.language.Iterable$impl<T>(this);
        this.$ceylon$language$Container$this = new .ceylon.language.Container$impl(this);
        this.$ceylon$language$Sized$this = new .ceylon.language.Sized$impl(this);
        this.$ceylon$language$Category$this = new .ceylon.language.Category$impl(this);
        this.$ceylon$language$Cloneable$this = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>>((.ceylon.language.Cloneable<.ceylon.language.Collection<? extends T>>)(.ceylon.language.Cloneable)this);
        this.$ceylon$language$Correspondence$this = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T>(this);
        this.$ceylon$language$Ranged$this = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>>(this);
        this.clone = (.ceylon.language.List<? extends T>).ceylon.language.bottom.getBottom();
        this.string = ((.ceylon.language.String).ceylon.language.bottom.getBottom()).toString();
        this.hash = (int)1L;
    }
}
