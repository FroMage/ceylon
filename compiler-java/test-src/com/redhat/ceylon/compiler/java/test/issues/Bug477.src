package com.redhat.ceylon.compiler.java.test.issues;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon
@.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("abstract")})
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language.List<T>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "T", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.OUT, satisfies = {})})
abstract class Bug477_1<T> implements .ceylon.language.List<T> {
    private final .ceylon.language.List$impl<T> $List$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    public long getSize() {
        return $List$impl.getSize();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean defines(@.com.redhat.ceylon.compiler.java.metadata.Name("index")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    final .ceylon.language.Integer index) {
        return $List$impl.defines(index);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Iterator<Element>")
    public .ceylon.language.Iterator<? extends T> getIterator() {
        return $List$impl.getIterator();
    }
    private final .ceylon.language.Collection$impl<T> $Collection$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean getEmpty() {
        return $Collection$impl.getEmpty();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean contains(@.com.redhat.ceylon.compiler.java.metadata.Name("element")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Object")
    final .java.lang.Object element) {
        return $Collection$impl.contains(element);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    public long count(@.com.redhat.ceylon.compiler.java.metadata.Name("element")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Object")
    final .java.lang.Object element) {
        return $Collection$impl.count(element);
    }
    private final .ceylon.language.Iterable$impl<T> $Iterable$impl;
    private final .ceylon.language.Container$impl $Container$impl;
    private final .ceylon.language.Sized$impl $Sized$impl;
    private final .ceylon.language.Category$impl $Category$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsEvery$elements() {
        return $Category$impl.containsEvery$elements();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean containsEvery() {
        return $Category$impl.containsEvery();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean containsEvery(@.com.redhat.ceylon.compiler.java.metadata.Name("elements")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $Category$impl.containsEvery(elements);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsAny$elements() {
        return $Category$impl.containsAny$elements();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean containsAny() {
        return $Category$impl.containsAny();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean containsAny(@.com.redhat.ceylon.compiler.java.metadata.Name("elements")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $Category$impl.containsAny(elements);
    }
    private final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>> $Cloneable$impl;
    private final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T> $Correspondence$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Category")
    public .ceylon.language.Category getKeys() {
        return $Correspondence$impl.getKeys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesEvery$keys() {
        return $Correspondence$impl.definesEvery$keys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean definesEvery() {
        return $Correspondence$impl.definesEvery();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean definesEvery(@.com.redhat.ceylon.compiler.java.metadata.Name("keys")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $Correspondence$impl.definesEvery(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesAny$keys() {
        return $Correspondence$impl.definesAny$keys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean definesAny() {
        return $Correspondence$impl.definesAny();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean definesAny(@.com.redhat.ceylon.compiler.java.metadata.Name("keys")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $Correspondence$impl.definesAny(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> items$keys() {
        return $Correspondence$impl.items$keys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Item|ceylon.language.Nothing>")
    public final .ceylon.language.Iterable<? extends T> items() {
        return $Correspondence$impl.items();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Item|ceylon.language.Nothing>")
    public .ceylon.language.Iterable<? extends T> items(@.com.redhat.ceylon.compiler.java.metadata.Name("keys")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $Correspondence$impl.items(keys);
    }
    private final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>> $Ranged$impl;
    private final .com.redhat.ceylon.compiler.java.test.issues.Bug477_1<? extends T> clone;
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.issues.Bug477_1<T>")
    public final .com.redhat.ceylon.compiler.java.test.issues.Bug477_1<? extends T> getClone() {
        return clone;
    }
    private final .java.lang.String string;
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.String")
    public final .java.lang.String toString() {
        return string;
    }
    private final int hash;
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    public final int hashCode() {
        return hash;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean equals(@.com.redhat.ceylon.compiler.java.metadata.Name("that")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Object")
    final .java.lang.Object that) {
        return ((.ceylon.language.Boolean).ceylon.language.bottom.getBottom()).booleanValue();
    }
    
    Bug477_1() {
        this.$List$impl = new .ceylon.language.List$impl<T>(this);
        this.$Collection$impl = new .ceylon.language.Collection$impl<T>(this);
        this.$Iterable$impl = new .ceylon.language.Iterable$impl<T>(this);
        this.$Container$impl = new .ceylon.language.Container$impl(this);
        this.$Sized$impl = new .ceylon.language.Sized$impl(this);
        this.$Category$impl = new .ceylon.language.Category$impl(this);
        this.$Cloneable$impl = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>>(this);
        this.$Correspondence$impl = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T>(this);
        this.$Ranged$impl = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>>(this);
        this.clone = (.com.redhat.ceylon.compiler.java.test.issues.Bug477_1<? extends T>).ceylon.language.bottom.getBottom();
        this.string = ((.ceylon.language.String).ceylon.language.bottom.getBottom()).toString();
        this.hash = (int)1L;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon
@.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("abstract")})
@.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language.List<T>"})
@.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(value = "T", variance = .com.redhat.ceylon.compiler.java.metadata.Variance.OUT, satisfies = {})})
abstract class Bug477_2<T> implements .ceylon.language.List<T> {
    private final .ceylon.language.List$impl<T> $List$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    public long getSize() {
        return $List$impl.getSize();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean defines(@.com.redhat.ceylon.compiler.java.metadata.Name("index")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    final .ceylon.language.Integer index) {
        return $List$impl.defines(index);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Iterator<Element>")
    public .ceylon.language.Iterator<? extends T> getIterator() {
        return $List$impl.getIterator();
    }
    private final .ceylon.language.Collection$impl<T> $Collection$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean getEmpty() {
        return $Collection$impl.getEmpty();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean contains(@.com.redhat.ceylon.compiler.java.metadata.Name("element")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Object")
    final .java.lang.Object element) {
        return $Collection$impl.contains(element);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    public long count(@.com.redhat.ceylon.compiler.java.metadata.Name("element")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Object")
    final .java.lang.Object element) {
        return $Collection$impl.count(element);
    }
    private final .ceylon.language.Iterable$impl<T> $Iterable$impl;
    private final .ceylon.language.Container$impl $Container$impl;
    private final .ceylon.language.Sized$impl $Sized$impl;
    private final .ceylon.language.Category$impl $Category$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsEvery$elements() {
        return $Category$impl.containsEvery$elements();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean containsEvery() {
        return $Category$impl.containsEvery();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean containsEvery(@.com.redhat.ceylon.compiler.java.metadata.Name("elements")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $Category$impl.containsEvery(elements);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    public final .ceylon.language.Iterable<? extends .java.lang.Object> containsAny$elements() {
        return $Category$impl.containsAny$elements();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean containsAny() {
        return $Category$impl.containsAny();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean containsAny(@.com.redhat.ceylon.compiler.java.metadata.Name("elements")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<ceylon.language.Object>")
    final .ceylon.language.Iterable<? extends .java.lang.Object> elements) {
        return $Category$impl.containsAny(elements);
    }
    private final .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>> $Cloneable$impl;
    private final .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T> $Correspondence$impl;
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Category")
    public .ceylon.language.Category getKeys() {
        return $Correspondence$impl.getKeys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesEvery$keys() {
        return $Correspondence$impl.definesEvery$keys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean definesEvery() {
        return $Correspondence$impl.definesEvery();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean definesEvery(@.com.redhat.ceylon.compiler.java.metadata.Name("keys")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $Correspondence$impl.definesEvery(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> definesAny$keys() {
        return $Correspondence$impl.definesAny$keys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean definesAny() {
        return $Correspondence$impl.definesAny();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public boolean definesAny(@.com.redhat.ceylon.compiler.java.metadata.Name("keys")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $Correspondence$impl.definesAny(keys);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    public final .ceylon.language.Iterable<? extends .ceylon.language.Integer> items$keys() {
        return $Correspondence$impl.items$keys();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Item|ceylon.language.Nothing>")
    public final .ceylon.language.Iterable<? extends T> items() {
        return $Correspondence$impl.items();
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Item|ceylon.language.Nothing>")
    public .ceylon.language.Iterable<? extends T> items(@.com.redhat.ceylon.compiler.java.metadata.Name("keys")
    @.com.redhat.ceylon.compiler.java.metadata.Sequenced
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Empty|ceylon.language.Sequence<Key>")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer> keys) {
        return $Correspondence$impl.items(keys);
    }
    private final .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>> $Ranged$impl;
    private final .ceylon.language.List<? extends T> clone;
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.List<T>")
    public final .ceylon.language.List<? extends T> getClone() {
        return clone;
    }
    private final .java.lang.String string;
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.String")
    public final .java.lang.String toString() {
        return string;
    }
    private final int hash;
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Integer")
    public final int hashCode() {
        return hash;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Annotations({@.com.redhat.ceylon.compiler.java.metadata.Annotation("shared"), @.com.redhat.ceylon.compiler.java.metadata.Annotation("actual")})
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Boolean")
    public final boolean equals(@.com.redhat.ceylon.compiler.java.metadata.Name("that")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language.Object")
    final .java.lang.Object that) {
        return ((.ceylon.language.Boolean).ceylon.language.bottom.getBottom()).booleanValue();
    }
    
    Bug477_2() {
        this.$List$impl = new .ceylon.language.List$impl<T>(this);
        this.$Collection$impl = new .ceylon.language.Collection$impl<T>(this);
        this.$Iterable$impl = new .ceylon.language.Iterable$impl<T>(this);
        this.$Container$impl = new .ceylon.language.Container$impl(this);
        this.$Sized$impl = new .ceylon.language.Sized$impl(this);
        this.$Category$impl = new .ceylon.language.Category$impl(this);
        this.$Cloneable$impl = new .ceylon.language.Cloneable$impl<.ceylon.language.Collection<? extends T>>(this);
        this.$Correspondence$impl = new .ceylon.language.Correspondence$impl<.ceylon.language.Integer, T>(this);
        this.$Ranged$impl = new .ceylon.language.Ranged$impl<.ceylon.language.Integer, .ceylon.language.List<? extends T>>(this);
        this.clone = (.ceylon.language.List<? extends T>).ceylon.language.bottom.getBottom();
        this.string = ((.ceylon.language.String).ceylon.language.bottom.getBottom()).toString();
        this.hash = (int)1L;
    }
}