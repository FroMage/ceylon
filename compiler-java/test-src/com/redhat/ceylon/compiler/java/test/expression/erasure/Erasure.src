package com.redhat.ceylon.compiler.java.test.expression.erasure;

interface Top {
    
    public abstract void top();
    
    public abstract long getTopAttribute();
    
    public abstract .java.lang.Object getLeftAndRightAttribute();
    
    public abstract .java.lang.Object leftAndRightMethod(final .java.lang.Object param);
}
interface Left extends com.redhat.ceylon.compiler.java.test.expression.erasure.Top {
    
    public abstract void left();
    
    public abstract long getLeftAttribute();
}
interface Right extends com.redhat.ceylon.compiler.java.test.expression.erasure.Top {
    
    public abstract void right();
    
    public abstract long getRightAttribute();
}
class CMiddle implements com.redhat.ceylon.compiler.java.test.expression.erasure.Left, com.redhat.ceylon.compiler.java.test.expression.erasure.Right {
    
    @.java.lang.Override
    public final void left() {
    }
    
    @.java.lang.Override
    public final void top() {
    }
    
    @.java.lang.Override
    public final void right() {
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    private final long rightAttribute;
    
    @.java.lang.Override
    public final long getRightAttribute() {
        return rightAttribute;
    }
    private final .java.lang.Object leftAndRightAttribute;
    
    @.java.lang.Override
    public final .java.lang.Object getLeftAndRightAttribute() {
        return leftAndRightAttribute;
    }
    
    @.java.lang.Override
    public final .java.lang.Object leftAndRightMethod(final .java.lang.Object param) {
        return param;
    }
    
    CMiddle() {
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
        this.rightAttribute = 1L;
        this.leftAndRightAttribute = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
}
class CLeft implements com.redhat.ceylon.compiler.java.test.expression.erasure.Left {
    
    @.java.lang.Override
    public final void left() {
    }
    
    @.java.lang.Override
    public final void top() {
    }
    private final long topAttribute;
    
    @.java.lang.Override
    public final long getTopAttribute() {
        return topAttribute;
    }
    private final long leftAttribute;
    
    @.java.lang.Override
    public final long getLeftAttribute() {
        return leftAttribute;
    }
    private final .java.lang.Object leftAndRightAttribute;
    
    @.java.lang.Override
    public final .java.lang.Object getLeftAndRightAttribute() {
        return leftAndRightAttribute;
    }
    
    @.java.lang.Override
    public final .java.lang.Object leftAndRightMethod(final .java.lang.Object param) {
        return param;
    }
    
    CLeft() {
        this.topAttribute = 1L;
        this.leftAttribute = 1L;
        this.leftAndRightAttribute = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
    }
}
interface EmptyInterface {
}
final class topLevelLeftAttribute {
    private static com.redhat.ceylon.compiler.java.test.expression.erasure.Left value;
    static {
        value = new com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
    }
    
    static com.redhat.ceylon.compiler.java.test.expression.erasure.Left getTopLevelLeftAttribute() {
        return value;
    }
    
    static void setTopLevelLeftAttribute(com.redhat.ceylon.compiler.java.test.expression.erasure.Left topLevelLeftAttribute) {
        value = topLevelLeftAttribute;
    }
    
    private topLevelLeftAttribute() {
    }
}
class MyException extends .ceylon.language.Exception implements com.redhat.ceylon.compiler.java.test.expression.erasure.EmptyInterface {
    
    MyException(ceylon.language.String m, .java.lang.Throwable x) {
        super(m, x);
    }
}
class Test {
    
    private final void takesTop(final com.redhat.ceylon.compiler.java.test.expression.erasure.Top top) {
    }
    
    private final void takesLeft(final com.redhat.ceylon.compiler.java.test.expression.erasure.Left left) {
    }
    
    private final .java.lang.Object givesLeftAndRight() {
        return new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
    }
    private com.redhat.ceylon.compiler.java.test.expression.erasure.Left leftAttribute;
    
    public final com.redhat.ceylon.compiler.java.test.expression.erasure.Left getLeftAttribute() {
        return leftAttribute;
    }
    
    public final void setLeftAttribute(com.redhat.ceylon.compiler.java.test.expression.erasure.Left leftAttribute) {
        this.leftAttribute = leftAttribute;
    }
    private .java.lang.Object middleAttribute;
    
    public final .java.lang.Object getMiddleAttribute() {
        return middleAttribute;
    }
    
    public final void setMiddleAttribute(.java.lang.Object middleAttribute) {
        this.middleAttribute = middleAttribute;
    }
    private .java.lang.Object n;
    
    public final .java.lang.Object getN() {
        return n;
    }
    
    public final void setN(.java.lang.Object n) {
        this.n = n;
    }
    private .java.lang.Object m;
    
    public final .java.lang.Object getM() {
        return m;
    }
    
    public final void setM(.java.lang.Object m) {
        this.m = m;
    }
    
    private final void testUnion() {
        final .java.lang.Object middle = new com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).top();
        final long n1 = ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).getTopAttribute();
        takesTop((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle);
        .java.lang.Object $middle$0;
        if (($middle$0 = middle) instanceof com.redhat.ceylon.compiler.java.test.expression.erasure.Left) {
            final com.redhat.ceylon.compiler.java.test.expression.erasure.Left $middle$1 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)$middle$0;
            final long n2 = $middle$1.getLeftAttribute();
            $middle$1.left();
            takesLeft($middle$1);
        }
    }
    
    private final com.redhat.ceylon.compiler.java.test.expression.erasure.Left testIntersection(final .java.lang.Object p1, final .java.lang.Object p1OrNothing, final ceylon.language.Iterable tops, final ceylon.language.Iterable topsOrNothing, final .java.lang.Object erasedTest) {
        final .java.lang.Object middle = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).top();
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle).left();
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)middle).right();
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)givesLeftAndRight()).top();
        new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle().top();
        long sync;
        sync = ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle).getTopAttribute();
        sync = ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle).getLeftAttribute();
        sync = ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)middle).getRightAttribute();
        sync = ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)givesLeftAndRight()).getTopAttribute();
        sync = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle().getTopAttribute();
        takesTop((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle);
        takesLeft((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle);
        (let com.redhat.ceylon.compiler.java.test.expression.erasure.Top $arg$2$0 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Top)middle in takesTop($arg$2$0); null);
        (let com.redhat.ceylon.compiler.java.test.expression.erasure.Left $arg$3$0 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle in takesLeft($arg$3$0); null);
        .java.lang.Object middleVar = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
        final com.redhat.ceylon.compiler.java.test.expression.erasure.Left left = (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        final com.redhat.ceylon.compiler.java.test.expression.erasure.Left left2;
        left2 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        com.redhat.ceylon.compiler.java.test.expression.erasure.Left left3 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        left3 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar;
        setLeftAttribute((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar);
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setLeftAttribute((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middleVar);
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)(let .java.lang.Object $ceylontmpop4 = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle() in middleVar = $ceylontmpop4; $ceylontmpop4)).left();
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)(let com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE5 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest,.java.lang.Object $ceylontmpopV6 = middleVar in $ceylontmpopE5.setMiddleAttribute($ceylontmpopV6); $ceylontmpopV6)).left();
        final ceylon.language.Entry entry = new ceylon.language.Entry(p1, p1);
        if (true) {
            final .java.lang.Object x = new com.redhat.ceylon.compiler.java.test.expression.erasure.MyException(null, null);
            ((.java.lang.Throwable)x).printStackTrace();
            final .java.lang.Throwable cause = ((.java.lang.Throwable)x).getCause();
            throw (.java.lang.Throwable)x;
        }
        return (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)middle;
    }
    
    private final void testNullHandlingOperators(final .java.lang.Object p1, final .java.lang.Object p1OrNothing) {
        .java.lang.Object $p1OrNothing$7;
        if (($p1OrNothing$7 = p1OrNothing) != null) {
            final .java.lang.Object $p1OrNothing$8 = $p1OrNothing$7;
        }
        boolean bSync;
        bSync = p1OrNothing != null;
        final .java.lang.Object p2 = (let .java.lang.Object $ceylontmp9 = p1OrNothing in $ceylontmp9 != null ? $ceylontmp9 : p1);
        final long n = ((ceylon.language.Integer)(let .java.lang.Object $ceylontmp10 = p1OrNothing in $ceylontmp10 != null ? $ceylontmp10 : p1)).longValue();
    }
    
    private final void testArithmeticOperators(final .java.lang.Object p1, final .java.lang.Object erasedTest) {
        final long unboxed = ((ceylon.language.Integer)p1).longValue();
        final .java.lang.Object boxed = .ceylon.language.Integer.instance(1L);
        .java.lang.Object n = .ceylon.language.Integer.instance(1L);
        n = ((ceylon.language.Summable<ceylon.language.Integer>)n).plus((ceylon.language.Integer)n);
        n = ((ceylon.language.Numeric<ceylon.language.Integer>)n).minus((ceylon.language.Integer)n);
        n = ((ceylon.language.Numeric<ceylon.language.Integer>)n).times((ceylon.language.Integer)n);
        n = (let ceylon.language.Integer $ceylontmpop11 = ((ceylon.language.Summable<ceylon.language.Integer>)n).plus((ceylon.language.Integer)n) in n = $ceylontmpop11; $ceylontmpop11);
        n = (let ceylon.language.Integer $ceylontmpop12 = ((ceylon.language.Numeric<ceylon.language.Integer>)n).minus((ceylon.language.Integer)n) in n = $ceylontmpop12; $ceylontmpop12);
        n = (let ceylon.language.Integer $ceylontmpop13 = ((ceylon.language.Numeric<ceylon.language.Integer>)n).times((ceylon.language.Integer)n) in n = $ceylontmpop13; $ceylontmpop13);
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setN((let com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE14 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest,ceylon.language.Integer $ceylontmpopV15 = ((ceylon.language.Summable<ceylon.language.Integer>)$ceylontmpopE14.getN()).plus((ceylon.language.Integer)((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).getN()) in $ceylontmpopE14.setN($ceylontmpopV15); $ceylontmpopV15));
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setN((let com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE16 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest,ceylon.language.Integer $ceylontmpopV17 = ((ceylon.language.Numeric<ceylon.language.Integer>)$ceylontmpopE16.getN()).minus((ceylon.language.Integer)((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).getN()) in $ceylontmpopE16.setN($ceylontmpopV17); $ceylontmpopV17));
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setN((let com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE18 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest,ceylon.language.Integer $ceylontmpopV19 = ((ceylon.language.Numeric<ceylon.language.Integer>)$ceylontmpopE18.getN()).times((ceylon.language.Integer)((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).getN()) in $ceylontmpopE18.setN($ceylontmpopV19); $ceylontmpopV19));
        n = (let ceylon.language.Integer $ceylontmpop20 = (ceylon.language.Integer)n in n = $ceylontmpop20.getSuccessor(); $ceylontmpop20);
        n = (let ceylon.language.Integer $ceylontmpop21 = ((ceylon.language.Ordinal<? extends ceylon.language.Integer>)n).getSuccessor() in n = $ceylontmpop21; $ceylontmpop21);
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setN((let com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE22 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest,ceylon.language.Integer $ceylontmpopV23 = (ceylon.language.Integer)$ceylontmpopE22.getN() in $ceylontmpopE22.setN($ceylontmpopV23.getSuccessor()); $ceylontmpopV23));
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setN((let com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE24 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest,ceylon.language.Integer $ceylontmpopV25 = ((ceylon.language.Ordinal<? extends ceylon.language.Integer>)$ceylontmpopE24.getN()).getSuccessor() in $ceylontmpopE24.setN($ceylontmpopV25); $ceylontmpopV25));
        .java.lang.Object m = .ceylon.language.Integer.instance(1L);
        m = ((ceylon.language.Integral<ceylon.language.Integer>)m).remainder((ceylon.language.Integer)m);
        m = (let ceylon.language.Integer $ceylontmpop26 = ((ceylon.language.Integral<ceylon.language.Integer>)m).remainder((ceylon.language.Integer)m) in m = $ceylontmpop26; $ceylontmpop26);
        ((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).setM((let com.redhat.ceylon.compiler.java.test.expression.erasure.Test $ceylontmpopE27 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest,ceylon.language.Integer $ceylontmpopV28 = ((ceylon.language.Integral<ceylon.language.Integer>)$ceylontmpopE27.getM()).remainder((ceylon.language.Integer)((com.redhat.ceylon.compiler.java.test.expression.erasure.Test)erasedTest).getM()) in $ceylontmpopE27.setM($ceylontmpopV28); $ceylontmpopV28));
        final long i1 = ((ceylon.language.Invertable<? extends ceylon.language.Integer>)n).getNegativeValue().longValue();
        final long i2 = ((ceylon.language.Invertable<? extends ceylon.language.Integer>)n).getPositiveValue().longValue();
    }
    
    private final void testComparisonOperators(final .java.lang.Object p1, final .java.lang.Object erasedTest, final .java.lang.Object container) {
        boolean sync;
        sync = erasedTest == erasedTest;
        sync = p1.equals(p1);
        sync = ((ceylon.language.Comparable<? super ceylon.language.Integer>)p1).compare((ceylon.language.Integer)p1).smallerThan();
        final ceylon.language.Comparison cmp = ((ceylon.language.Comparable<? super ceylon.language.Integer>)p1).compare((ceylon.language.Integer)p1);
        sync = (let .java.lang.Object $ceylontmp29 = p1 in ((ceylon.language.Category)container).contains($ceylontmp29));
        sync = p1 instanceof ceylon.language.Integer;
    }
    
    private final void testSequences(final .java.lang.Object p1, final ceylon.language.Iterable leftsAndRights, final ceylon.language.Iterable leftsAndRightsEntries, final ceylon.language.Iterable topsOrNothing) {
        final ceylon.language.Iterable naturals = new ceylon.language.ArraySequence(p1);
        final ceylon.language.Integer n5 = (ceylon.language.Integer)((ceylon.language.Correspondence)naturals).item((ceylon.language.Integer)p1);
        final com.redhat.ceylon.compiler.java.test.expression.erasure.Top t = (com.redhat.ceylon.compiler.java.test.expression.erasure.Top)((ceylon.language.Correspondence)leftsAndRights).item((ceylon.language.Integer)p1);
        final ceylon.language.Iterable naturalsOrNothing = new ceylon.language.ArraySequence(p1);
        final ceylon.language.Integer n52 = (ceylon.language.Integer)(let ceylon.language.Correspondence $ceylontmpsafeaccess30 = (ceylon.language.Correspondence)naturalsOrNothing in $ceylontmpsafeaccess30 != null ? $ceylontmpsafeaccess30.item((ceylon.language.Integer)p1) : null);
        final com.redhat.ceylon.compiler.java.test.expression.erasure.Top t2 = (com.redhat.ceylon.compiler.java.test.expression.erasure.Top)(let ceylon.language.Correspondence $ceylontmpsafeaccess31 = (ceylon.language.Correspondence)topsOrNothing in $ceylontmpsafeaccess31 != null ? $ceylontmpsafeaccess31.item((ceylon.language.Integer)p1) : null);
        ceylon.language.Iterable subrange;
        subrange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable>)naturals).span((ceylon.language.Integer)p1, (ceylon.language.Integer)p1);
        subrange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable>)naturals).span((ceylon.language.Integer)p1, null);
        final ceylon.language.Iterable<? extends ceylon.language.Integer> plainIntegers = new ceylon.language.ArraySequence(p1);
        .java.lang.Object $elem$32;
        for (ceylon.language.Iterator $it$iter$33 = naturals.getIterator(); !(($elem$32 = $it$iter$33.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object it = (.java.lang.Object)$elem$32;
            final ceylon.language.Numeric<ceylon.language.Integer> n6 = (ceylon.language.Numeric<ceylon.language.Integer>)it;
        }
        .java.lang.Object $elem$34;
        for (ceylon.language.Iterator<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left> $itLeft$iter$35 = leftsAndRights.getIterator(); !(($elem$34 = $itLeft$iter$35.next()) instanceof .ceylon.language.Finished); ) {
            final com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft = (com.redhat.ceylon.compiler.java.test.expression.erasure.Left)$elem$34;
            itLeft.top();
            itLeft.left();
        }
        .java.lang.Object $elem$36;
        for (ceylon.language.Iterator $itErased$iter$37 = leftsAndRights.getIterator(); !(($elem$36 = $itErased$iter$37.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErased = (.java.lang.Object)$elem$36;
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased).top();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased).left();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased).right();
        }
        .java.lang.Object $elem$38;
        for (ceylon.language.Iterator $itErasedValue$iter$39 = leftsAndRights.getIterator(); !(($elem$38 = $itErasedValue$iter$39.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErasedValue = (.java.lang.Object)$elem$38;
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue).top();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue).left();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue).right();
        }
        .java.lang.Object $elem$40;
        for (ceylon.language.Iterator<? extends ceylon.language.Entry<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left>> $itLeft1$iter$41 = leftsAndRightsEntries.getIterator(); !(($elem$40 = $itLeft1$iter$41.next()) instanceof .ceylon.language.Finished); ) {
            final com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft1 = ((ceylon.language.Entry<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left>)$elem$40).getKey();
            final com.redhat.ceylon.compiler.java.test.expression.erasure.Left itLeft2 = ((ceylon.language.Entry<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left, ? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left>)$elem$40).getItem();
            itLeft1.top();
            itLeft1.left();
            itLeft2.top();
            itLeft2.left();
        }
        .java.lang.Object $elem$42;
        for (ceylon.language.Iterator<? extends ceylon.language.Entry> $itErased1$iter$43 = leftsAndRightsEntries.getIterator(); !(($elem$42 = $itErased1$iter$43.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErased1 = ((ceylon.language.Entry)$elem$42).getKey();
            final .java.lang.Object itErased2 = ((ceylon.language.Entry)$elem$42).getItem();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased1).top();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased1).left();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased1).right();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErased2).top();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErased2).left();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErased2).right();
        }
        .java.lang.Object $elem$44;
        for (ceylon.language.Iterator<? extends ceylon.language.Entry> $itErasedValue1$iter$45 = leftsAndRightsEntries.getIterator(); !(($elem$44 = $itErasedValue1$iter$45.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object itErasedValue1 = ((ceylon.language.Entry)$elem$44).getKey();
            final .java.lang.Object itErasedValue2 = ((ceylon.language.Entry)$elem$44).getItem();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue1).top();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue1).left();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue1).right();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)itErasedValue2).top();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Left)itErasedValue2).left();
            ((com.redhat.ceylon.compiler.java.test.expression.erasure.Right)itErasedValue2).right();
        }
        final ceylon.language.Sequence<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Top> topSequence = new ceylon.language.ArraySequence<com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle>(new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle());
        .java.lang.Object $elem$46;
        for (ceylon.language.Iterator<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Top> $it$iter$47 = topSequence.getIterator(); !(($elem$46 = $it$iter$47.next()) instanceof .ceylon.language.Finished); ) {
            final com.redhat.ceylon.compiler.java.test.expression.erasure.Top it = (com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$elem$46;
            it.top();
        }
        long sync;
        sync = ((ceylon.language.Sized)naturals).getSize();
        sync = ((ceylon.language.Sequence)leftsAndRights).getSize();
        ceylon.language.Iterable $naturals$48;
        if (($naturals$48 = naturals) instanceof ceylon.language.Sequence) {
            final ceylon.language.Sequence $naturals$49 = (ceylon.language.Sequence)$naturals$48;
        }
        boolean bSync;
        bSync = naturals instanceof ceylon.language.Sequence;
        final ceylon.language.Iterable<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left> spreadMember = (let ceylon.language.Sequence $spread$50$0 = (ceylon.language.Sequence)leftsAndRights,int $spread$50$2 = (int)$spread$50$0.getSize(),.java.lang.Object[] $spread$50$4 = new .java.lang.Object[$spread$50$2] in for (int $index$51 = 0; $index$51 < $spread$50$2; $index$51++) $spread$50$4[$index$51] = ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$spread$50$0.item(.ceylon.language.Integer.instance($index$51))).getLeftAndRightAttribute();; new .ceylon.language.ArraySequence($spread$50$4));
        ceylon.language.Iterable<? extends com.redhat.ceylon.compiler.java.test.expression.erasure.Left> spreadInvocation;
        spreadInvocation = (let ceylon.language.Sequence $spread$52$0 = (ceylon.language.Sequence)leftsAndRights,int $spread$52$2 = (int)$spread$52$0.getSize(),.java.lang.Object[] $spread$52$4 = new .java.lang.Object[$spread$52$2] in for (int $index$53 = 0; $index$53 < $spread$52$2; $index$53++) $spread$52$4[$index$53] = ((com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$spread$52$0.item(.ceylon.language.Integer.instance($index$53))).leftAndRightMethod(new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle());; new .ceylon.language.ArraySequence($spread$52$4));
        spreadInvocation = (let ceylon.language.Sequence $spread$55$0 = (ceylon.language.Sequence)leftsAndRights,int $spread$55$2 = (int)$spread$55$0.getSize(),.java.lang.Object[] $spread$55$4 = new .java.lang.Object[$spread$55$2] in for (int $index$56 = 0; $index$56 < $spread$55$2; $index$56++) $spread$55$4[$index$56] = (let com.redhat.ceylon.compiler.java.test.expression.erasure.Top $arg$54$callable$ = (com.redhat.ceylon.compiler.java.test.expression.erasure.Top)$spread$55$0.item(.ceylon.language.Integer.instance($index$56)),.java.lang.Object $arg$54$0 = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle() in $arg$54$callable$.leftAndRightMethod($arg$54$0));; new .ceylon.language.ArraySequence($spread$55$4));
    }
    
    Test() {
        this.leftAttribute = new com.redhat.ceylon.compiler.java.test.expression.erasure.CLeft();
        this.middleAttribute = new com.redhat.ceylon.compiler.java.test.expression.erasure.CMiddle();
        this.n = .ceylon.language.Integer.instance(1L);
        this.m = .ceylon.language.Integer.instance(1L);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new .com.redhat.ceylon.compiler.java.test.expression.erasure.Test();
    }
}