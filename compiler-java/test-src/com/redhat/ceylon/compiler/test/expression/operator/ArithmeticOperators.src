package com.redhat.ceylon.compiler.test.expression.operator;

public class ArithmeticOperators {
    private long n1;
    
    private final long getN1() {
        return this.n1;
    }
    
    private final void setN1(long n1) {
        this.n1 = n1;
    }
    private long n2;
    
    private final long getN2() {
        return this.n2;
    }
    
    private final void setN2(long n2) {
        this.n2 = n2;
    }
    private int i1;
    
    private final int getI1() {
        return this.i1;
    }
    
    private final void setI1(int i1) {
        this.i1 = i1;
    }
    private int i2;
    
    private final int getI2() {
        return this.i2;
    }
    
    private final void setI2(int i2) {
        this.i2 = i2;
    }
    private double f1;
    
    private final double getF1() {
        return this.f1;
    }
    
    private final void setF1(double f1) {
        this.f1 = f1;
    }
    private double f2;
    
    private final double getF2() {
        return this.f2;
    }
    
    private final void setF2(double f2) {
        this.f2 = f2;
    }
    
    private final void arithmetic() {
        // Wrong (.ceylon.language.Natural.instance(getN1()) = .ceylon.language.Natural.instance(getN1()).getSuccessor()).getPredecessor();
        // Wrong .ceylon.language.Natural.instance(getN1()) = .ceylon.language.Natural.instance(getN1()).getSuccessor();
        // Wrong (.ceylon.language.Natural.instance(getN1()) = .ceylon.language.Natural.instance(getN1()).getPredecessor()).getSuccessor();
        // Wrong .ceylon.language.Natural.instance(getN1()) = .ceylon.language.Natural.instance(getN1()).getPredecessor();
        setI1(.ceylon.language.Natural.instance(getN1()).getPositiveValue().intValue());
        setI1(.ceylon.language.Natural.instance(getN1()).getNegativeValue().intValue());
        // Wrong needs cast setI1(.ceylon.language.Natural.instance(getN1()).plus(.ceylon.language.Integer.instance(getI2())).intValue());
        // Wrong needs cast setI1(.ceylon.language.Natural.instance(getN1()).minus(.ceylon.language.Integer.instance(getI2())).intValue());
        // Wrong needs cast setI1(.ceylon.language.Natural.instance(getN1()).times(.ceylon.language.Integer.instance(getI2())).intValue());
        // Wrong needs cast setI1(.ceylon.language.Natural.instance(getN1()).divided(.ceylon.language.Integer.instance(getI2())).intValue());
        // Wrong needs cast setI1(.ceylon.language.Natural.instance(getN1()).remainder(.ceylon.language.Integer.instance(getI2())).intValue());
        // Wrong needs cast setF1(.ceylon.language.Natural.instance(getN1()).power(.ceylon.language.Float.instance(getF2())).doubleValue());
        // Wrong needs cast setI1(.ceylon.language.Natural.instance(getI1()).plus(.ceylon.language.Natural.instance(getN2())).longValue());
        // Wrong needs cast setI1(.ceylon.language.Integer.instance(getI1()).minus(.ceylon.language.Integer.instance(getI2())).intValue());
        // Wrong needs cast setI1(.ceylon.language.Integer.instance(getI1()).times(.ceylon.language.Integer.instance(getI1())).intValue());
        // Wrong needs cast setF1(.ceylon.language.Float.instance(getF1()).divided(.ceylon.language.Float.instance(getF2())).doubleValue());
        // Wrong needs cast setI1(.ceylon.language.Integer.instance(getI1()).remainder(.ceylon.language.Integer.instance(getI2())).intValue());
    }
    
    public ArithmeticOperators() {
        boolean b1 = false;
        boolean b2 = false;
        this.n1 = 0L;
        this.n2 = 0L;
        this.i1 = 0;
        this.i2 = 0;
        this.f1 = 0.0;
        this.f2 = 0.0;
    }
}