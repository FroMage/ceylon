package com.redhat.ceylon.compiler.test.expression.operator;

public abstract class LogicalOperatorsParent<B> {
    
    public abstract B getBoxedB1();
    
    public abstract void setBoxedB1(B boxedB1);
    
    public abstract B getBoxedB2();
    
    public abstract void setBoxedB2(B boxedB2);
    
    public LogicalOperatorsParent() {
    }
}
public class LogicalOperators extends com.redhat.ceylon.compiler.test.expression.operator.LogicalOperatorsParent<ceylon.language.Boolean> {
    private boolean b1;
    
    private final boolean getB1() {
        return b1;
    }
    
    private final void setB1(boolean b1) {
        this.b1 = b1;
    }
    private boolean b2;
    
    private final boolean getB2() {
        return b2;
    }
    
    private final void setB2(boolean b2) {
        this.b2 = b2;
    }
    private ceylon.language.Boolean boxedB1;
    
    @.java.lang.Override
    public final ceylon.language.Boolean getBoxedB1() {
        return boxedB1;
    }
    
    @.java.lang.Override
    public final void setBoxedB1(ceylon.language.Boolean boxedB1) {
        this.boxedB1 = boxedB1;
    }
    private ceylon.language.Boolean boxedB2;
    
    @.java.lang.Override
    public final ceylon.language.Boolean getBoxedB2() {
        return boxedB2;
    }
    
    @.java.lang.Override
    public final void setBoxedB2(ceylon.language.Boolean boxedB2) {
        this.boxedB2 = boxedB2;
    }
    
    private final void logical() {
        setB1(!getB2());
        setB1(true || getB2());
        setB1(false && getB2());
        setB1((let boolean $ceylontmpop0 = getB1() || getB2() in setB1($ceylontmpop0); $ceylontmpop0));
        setB1((let boolean $ceylontmpop1 = getB1() && getB2() in setB1($ceylontmpop1); $ceylontmpop1));
        setB1((let com.redhat.ceylon.compiler.test.expression.operator.LogicalOperators $ceylontmpopE2 = this,boolean $ceylontmpopV3 = $ceylontmpopE2.getB1() || this.getB2() in $ceylontmpopE2.setB1($ceylontmpopV3); $ceylontmpopV3));
        setB1((let com.redhat.ceylon.compiler.test.expression.operator.LogicalOperators $ceylontmpopE4 = this,boolean $ceylontmpopV5 = $ceylontmpopE4.getB1() && this.getB2() in $ceylontmpopE4.setB1($ceylontmpopV5); $ceylontmpopV5));
    }
    
    private final void logicalBoxed() {
        setBoxedB1(.ceylon.language.Boolean.instance(!getBoxedB2().booleanValue()));
        setBoxedB1(.ceylon.language.Boolean.instance(true || getBoxedB2().booleanValue()));
        setBoxedB1(.ceylon.language.Boolean.instance(false && getBoxedB2().booleanValue()));
        setBoxedB1(.ceylon.language.Boolean.instance((let boolean $ceylontmpop6 = getBoxedB1().booleanValue() || getBoxedB2().booleanValue() in setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpop6)); $ceylontmpop6)));
        setBoxedB1(.ceylon.language.Boolean.instance((let boolean $ceylontmpop7 = getBoxedB1().booleanValue() && getBoxedB2().booleanValue() in setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpop7)); $ceylontmpop7)));
        setBoxedB1(.ceylon.language.Boolean.instance((let com.redhat.ceylon.compiler.test.expression.operator.LogicalOperators $ceylontmpopE8 = this,boolean $ceylontmpopV9 = $ceylontmpopE8.getBoxedB1().booleanValue() || this.getBoxedB2().booleanValue() in $ceylontmpopE8.setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpopV9)); $ceylontmpopV9)));
        setBoxedB1(.ceylon.language.Boolean.instance((let com.redhat.ceylon.compiler.test.expression.operator.LogicalOperators $ceylontmpopE10 = this,boolean $ceylontmpopV11 = $ceylontmpopE10.getBoxedB1().booleanValue() && this.getBoxedB2().booleanValue() in $ceylontmpopE10.setBoxedB1(.ceylon.language.Boolean.instance($ceylontmpopV11)); $ceylontmpopV11)));
    }
    
    public LogicalOperators() {
        super();
        this.b1 = false;
        this.b2 = false;
        this.boxedB1 = .ceylon.language.Boolean.instance(getB1());
        this.boxedB2 = .ceylon.language.Boolean.instance(getB2());
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new LogicalOperators();
    }
}