package com.redhat.ceylon.compiler.test.expression.operator;

public class SequenceOperators {
    private final ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> c1;
    
    private final ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> getC1() {
        return c1;
    }
    private final ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> c2;
    
    private final ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> getC2() {
        return c2;
    }
    private final ceylon.language.Iterable<? extends ceylon.language.String> sequence;
    
    private final ceylon.language.Iterable<? extends ceylon.language.String> getSequence() {
        return sequence;
    }
    
    private final <T>T box(final T x) {
        return x;
    }
    
    private final void testSequence(final ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> c1, final ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> c2) {
        ceylon.language.String s = c1.item(.ceylon.language.Integer.instance(1L));
        s = this.getC1().item(.ceylon.language.Integer.instance(1L));
        s = c1.item(<ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L)));
        s = (let ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> $ceylontmpsafeaccess0 = c2 in $ceylontmpsafeaccess0 != null ? $ceylontmpsafeaccess0.item(.ceylon.language.Integer.instance(1L)) : null);
        s = (let ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> $ceylontmpsafeaccess1 = this.getC2() in $ceylontmpsafeaccess1 != null ? $ceylontmpsafeaccess1.item(.ceylon.language.Integer.instance(1L)) : null);
        s = (let ceylon.language.Correspondence<? super ceylon.language.Integer, ? extends ceylon.language.String> $ceylontmpsafeaccess2 = c2 in $ceylontmpsafeaccess2 != null ? $ceylontmpsafeaccess2.item(<ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L))) : null);
        final ceylon.language.Iterable<? extends ceylon.language.String> sequence = new ceylon.language.ArraySequence<ceylon.language.String>(.ceylon.language.String.instance("foo"), .ceylon.language.String.instance("bar"));
        ceylon.language.Iterable<? extends ceylon.language.String> subrange;
        subrange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable<? extends ceylon.language.String>>)sequence).span(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        subrange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable<? extends ceylon.language.String>>)this.getSequence()).span(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L));
        subrange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable<? extends ceylon.language.String>>)sequence).span(<ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L)), <ceylon.language.Integer>box(.ceylon.language.Integer.instance(2L)));
        ceylon.language.Iterable<? extends ceylon.language.String> upperRange;
        upperRange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable<? extends ceylon.language.String>>)sequence).span(.ceylon.language.Integer.instance(1L), null);
        upperRange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable<? extends ceylon.language.String>>)this.getSequence()).span(.ceylon.language.Integer.instance(1L), null);
        upperRange = ((ceylon.language.Ranged<? super ceylon.language.Integer, ? extends ceylon.language.Iterable<? extends ceylon.language.String>>)sequence).span(<ceylon.language.Integer>box(.ceylon.language.Integer.instance(1L)), null);
        final ceylon.language.Iterable<? extends ceylon.language.Integer> spreadMemberWithUnboxedType = (let ceylon.language.Sequence<? extends ceylon.language.String> $spread$3$0 = (ceylon.language.Sequence<? extends ceylon.language.String>)sequence,int $spread$3$2 = (int)$spread$3$0.getSize(),ceylon.language.Integer[] $spread$3$4 = new ceylon.language.Integer[$spread$3$2] in for (int $index$4 = 0; $index$4 < $spread$3$2; $index$4++) $spread$3$4[$index$4] = .ceylon.language.Integer.instance($spread$3$0.item(.ceylon.language.Integer.instance($index$4)).getSize());; new .ceylon.language.ArraySequence<ceylon.language.Integer>($spread$3$4));
        final ceylon.language.Iterable<? extends ceylon.language.Integer> intSequence = new ceylon.language.ArraySequence<ceylon.language.Integer>(.ceylon.language.Integer.instance(1L));
        final ceylon.language.Iterable<? extends ceylon.language.Integer> spreadMemberWithBoxedType = (let ceylon.language.Sequence<? extends ceylon.language.Integer> $spread$5$0 = (ceylon.language.Sequence<? extends ceylon.language.Integer>)intSequence,int $spread$5$2 = (int)$spread$5$0.getSize(),ceylon.language.Integer[] $spread$5$4 = new ceylon.language.Integer[$spread$5$2] in for (int $index$6 = 0; $index$6 < $spread$5$2; $index$6++) $spread$5$4[$index$6] = $spread$5$0.item(.ceylon.language.Integer.instance($index$6)).getWholePart();; new .ceylon.language.ArraySequence<ceylon.language.Integer>($spread$5$4));
        ceylon.language.Iterable<? extends ceylon.language.Character> spreadInvoke;
        spreadInvoke = (let ceylon.language.Sequence<? extends ceylon.language.String> $spread$7$0 = (ceylon.language.Sequence<? extends ceylon.language.String>)sequence,int $spread$7$2 = (int)$spread$7$0.getSize(),ceylon.language.Character[] $spread$7$4 = new ceylon.language.Character[$spread$7$2] in for (int $index$8 = 0; $index$8 < $spread$7$2; $index$8++) $spread$7$4[$index$8] = $spread$7$0.item(.ceylon.language.Integer.instance($index$8)).item(.ceylon.language.Integer.instance(0L));; new .ceylon.language.ArraySequence<ceylon.language.Character>($spread$7$4));
        spreadInvoke = (let ceylon.language.Sequence<? extends ceylon.language.String> $spread$10$0 = (ceylon.language.Sequence<? extends ceylon.language.String>)sequence,int $spread$10$2 = (int)$spread$10$0.getSize(),ceylon.language.Character[] $spread$10$4 = new ceylon.language.Character[$spread$10$2] in for (int $index$11 = 0; $index$11 < $spread$10$2; $index$11++) $spread$10$4[$index$11] = (let ceylon.language.String $arg$9$callable$ = $spread$10$0.item(.ceylon.language.Integer.instance($index$11)),ceylon.language.Integer $arg$9$0 = .ceylon.language.Integer.instance(0L) in $arg$9$callable$.item($arg$9$0));; new .ceylon.language.ArraySequence<ceylon.language.Character>($spread$10$4));
    }
    
    public SequenceOperators() {
        this.c1 = new ceylon.language.ArraySequence<ceylon.language.String>(.ceylon.language.String.instance(""));
        this.c2 = new ceylon.language.ArraySequence<ceylon.language.String>(.ceylon.language.String.instance(""));
        this.sequence = ceylon.language.$empty.getEmpty();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        new SequenceOperators();
    }
}