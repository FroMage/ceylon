package com.redhat.ceylon.compiler.test.expression.invoke;

public final class innerMethodInvocation {
    
    private innerMethodInvocation() {
    }
    
    public static void innerMethodInvocation() {
        
        final class fib {
            
            private fib() {
            }
            
            long fib(final long n) {
                if (.ceylon.language.Integer.instance(n).equals(.ceylon.language.Integer.instance(0L))) {
                    return 1L;
                } else {
                    return .ceylon.language.Integer.instance(n).times(.ceylon.language.Integer.instance(fib(.ceylon.language.Integer.instance(n).getPredecessor().longValue()))).longValue();
                }
            }
        }
        final fib fib = new fib();
        for (ceylon.language.Iterator<? extends ceylon.language.Integer> $n$iter$0 = new ceylon.language.Range<ceylon.language.Integer>(.ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(50L)).getIterator(); $n$iter$0 != null; $n$iter$0 = $n$iter$0.getTail()) {
            final long n = $n$iter$0.getHead().longValue();
            .ceylon.language.print.print(.ceylon.language.String.instance("n! = ").plus(.ceylon.language.String.instance(.ceylon.language.Integer.instance(fib.fib(n)).toString())));
        }
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process.getProcess().setupArguments(args);
        innerMethodInvocation();
    }
}