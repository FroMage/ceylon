package com.redhat.ceylon.compiler.java.test.interop;

final class bug6632_ {
    
    private bug6632_() {
    }
    
    static void bug6632(final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Callable<? extends .ceylon.language.Float>>[] entries, final .ceylon.language.Sequence<? extends .java.lang.Object>[] twoTuple, final .ceylon.language.Sequence<? extends .java.lang.Object>[] moreTuple) {
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.Callable<? extends .ceylon.language.Float>>[] array$1 = entries;
        loop_0: for (int i$3 = 0; i$3 < array$1.length; i$3++) {
            final .ceylon.language.Callable<? extends .ceylon.language.Float> aggregator = (.ceylon.language.Callable<? extends .ceylon.language.Float>)(.ceylon.language.Callable)((.ceylon.language.Entry).com.redhat.ceylon.compiler.java.Util.checkNull(array$1[i$3])).getItem();
            final long i = ((.ceylon.language.Integer)((.ceylon.language.Entry).com.redhat.ceylon.compiler.java.Util.checkNull(array$1[i$3])).getKey()).longValue();
            aggregator.$call$((.java.lang.Object).ceylon.language.Integer.instance(i));
        }
        final .ceylon.language.Sequence<? extends .java.lang.Object>[] array$5 = (.ceylon.language.Sequence<? extends .java.lang.Object>[])(.ceylon.language.Sequence[])twoTuple;
        loop_1: for (int i$7 = 0; i$7 < array$5.length; i$7++) {
            final .ceylon.language.Callable<? extends .ceylon.language.Float> aggregator = (.ceylon.language.Callable<? extends .ceylon.language.Float>)(.ceylon.language.Callable)((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.checkNull(array$5[i$7])).getFromFirst(1);
            final long i = ((.ceylon.language.Integer)((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.checkNull(array$5[i$7])).getFromFirst(0)).longValue();
            aggregator.$call$((.java.lang.Object).ceylon.language.Integer.instance(1L));
        }
        final .ceylon.language.Sequence<? extends .java.lang.Object>[] array$9 = (.ceylon.language.Sequence<? extends .java.lang.Object>[])(.ceylon.language.Sequence[])moreTuple;
        loop_2: for (int i$11 = 0; i$11 < array$9.length; i$11++) {
            final .ceylon.language.Sequential<? extends .ceylon.language.Callable<? extends .ceylon.language.Float>> aggregators = (.ceylon.language.Sequential<? extends .ceylon.language.Callable<? extends .ceylon.language.Float>>)(.ceylon.language.Sequential)((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.checkNull(array$9[i$11])).skip(2).sequence();
            final .ceylon.language.Callable<? extends .ceylon.language.Float> aggregator = (.ceylon.language.Callable<? extends .ceylon.language.Float>)(.ceylon.language.Callable)((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.checkNull(array$9[i$11])).getFromFirst(1);
            final long i = ((.ceylon.language.Integer)((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.checkNull(array$9[i$11])).getFromFirst(0)).longValue();
            aggregator.$call$((.java.lang.Object).ceylon.language.Integer.instance(i));
            final .ceylon.language.Iterable<? extends .ceylon.language.Callable<? extends .ceylon.language.Float>, ? extends .java.lang.Object> iterable$14 = aggregators;
            final boolean isTuple$15 = iterable$14 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$14).$getArray$() != null;
            .java.lang.Object elem$13 = null;
            int i$16 = 0;
            final int length$17;
            if (isTuple$15) {
                length$17 = (int)iterable$14.getSize();
            } else {
                length$17 = 0;
            }
            .ceylon.language.Iterator<? extends .ceylon.language.Callable<? extends .ceylon.language.Float>> agg$iterator$$18 = isTuple$15 ? null : iterable$14.iterator();
            loop_3: while (isTuple$15 ? i$16 < length$17 : !((elem$13 = agg$iterator$$18.next()) instanceof .ceylon.language.Finished)) {
                if (isTuple$15) elem$13 = iterable$14.getFromFirst(i$16++);
                final .ceylon.language.Callable<? extends .ceylon.language.Float> agg = (.ceylon.language.Callable<? extends .ceylon.language.Float>)(.ceylon.language.Callable)elem$13;
                agg.$call$((.java.lang.Object).ceylon.language.Integer.instance(i));
            }
        }
    }
}