package com.redhat.ceylon.compiler.java.test.statement.swtch;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
class SwitchTupleCase implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    SwitchTupleCase() {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.common.NonNull
    public final .java.lang.String statement(@.com.redhat.ceylon.compiler.java.metadata.Name("strings")
    @.com.redhat.ceylon.common.NonNull
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String[]")
    final .ceylon.language.Sequential<? extends .ceylon.language.String> strings) {
        {
            .ceylon.language.Sequential sel$0 = strings;
            if (sel$0.equals(.ceylon.language.empty_.get_())) {
                return "empty";
            } else if (sel$0 instanceof .ceylon.language.Tuple && sel$0.equals((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                    .ceylon.language.String.instance("a"),
                    .ceylon.language.String.instance("b")}))) {
                return "ab";
            } else {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> strings$1 = (.ceylon.language.Sequential)sel$0;
                return "other";
            }
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.common.NonNull
    public final .java.lang.String expression(@.com.redhat.ceylon.compiler.java.metadata.Name("strings")
    @.com.redhat.ceylon.common.Nullable
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String[]?")
    final .ceylon.language.Sequential<? extends .ceylon.language.String> strings) {
        return (
            let
            {
                .java.lang.String $ceylontmp$ifResult$2;
                {
                    .ceylon.language.Sequential sel$3 = strings;
                    if (sel$3 == null) {
                        $ceylontmp$ifResult$2 = "null";
                    } else if (sel$3.equals(.ceylon.language.empty_.get_())) {
                        $ceylontmp$ifResult$2 = "empty";
                    } else if (sel$3 instanceof .ceylon.language.Tuple && sel$3.equals((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                            .ceylon.language.String.instance("a"),
                            .ceylon.language.String.instance("b")}))) {
                        $ceylontmp$ifResult$2 = "ab";
                    } else {
                        final .java.lang.Object strings$4 = (.java.lang.Object)sel$3;
                        $ceylontmp$ifResult$2 = "other";
                    }
                }
            }
            returning $ceylontmp$ifResult$2;
        );
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchTupleCase.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchTupleCase.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class switchTupleCase_ {
    
    private switchTupleCase_() {
    }
    
    static void switchTupleCase() {
        final .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchTupleCase stc = new .com.redhat.ceylon.compiler.java.test.statement.swtch.SwitchTupleCase();
        if (stc.statement((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()).equals("empty")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.statement([]) == \"empty\""));
        }
        if (stc.statement((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")})).equals("ab")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.statement([\"a\", \"b\"]) == \"ab\""));
        }
        if (stc.statement(new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 2, false){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("a");
                
                case 1: 
                    return .ceylon.language.String.instance("b");
                
                default: 
                    return null;
                
                }
            }
        }.sequence()).equals("other")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.statement({\"a\", \"b\"}.sequence()) == \"other\""));
        }
        if (stc.statement((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("c"),
                .ceylon.language.String.instance("d")})).equals("other")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.statement([\"c\", \"d\"]) == \"other\""));
        }
        if (stc.expression((.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_()).equals("empty")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.expression([]) == \"empty\""));
        }
        if (stc.expression((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")})).equals("ab")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.expression([\"a\", \"b\"]) == \"ab\""));
        }
        if (stc.expression(new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 2, false){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("a");
                
                case 1: 
                    return .ceylon.language.String.instance("b");
                
                default: 
                    return null;
                
                }
            }
        }.sequence()).equals("other")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.expression({\"a\", \"b\"}.sequence()) == \"other\""));
        }
        if (stc.expression((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("c"),
                .ceylon.language.String.instance("d")})).equals("other")) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stc.expression([\"c\", \"d\"]) == \"other\""));
        }
    }
}