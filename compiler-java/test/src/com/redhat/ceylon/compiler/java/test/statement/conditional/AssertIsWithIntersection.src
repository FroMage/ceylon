package com.redhat.ceylon.compiler.java.test.statement.conditional;

class AssertIsIntersection implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    AssertIsIntersection() {
    }
    
    public final void m(final .java.lang.Object x) {
        if (x instanceof .com.redhat.ceylon.compiler.java.test.statement.conditional.Foo && x instanceof .com.redhat.ceylon.compiler.java.test.statement.conditional.BarInterface) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Foo&BarInterface x") + .com.redhat.ceylon.compiler.java.Util.assertIsFailed(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.com.redhat.ceylon.compiler.java.test.statement.conditional.Foo.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.statement.conditional.BarInterface.$TypeDescriptor$), x));
        }
        ((.com.redhat.ceylon.compiler.java.test.statement.conditional.Foo)x).common();
        ((.com.redhat.ceylon.compiler.java.test.statement.conditional.Foo)x).foo();
        ((.com.redhat.ceylon.compiler.java.test.statement.conditional.BarInterface)x).bar();
    }
    
    public final void mvar(final .java.lang.Object y) {
        final .java.lang.Object x$2;
        .java.lang.Object x$1 = null;
        if ((x$1 = y) instanceof .com.redhat.ceylon.compiler.java.test.statement.conditional.Foo && x$1 instanceof .com.redhat.ceylon.compiler.java.test.statement.conditional.BarInterface) {
            x$2 = x$1;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Foo&BarInterface x=y") + .com.redhat.ceylon.compiler.java.Util.assertIsFailed(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection(.com.redhat.ceylon.compiler.java.test.statement.conditional.Foo.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.test.statement.conditional.BarInterface.$TypeDescriptor$), x$1));
        }
        ((.com.redhat.ceylon.compiler.java.test.statement.conditional.Foo)x$2).common();
        ((.com.redhat.ceylon.compiler.java.test.statement.conditional.Foo)x$2).foo();
        ((.com.redhat.ceylon.compiler.java.test.statement.conditional.BarInterface)x$2).bar();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.conditional.AssertIsIntersection.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.conditional.AssertIsIntersection.class);
}