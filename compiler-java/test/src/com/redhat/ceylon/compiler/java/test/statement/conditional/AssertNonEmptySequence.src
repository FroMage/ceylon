package com.redhat.ceylon.compiler.java.test.statement.conditional;

class AssertNonEmptySequence implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    AssertNonEmptySequence() {
    }
    
    public final long m(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> x$1;
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> x$0 = null;
        if ((x$0 = x) instanceof .ceylon.language.Sequence) {
            x$1 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)x$0;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nonempty x"));
        }
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s = x$1;
        return ((.ceylon.language.Integer)(.java.lang.Object)x$1.getFirst()).longValue();
    }
    
    public final long mvar(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s$3;
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> s$2 = null;
        if ((s$2 = x) instanceof .ceylon.language.Sequence) {
            s$3 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)s$2;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nonempty s=x"));
        }
        return ((.ceylon.language.Integer)(.java.lang.Object)s$3.getFirst()).longValue();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.conditional.AssertNonEmptySequence.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.conditional.AssertNonEmptySequence.class);
}