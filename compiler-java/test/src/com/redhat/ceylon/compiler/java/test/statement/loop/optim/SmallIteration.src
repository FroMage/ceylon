package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

class SmallIteration implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    SmallIteration() {
    }
    
    public final void measure() {
        final long start = 0L;
        final int smallLength = 10;
        final long start$1 = start;
        final int length$2 = smallLength;
        loop_0: for (int i$3 = 0; i$3 < length$2; i$3++) {
            final long i = i$3 + start$1;
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(i));
        }
        final int smallStart = 0;
        final int start$5 = smallStart;
        final int length$6 = smallLength;
        loop_1: for (int i$7 = 0; i$7 < length$6; i$7++) {
            final int i = i$7 + start$5;
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(i));
        }
        final long length = 10L;
        final int start$9 = smallStart;
        final long length$10 = length;
        loop_2: for (long i$11 = 0; i$11 < length$10; i$11++) {
            final long i = i$11 + start$9;
            .ceylon.language.print_.print(.ceylon.language.Integer.instance(i));
        }
        long sum = 0L;
        .java.lang.Object elem$13;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$14 = ((.ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object>)(.ceylon.language.Iterable).ceylon.language.measure_.<.ceylon.language.Integer>measure(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(smallStart), smallLength)).iterator();
        loop_3: while (!((elem$13 = i$iterator$$14.next()) instanceof .ceylon.language.Finished)) {
            final int i = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)elem$13).longValue());
            sum += i;
        }
    }
    
    public final void span() {
        final long start = 0L;
        final long end = 10L;
        final long $ceylontmp$first$17 = start;
        final long $ceylontmp$last$18 = end;
        final boolean $ceylontmp$increasing$19 = .ceylon.language.Integer.offset($ceylontmp$last$18, $ceylontmp$first$17) >= 0;
        final long $ceylontmp$incr$20 = $ceylontmp$increasing$19 ? 1L : -1L;
        long i$23 = $ceylontmp$first$17;
        long $ceylontmp$element$22 = $ceylontmp$first$17;
        boolean $ceylontmp$f$21 = false;
        loop_4: do {
            if ($ceylontmp$f$21) $ceylontmp$element$22 += $ceylontmp$incr$20;
            $ceylontmp$f$21 = true;
            i$23 = $ceylontmp$element$22;
            final long i = i$23;
            $ceylontmp$continue$16: do {
                .ceylon.language.print_.print(.ceylon.language.Integer.instance(i));
            }             while (false);
        }         while ($ceylontmp$increasing$19 ? i$23 - $ceylontmp$last$18 != 0L : i$23 - $ceylontmp$last$18 != 0L);
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.SmallIteration.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.SmallIteration.class);
}