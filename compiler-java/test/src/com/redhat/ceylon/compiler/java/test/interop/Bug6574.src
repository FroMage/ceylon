package com.redhat.ceylon.compiler.java.test.interop;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
public final class bug6574_ {
    
    private bug6574_() {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public static void bug6574() {
        final .ceylon.language.Callable<? extends .java.util.List<.ceylon.language.String>> al = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.java.util.List<.ceylon.language.String>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.util.List.class, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), "List<String>(String?*)", (short)0){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> arg0 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                return $calltyped$(arg0);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> arg0$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                return $calltyped$(arg0$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                return $calltyped$($spreadVarargs$(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> arg0$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        $param$0,
                        $param$1}, .ceylon.language.empty_.get_());
                return $calltyped$(arg0$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                return $calltyped$($spreadVarargs$(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), 0, 2, new .java.lang.Object[]{
                        (.ceylon.language.String)$param$0,
                        (.ceylon.language.String)$param$1}, $param$2));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> arg0$variadic$ = (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        $param$0,
                        $param$1,
                        $param$2}, .ceylon.language.empty_.get_());
                return $calltyped$(arg0$variadic$);
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                return $calltyped$($spreadVarargs$(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), 0, 3, new .java.lang.Object[]{
                        (.ceylon.language.String)$param$0,
                        (.ceylon.language.String)$param$1,
                        (.ceylon.language.String)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $call$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .java.util.List<.ceylon.language.String> $callvariadic$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), 1, $param$0));
            }
            
            private .java.util.List<.ceylon.language.String> $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> arg0) {
                return .java.util.Arrays.<.ceylon.language.String>asList((
                    let
                    {
                        .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$0$0 = arg0;
                    }
                    returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$0$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$0$0.getSize())]);
                ));
            }
        };
        if (al.$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{.ceylon.language.String.instance("a")}, .ceylon.language.empty_.get_())).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList(.ceylon.language.String.instance("a"))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\") == Arrays.asList<String>(\"a\")"));
        }
        if (al.$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")}, .ceylon.language.empty_.get_())).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList(.ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\") == Arrays.asList<String>(\"a\", \"b\")"));
        }
        if (al.$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b"),
                .ceylon.language.String.instance("c")}, .ceylon.language.empty_.get_())).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList(.ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\", \"c\") == Arrays.asList<String>(\"a\", \"b\", \"c\")"));
        }
        if (al.$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b"),
                .ceylon.language.String.instance("c"),
                .ceylon.language.String.instance("d")}, .ceylon.language.empty_.get_())).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList(.ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"), .ceylon.language.String.instance("d"))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\", \"c\", \"d\") == Arrays.asList<String>(\"a\", \"b\", \"c\", \"d\")"));
        }
        if (al.$callvariadic$((.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b"),
                .ceylon.language.String.instance("c"),
                .ceylon.language.String.instance("d"),
                .ceylon.language.String.instance("e")}, .ceylon.language.empty_.get_())).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList(.ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"), .ceylon.language.String.instance("d"), .ceylon.language.String.instance("e"))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\", \"c\", \"d\", \"e\") == Arrays.asList<String>(\"a\", \"b\", \"c\", \"d\", \"e\")"));
        }
        final .ceylon.language.Sequential<? extends .ceylon.language.String> x = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("1"),
                .ceylon.language.String.instance("2"),
                .ceylon.language.String.instance("3")});
        if (al.$callvariadic$(x).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$7$0 = x;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$7$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$7$0.getSize())]);
        ))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(*x) == Arrays.asList<String>(*x)"));
        }
        if (al.$callvariadic$(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{.ceylon.language.String.instance("a")}, x))).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$9$0 = x;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$9$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$9$0.getSize()) + 1], .ceylon.language.String.instance("a"));
        ))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", *x) == Arrays.asList<String>(\"a\", *x)"));
        }
        if (al.$callvariadic$(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")}, x))).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$11$0 = x;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$11$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$11$0.getSize()) + 2], .ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"));
        ))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\", *x) == Arrays.asList<String>(\"a\", \"b\", *x)"));
        }
        if (al.$callvariadic$(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b"),
                .ceylon.language.String.instance("c")}, x))).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$13$0 = x;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$13$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$13$0.getSize()) + 3], .ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"));
        ))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\", \"c\", *x) == Arrays.asList<String>(\"a\", \"b\", \"c\", *x)"));
        }
        if (al.$callvariadic$(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b"),
                .ceylon.language.String.instance("c"),
                .ceylon.language.String.instance("d")}, x))).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$15$0 = x;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$15$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$15$0.getSize()) + 4], .ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"), .ceylon.language.String.instance("d"));
        ))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\", \"c\", \"d\", *x) == Arrays.asList<String>(\"a\", \"b\", \"c\", \"d\", *x)"));
        }
        if (al.$callvariadic$(.com.redhat.ceylon.compiler.java.Util.asSequence(.com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>sequentialCopy(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b"),
                .ceylon.language.String.instance("c"),
                .ceylon.language.String.instance("d"),
                .ceylon.language.String.instance("e")}, x))).equals(.com.redhat.ceylon.compiler.java.Util.checkNull(.java.util.Arrays.<.ceylon.language.String>asList((
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$17$0 = x;
            }
            returning .com.redhat.ceylon.compiler.java.Util.<.ceylon.language.String>toArray($ceylontmp$17$0, new .ceylon.language.String[.com.redhat.ceylon.compiler.java.Util.toInt($ceylontmp$17$0.getSize()) + 5], .ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"), .ceylon.language.String.instance("d"), .ceylon.language.String.instance("e"));
        ))))) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "al(\"a\", \"b\", \"c\", \"d\", \"e\", *x) == Arrays.asList<String>(\"a\", \"b\", \"c\", \"d\", \"e\", *x)"));
        }
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.bug6574_.bug6574();
    }
}