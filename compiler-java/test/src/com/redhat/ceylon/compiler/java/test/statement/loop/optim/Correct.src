package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Members({@.com.redhat.ceylon.compiler.java.metadata.Member(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)})
class Correct implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    Correct() {
        final long expected = 55L;
        if (expected == notOptimizedIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == notOptimizedIteration()"));
        }
        if (expected == rangeOpIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIteration()"));
        }
        if (expected == rangeOpIterationReverse$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIterationReverse()"));
        }
        if (expected == rangeIteration$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration()"));
        }
        if (expected == rangeIterationReverse$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse()"));
        }
        if (expected == rangeIteration2$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration2()"));
        }
        if (expected == rangeIterationReverse2$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse2()"));
        }
        if (expected == arrayIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationStatic()"));
        }
        if (expected == javaArrayIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == javaArrayIterationStatic()"));
        }
        if (expected == tupleIterationStatic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == tupleIterationStatic()"));
        }
        if (expected == rangeIterationDynamic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationDynamic()"));
        }
        if (expected == arrayIterationDynamic$priv$()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationDynamic()"));
        }
    }
    
    private final long notOptimizedIteration$priv$() {
        long sum = 0L;
        boolean loopentered$0 = false;
        .java.lang.Object elem$1;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$2 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1), .ceylon.language.Integer.instance(10)).iterator();
        loop_0: while (!((elem$1 = i$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
            loopentered$0 = true;
            final int i = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)elem$1).longValue());
            sum += i;
        }
        if (!loopentered$0) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long rangeOpIteration$priv$() {
        long sum = 0L;
        final int $ceylontmp$first$5 = 1;
        final int $ceylontmp$last$6 = 10;
        final boolean $ceylontmp$increasing$7 = .ceylon.language.Integer.offset($ceylontmp$last$6, $ceylontmp$first$5) >= 0;
        final int $ceylontmp$incr$8 = $ceylontmp$increasing$7 ? 1 : -1;
        int i$11 = $ceylontmp$first$5;
        int $ceylontmp$element$10 = $ceylontmp$first$5;
        boolean $ceylontmp$f$9 = false;
        loop_1: do {
            if ($ceylontmp$f$9) $ceylontmp$element$10 += $ceylontmp$incr$8;
            $ceylontmp$f$9 = true;
            i$11 = $ceylontmp$element$10;
            final int i = i$11;
            $ceylontmp$continue$4: do {
                sum += i;
            }             while (false);
        }         while ($ceylontmp$increasing$7 ? i$11 - $ceylontmp$last$6 != 0 : i$11 - $ceylontmp$last$6 != 0);
        return sum;
    }
    
    private final long rangeOpIterationReverse$priv$() {
        long sum = 0L;
        final int $ceylontmp$first$14 = 10;
        final int $ceylontmp$last$15 = 1;
        final boolean $ceylontmp$increasing$16 = .ceylon.language.Integer.offset($ceylontmp$last$15, $ceylontmp$first$14) >= 0;
        final int $ceylontmp$incr$17 = $ceylontmp$increasing$16 ? 1 : -1;
        int i$20 = $ceylontmp$first$14;
        int $ceylontmp$element$19 = $ceylontmp$first$14;
        boolean $ceylontmp$f$18 = false;
        loop_2: do {
            if ($ceylontmp$f$18) $ceylontmp$element$19 += $ceylontmp$incr$17;
            $ceylontmp$f$18 = true;
            i$20 = $ceylontmp$element$19;
            final int i = i$20;
            $ceylontmp$continue$13: do {
                sum += i;
            }             while (false);
        }         while ($ceylontmp$increasing$16 ? i$20 - $ceylontmp$last$15 != 0 : i$20 - $ceylontmp$last$15 != 0);
        return sum;
    }
    
    private final long rangeIteration$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        boolean loopentered$21 = false;
        .java.lang.Object elem$22;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$23 = range.iterator();
        loop_3: while (!((elem$22 = i$iterator$$23.next()) instanceof .ceylon.language.Finished)) {
            loopentered$21 = true;
            final long i = ((.ceylon.language.Integer)elem$22).longValue();
            sum += i;
        }
        if (!loopentered$21) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long rangeIterationReverse$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        boolean loopentered$24 = false;
        .java.lang.Object elem$25;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$26 = range.iterator();
        loop_4: while (!((elem$25 = i$iterator$$26.next()) instanceof .ceylon.language.Finished)) {
            loopentered$24 = true;
            final long i = ((.ceylon.language.Integer)elem$25).longValue();
            sum += i;
        }
        if (!loopentered$24) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.com.redhat.ceylon.compiler.java.metadata.Name("MyOrdinal")
    @.com.redhat.ceylon.compiler.java.metadata.Container(
            klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class,
            isStatic = false)
    @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Enumerable<com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal>"})
    class MyOrdinal implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Enumerable<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>, .java.io.Serializable {
        
        MyOrdinal(@.com.redhat.ceylon.compiler.java.metadata.Name("i")
        @.ceylon.language.SharedAnnotation$annotation$
        final long i) {
            this.i = i;
            this.$ceylon$language$Enumerable$this$ = new .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), this);
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        private final long i;
        
        @.ceylon.language.SharedAnnotation$annotation$
        public final long getI() {
            return this.i;
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        protected final .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Enumerable$this$;
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Enumerable$impl() {
            return $ceylon$language$Enumerable$this$;
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public long offsetSign(final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return $ceylon$language$Enumerable$this$.offsetSign(other);
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getPredecessor() {
            return (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)$ceylon$language$Enumerable$this$.getPredecessor();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getSuccessor() {
            return (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)$ceylon$language$Enumerable$this$.getSuccessor();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.com.redhat.ceylon.common.NonNull
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                value = "com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal",
                erased = true,
                untrusted = true)
        public final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal neighbour(@.com.redhat.ceylon.compiler.java.metadata.Name("n")
        final long n) {
            return new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(getI() + n);
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        public final long offset(@.com.redhat.ceylon.compiler.java.metadata.Name("other")
        @.com.redhat.ceylon.common.NonNull
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal")
        final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return getI() - other.getI();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class));
        }
    }
    
    private final long rangeIteration2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L));
        boolean loopentered$27 = false;
        .java.lang.Object elem$28;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$29 = range.iterator();
        loop_5: while (!((elem$28 = i$iterator$$29.next()) instanceof .ceylon.language.Finished)) {
            loopentered$27 = true;
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$28;
            sum += i.getI();
        }
        if (!loopentered$27) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long rangeIterationReverse2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L));
        boolean loopentered$30 = false;
        .java.lang.Object elem$31;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$32 = range.iterator();
        loop_6: while (!((elem$31 = i$iterator$$32.next()) instanceof .ceylon.language.Finished)) {
            loopentered$30 = true;
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$31;
            sum += i.getI();
        }
        if (!loopentered$30) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long arrayIterationStatic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> array = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        long sum = 0L;
        final .java.lang.Object array$34 = array.toArray();
        final int length$35 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$34);
        loop_7: for (int i$36 = 0; i$36 < length$35; i$36++) {
            final long i = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$34, i$36);
            sum += i;
        }
        return sum;
    }
    
    private final long javaArrayIterationStatic$priv$() {
        final int[] array = new int[10];
        final int $ceylontmp$first$39 = 1;
        final int $ceylontmp$last$40 = 10;
        final boolean $ceylontmp$increasing$41 = .ceylon.language.Integer.offset($ceylontmp$last$40, $ceylontmp$first$39) >= 0;
        final int $ceylontmp$incr$42 = $ceylontmp$increasing$41 ? 1 : -1;
        int index$45 = $ceylontmp$first$39;
        int $ceylontmp$element$44 = $ceylontmp$first$39;
        boolean $ceylontmp$f$43 = false;
        loop_8: do {
            if ($ceylontmp$f$43) $ceylontmp$element$44 += $ceylontmp$incr$42;
            $ceylontmp$f$43 = true;
            index$45 = $ceylontmp$element$44;
            final int index = index$45;
            $ceylontmp$continue$38: do {
                array[index - 1] = index;
            }             while (false);
        }         while ($ceylontmp$increasing$41 ? index$45 - $ceylontmp$last$40 != 0 : index$45 - $ceylontmp$last$40 != 0);
        long sum = 0L;
        final int[] array$47 = array;
        loop_9: for (int i$49 = 0; i$49 < array$47.length; i$49++) {
            final long i = array$47[i$49];
            sum += i;
        }
        return sum;
    }
    
    private final long tupleIterationStatic$priv$() {
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> array = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Integer.instance(5L),
                .ceylon.language.Integer.instance(6L),
                .ceylon.language.Integer.instance(7L),
                .ceylon.language.Integer.instance(8L),
                .ceylon.language.Integer.instance(9L),
                .ceylon.language.Integer.instance(10L)});
        long sum = 0L;
        boolean loopentered$50 = false;
        .java.lang.Object elem$51;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$52 = array.iterator();
        loop_10: while (!((elem$51 = i$iterator$$52.next()) instanceof .ceylon.language.Finished)) {
            loopentered$50 = true;
            final long i = ((.ceylon.language.Integer)elem$51).longValue();
            sum += i;
        }
        if (!loopentered$50) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long iterationDynamic$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("iterable")
    @.com.redhat.ceylon.common.NonNull
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("{ceylon.language::Integer*}")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable) {
        long sum = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$55 = iterable;
        final boolean isArray$56 = iterable$55 instanceof .ceylon.language.Array;
        final boolean isTuple$57 = iterable$55 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$55).$getArray$() != null;
        .java.lang.Object elem$54 = null;
        int i$58 = 0;
        final int length$59;
        if (isArray$56 || isTuple$57) {
            length$59 = (int)iterable$55.getSize();
        } else {
            length$59 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$60 = isTuple$57 || isArray$56 ? null : iterable$55.iterator();
        loop_11: while (isTuple$57 || isArray$56 ? i$58 < length$59 : !((elem$54 = i$iterator$$60.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$57) elem$54 = iterable$55.getFromFirst(i$58++);
            final long i = isArray$56 ? .com.redhat.ceylon.compiler.java.Util.getIntegerArray(((.ceylon.language.Array)iterable$55).toArray(), i$58++) : ((.ceylon.language.Integer)elem$54).longValue();
            sum += i;
        }
        return sum;
    }
    
    private final long rangeIterationDynamic$priv$() {
        final .ceylon.language.Range<.ceylon.language.Integer> iterable = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L));
        return iterationDynamic$priv$(iterable);
    }
    
    private final long arrayIterationDynamic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> iterable = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        return iterationDynamic$priv$(iterable);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class);
}