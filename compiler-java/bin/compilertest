#!/usr/bin/env python

import glob
import os
import subprocess
import sys

class TestHarness:
    CMDLINE   = "cmdline"
    EXPECTOUT = "expect.out"
    ACTUALOUT = "actual.out"
    
    def __init__(self, basedir):
        self.basedir = basedir
        self.ceylon = os.path.join(basedir, "bin", "ceylon")
        self.ceylonc = self.ceylon + "c"
        self.testdir = os.path.join(self.basedir, "test")
        self.workdir = os.path.join(self.basedir, "build", "test", "compiler")
        self.verbosity = 0

    def popen(self, *cmd):
        if self.verbosity >= 2:
            print "+ " + " ".join(cmd)
        return subprocess.Popen(
            cmd, stdout = subprocess.PIPE, stderr = subprocess.PIPE)

    def find_test_cases(self, restrictions):
        paths = []
        for dir, dirs, files in os.walk(self.testdir):
            if self.CMDLINE in files:
                if restrictions:
                    for restriction in restrictions:
                        if (dir + os.sep).startswith(restriction):
                            break
                    else:
                        continue
                paths.append(dir)
        paths.sort()
        return paths

    def run(self, tests = ()):
        tests = self.find_test_cases(map(self.make_restriction, tests))
        self.success = self.failure = self.error = 0
        for test in tests:
            TestCase(test).run(self)
        print
        print ", ".join(map(self.report, ("success", "failure", "error")))

    def make_restriction(self, path):
        path = os.path.realpath(path)
        if not os.path.exists(path):
            raise IOError, path
        if not os.path.isdir(path):
            path = os.path.dirname(path)
        return path + os.sep

    def report(self, what):
        count = getattr(self, what)
        if count != 1:
            if what.endswith("s"):
                what += "e"
            what += "s"
        return "%d %s" % (count, what)

    def log(self, dir, what):
        prefix = self.basedir + os.sep
        if dir.startswith(prefix):
            dir = dir[len(prefix):]
        setattr(self, what, getattr(self, what) + 1)
        if what == "success":
            print dir
        else:
            print "%-24s %s" % (dir, {"failure": "FAIL",
                                      "error": "ERROR"}[what])
        sys.stdout.flush()

class TestCase:
    def __init__(self, dir):
        self.srcdir = dir
        prefix = harness.testdir + os.sep
        assert dir.startswith(prefix)
        self.workdir = os.path.join(harness.workdir, dir[len(prefix):])
        if not os.path.isdir(self.workdir):
            os.makedirs(self.workdir)
        self.expectfile = os.path.join(self.srcdir, harness.EXPECTOUT)
        self.actualfile = os.path.join(self.workdir, harness.ACTUALOUT)

    def run(self, harness):
        paths = []
        for dir, dirs, files in os.walk(self.srcdir):
            for file in files:
                ext = file.split(".")[-1]
                if ext in ("java", "ceylon"):
                    paths.append(os.path.join(dir, file))
        if not paths:
            self.handle_error(harness, "", "nothing to compile\n")
            return
        paths.sort()
        sp = harness.popen(
            harness.ceylonc,
            "-src", self.srcdir,
            "-d", self.workdir,
            *paths)
        out, err = sp.communicate()
        if sp.returncode != 0:
            self.handle_error(harness, out, err)
            return
        cmdline = os.path.join(self.srcdir, harness.CMDLINE)
        cmdline = open(cmdline, "r").read().strip().split() #XXX
        sp = harness.popen(
            harness.ceylon,
            "-cp", self.workdir,
            *cmdline)
        out, err = sp.communicate()
        if sp.returncode != 0:
            self.handle_error(harness, out, err)
            return
        open(self.actualfile, "w").write(out)
        sp = subprocess.Popen(
            ["diff", "-ubBw", self.expectfile, self.actualfile],
            stdout = subprocess.PIPE,
            stderr = subprocess.PIPE)
        out, err = sp.communicate()
        if sp.returncode == 0:
            self.handle_success(harness)
        elif sp.returncode == 1:
            self.handle_failure(harness, out, err)
        else:
            self.handle_error(harness, out, err)

    def handle_success(self, harness):
        harness.log(self.srcdir, "success")

    def handle_failure(self, harness, out, err):
        harness.log(self.srcdir, "failure")
        if harness.verbosity >= 1:
            if err:
                sys.stdout.write(err)
            else:
                sys.stdout.write(out)

    def handle_error(self, harness, out, err):
        harness.log(self.srcdir, "error")
        if harness.verbosity >= 1:
            sys.stdout.write(out)
            sys.stdout.write(err)

if __name__ == "__main__":
    import getopt
    try:
        opts, tests = getopt.getopt(sys.argv[1:], "v")
    except getopt.GetoptError, e:
        print "error:", e
        sys.exit(1)
    basedir = os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))
    harness = TestHarness(basedir)
    for opt, arg in opts:
        if opt == "-v":
            harness.verbosity += 1
    harness.run(tests)
