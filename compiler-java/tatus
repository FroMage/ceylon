diff --git a/runtime/ceylon/language/NamedArgumentCall.java b/runtime/ceylon/language/NamedArgumentCall.java
old mode 100644
new mode 100755
index 29ce8b9..4bddb71
--- a/runtime/ceylon/language/NamedArgumentCall.java
+++ b/runtime/ceylon/language/NamedArgumentCall.java
@@ -14,4 +14,5 @@ public abstract class NamedArgumentCall<R,X> {
         this.instance = instance;
         this.args = args;
     }
+    public R call$;
 }
\ No newline at end of file
diff --git a/src/com/redhat/ceylon/compiler/codegen/CeylonVisitor.java b/src/com/redhat/ceylon/compiler/codegen/CeylonVisitor.java
index 8155b47..50516eb 100755
--- a/src/com/redhat/ceylon/compiler/codegen/CeylonVisitor.java
+++ b/src/com/redhat/ceylon/compiler/codegen/CeylonVisitor.java
@@ -8,7 +8,6 @@ import com.redhat.ceylon.compiler.typechecker.tree.NaturalVisitor;
 import com.redhat.ceylon.compiler.typechecker.tree.Node;
 import com.redhat.ceylon.compiler.typechecker.tree.Tree;
 import com.redhat.ceylon.compiler.typechecker.tree.Tree.CompilerAnnotation;
-import com.redhat.ceylon.compiler.typechecker.tree.UnexpectedError;
 import com.redhat.ceylon.compiler.typechecker.tree.Visitor;
 import com.sun.tools.javac.tree.JCTree;
 import com.sun.tools.javac.tree.JCTree.JCClassDecl;
@@ -21,15 +20,17 @@ public class CeylonVisitor extends Visitor implements NaturalVisitor {
     protected final CeylonTransformer gen;
     private final ListBuffer<JCTree> defs;
     
-    final ToplevelAttributesDefinitionBuilder topattrBuilder;
-    final ClassDefinitionBuilder classBuilder;
-    final ListBuffer<JCExpression> args;
+    private final ToplevelAttributesDefinitionBuilder topattrBuilder;
+    private final ClassDefinitionBuilder classBuilder;
+    private final List<JCExpression> typeArgs;
+    private final ListBuffer<JCExpression> args;
     
     public CeylonVisitor(CeylonTransformer ceylonTransformer) {
         this.gen = ceylonTransformer;
         this.defs = new ListBuffer<JCTree>();
         this.topattrBuilder = null;
         this.classBuilder = null;
+        this.typeArgs = null;
         this.args = null;
     }
 
@@ -38,6 +39,7 @@ public class CeylonVisitor extends Visitor implements NaturalVisitor {
         this.defs = new ListBuffer<JCTree>();
         this.topattrBuilder = topattrBuilder;
         this.classBuilder = null;
+        this.typeArgs = null;
         this.args = null;
     }
 
@@ -46,14 +48,16 @@ public class CeylonVisitor extends Visitor implements NaturalVisitor {
         this.defs = new ListBuffer<JCTree>();
         this.topattrBuilder = null;
         this.classBuilder = classBuilder;
+        this.typeArgs = null;
         this.args = null;
     }
 
-    public CeylonVisitor(CeylonTransformer ceylonTransformer, ListBuffer<JCExpression> args) {
+    public CeylonVisitor(CeylonTransformer ceylonTransformer, List<JCExpression> typeArgs, ListBuffer<JCExpression> args) {
         this.gen = ceylonTransformer;
         this.defs = new ListBuffer<JCTree>();
         this.topattrBuilder = null;
         this.classBuilder = null;
+        this.typeArgs = typeArgs;
         this.args = args;
     }
 
@@ -323,12 +327,12 @@ public class CeylonVisitor extends Visitor implements NaturalVisitor {
 
     public void visit(Tree.Type type) {
         // A constructor
-        append(gen.expressionGen().transform(type, args.toList()));
+        append(gen.expressionGen().transform(type, typeArgs, args.toList()));
     }
 
     public void visit(Tree.BaseTypeExpression typeExp) {
         // A constructor
-        append(gen.expressionGen().transform(typeExp, args.toList()));
+        append(gen.expressionGen().transform(typeExp, typeArgs, args.toList()));
     }
 
     public void visit(Tree.BaseMemberExpression access) {
diff --git a/src/com/redhat/ceylon/compiler/codegen/ExpressionTransformer.java b/src/com/redhat/ceylon/compiler/codegen/ExpressionTransformer.java
index 0b9117b..f95f163 100755
--- a/src/com/redhat/ceylon/compiler/codegen/ExpressionTransformer.java
+++ b/src/com/redhat/ceylon/compiler/codegen/ExpressionTransformer.java
@@ -417,7 +417,6 @@ public class ExpressionTransformer extends AbstractTransformer {
     private JCExpression transformNamedInvocation(InvocationExpression ce) {
         final ListBuffer<JCExpression> callArgs = new ListBuffer<JCExpression>();
         final ListBuffer<JCExpression> passArgs = new ListBuffer<JCExpression>();
-        final ProducedType resultType;
         final String methodName;
         final java.util.List<ParameterList> parameterLists;
         final Primary primary = ce.getPrimary();
@@ -425,12 +424,10 @@ public class ExpressionTransformer extends AbstractTransformer {
         if (primaryDecl instanceof Method) {
             Method methodDecl = (Method)primaryDecl;
             methodName = methodDecl.getName();
-            resultType = methodDecl.getType();
             parameterLists = methodDecl.getParameterLists();
         } else if (primaryDecl instanceof com.redhat.ceylon.compiler.typechecker.model.Class) {
             com.redhat.ceylon.compiler.typechecker.model.Class methodDecl = (com.redhat.ceylon.compiler.typechecker.model.Class)primaryDecl;
             methodName = methodDecl.getName();
-            resultType = methodDecl.getType();
             parameterLists = methodDecl.getParameterLists();
         } else {
             throw new RuntimeException("Illegal State: " + (primaryDecl != null ? primaryDecl.getClass() : "null"));
@@ -442,7 +439,7 @@ public class ExpressionTransformer extends AbstractTransformer {
             int index = 0;
             for (NamedArgument namedArg : namedArguments) {
                 if (declaredParam.getName().equals(namedArg.getIdentifier().getText())) {
-                    callArgs.append(make().TypeCast(makeJavaTypeForInvocation(declaredParam.getType()), make().Indexed(makeSelect("this", "args"), makeInteger(index))));
+                    callArgs.append(make().Indexed(makeSelect("this", "args"), makeInteger(index)));
                     found = true;
                     break;
                 }
@@ -457,6 +454,8 @@ public class ExpressionTransformer extends AbstractTransformer {
             passArgs.append(transformArg(namedArg));
         }
 
+        List<JCExpression> typeArgs = transformTypeArguments(ce);
+        
         // Here I need to get everything 'but the last bit' from the Primary
         // e.g. f() -> this
         //   foo().bar() -> foo()
@@ -471,7 +470,7 @@ public class ExpressionTransformer extends AbstractTransformer {
             haveInstance = false;
         } else if (primary instanceof QualifiedMemberOrTypeExpression) {
             QualifiedMemberOrTypeExpression memberExpr = (QualifiedMemberOrTypeExpression)primary;
-            CeylonVisitor visitor = new CeylonVisitor(gen(), callArgs);
+            CeylonVisitor visitor = new CeylonVisitor(gen(), typeArgs, callArgs);
             memberExpr.getPrimary().visit(visitor);
             passArgs.prepend((JCExpression)visitor.getSingleResult());
             receiverType = makeJavaType(memberExpr.getPrimary().getTypeModel(), this.TYPE_PARAM);
@@ -483,13 +482,14 @@ public class ExpressionTransformer extends AbstractTransformer {
         }
 
         // Construct the call$() method
+        JCExpression resultType = makeJavaType(ce.getTypeModel(), this.TYPE_PARAM);
         final String callMethodName = "call$";
         MethodDefinitionBuilder callMethod = MethodDefinitionBuilder.method(gen(), callMethodName);
         callMethod.modifiers(Flags.PUBLIC);
-        callMethod.resultType(makeJavaTypeForInvocation(resultType));
+        callMethod.resultType(resultType);
         if (generateNew) {
             callMethod.body(make().Return(make().NewClass(null,
-                    null, makeJavaTypeForInvocation(resultType), callArgs.toList(), null)));
+                    null, resultType, callArgs.toList(), null)));
         } else {
             if (haveInstance) {
                 callMethod.body(make().Return(make().Apply(null,
@@ -502,8 +502,7 @@ public class ExpressionTransformer extends AbstractTransformer {
 
         // Construct the class
         JCExpression namedArgsClass = make().TypeApply(makeIdent(syms().ceylonNamedArgumentCall),
-                List.<JCExpression>of(makeJavaTypeForInvocation(resultType), 
-                        receiverType));
+                List.<JCExpression>of(resultType, receiverType));
 
         JCClassDecl classDecl = make().ClassDef(make().Modifiers(0),
                 names().empty,
@@ -571,7 +570,9 @@ public class ExpressionTransformer extends AbstractTransformer {
                 args.append(transformArg(arg));
         }
 
-        CeylonVisitor visitor = new CeylonVisitor(gen(), args);
+        List<JCExpression> typeArgs = transformTypeArguments(ce);
+                    
+        CeylonVisitor visitor = new CeylonVisitor(gen(), typeArgs, args);
         ce.getPrimary().visit(visitor);
 
         JCExpression expr = visitor.getSingleResult();
@@ -584,6 +585,18 @@ public class ExpressionTransformer extends AbstractTransformer {
         }
     }
 
+    List<JCExpression> transformTypeArguments(Tree.InvocationExpression def) {
+        List<JCExpression> result = List.<JCExpression> nil();
+        if (def.getPrimary() instanceof Tree.StaticMemberOrTypeExpression) {
+            Tree.StaticMemberOrTypeExpression expr = (Tree.StaticMemberOrTypeExpression)def.getPrimary();
+            java.util.List<ProducedType> args = expr.getTypeArguments().getTypeModels();
+            for (ProducedType arg : args) {
+                result = result.append(makeJavaType(arg, AbstractTransformer.TYPE_PARAM));
+            }
+        }
+        return result;
+    }
+    
     JCExpression transformArg(Tree.PositionalArgument arg) {
         return transformExpression(arg.getExpression(), refinedParameter(arg.getParameter()).getType());
     }
@@ -755,14 +768,14 @@ public class ExpressionTransformer extends AbstractTransformer {
         }
     }
     
-    public JCExpression transform(Tree.Type type, List<JCExpression> args) {
+    public JCExpression transform(Tree.Type type, List<JCExpression> typeArgs, List<JCExpression> args) {
         // A constructor
-        return at(type).NewClass(null, null, makeJavaType(type.getTypeModel()), args, null);
+        return at(type).NewClass(null, typeArgs, makeJavaType(type.getTypeModel()), args, null);
     }
 
-    public JCExpression transform(Tree.BaseTypeExpression typeExp, List<JCExpression> args) {
+    public JCExpression transform(Tree.BaseTypeExpression typeExp, List<JCExpression> typeArgs, List<JCExpression> args) {
         // A constructor
-        return at(typeExp).NewClass(null, null, makeIdent(typeExp.getIdentifier().getText()), args, null);
+        return at(typeExp).NewClass(null, typeArgs, makeIdent(typeExp.getIdentifier().getText()), args, null);
     }
 
     public JCExpression transform(SequenceEnumeration value) {
