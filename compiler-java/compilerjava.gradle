import org.apache.tools.ant.filters.ReplaceTokens

ext {
    ceylonModuleName = 'compiler'
    ceylonTestDisabled = true
    ceylonModuleVariant = 'java'
}

apply from : "${rootProject.projectDir}/gradle/java-for-modules.gradle"
requiresCBP 'module.ceylon.bootstrap.version'
requiresCBP 'ceylon.bootstrap.dir'

dependencies {
    compile project(':common')
    compile project(':cli')
    compile project(':langtools-classfile')
    compile project(':model')
    compile project(':cmr')
    compile project(':typechecker')
    compile 'org.apache.ant:ant:1.8.2'
    compile 'com.github.rjeschke:txtmark:0.13'
    compile 'org.antlr:antlr:3.4'

    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.tautua.markdownpapers', name: 'markdownpapers-core', version: '1.2.7'
    testCompile group: 'org.jboss.modules', name: 'jboss-modules', version: '1.4.4.Final'
}

sourceSets {
    main {
        java {
            srcDir 'langtools/src/share/classes'
            include "com/redhat/**"
            exclude "**/Java7Checker.java"
            exclude "com/redhat/ceylon/ant/**"
            exclude "com/redhat/ceylon/launcher/**"
            exclude 'com/redhat/ceylon/tools/antdoc/**'
            exclude 'com/redhat/ceylon/tools/bootstrap/**'
        }
        resources {
            srcDirs = [ 'src',"${project(':common').projectDir}/src",'langtools/src/share/classes' ]
            include 'com/redhat/**/*.utf8properties'
            include 'com/redhat/**/resources/**'
            include 'com/redhat/**/*.properties'
            include 'com/redhat/ceylon/common/config/**/*.properties'
            include 'com/redhat/ceylon/langtools/tools/javac/resources/*.properties'
            include 'META-INF/**'
        }
    }

    antTask {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = [ 'src',"${project(':common').projectDir}/src"]
            include "com/redhat/ceylon/ant/antlib.xml"
            include "com/redhat/ceylon/common/config/messages.properties"
        }
    }

    test {
        java {
            srcDir 'test/ceylondoc'
            include "com/redhat/ceylon/compiler/java/test/**"
            include "com/redhat/ceylon/compiler/java/codegen/**"  // TODO: Not in build.xml atm
            include "com/redhat/ceylon/tools/**"
            include "com/redhat/ceylon/itest/**"
            include "com/redhat/ceylon/launcher/test/**"
            include "com/redhat/ceylon/ant/**"
            include "com/redhat/ceylon/ceylondoc/test/**"
            exclude "com/redhat/ceylon/tools/test/bug1183/**"
            exclude "com/redhat/ceylon/compiler/java/test/interop/mixed/**"
            exclude "com/redhat/ceylon/compiler/java/test/interop/nullable/**"
            exclude "com/redhat/ceylon/compiler/java/test/interop/Bug*"
            exclude "com/redhat/ceylon/compiler/java/test/interop/Interdep*"
            exclude "com/redhat/ceylon/compiler/java/test/interop/JavaRepeatable.java"
            exclude "com/redhat/ceylon/compiler/java/test/cmr/modules/bug1062/**"
            exclude "com/redhat/ceylon/compiler/java/test/recovery/modules/bug1411/**"
            exclude "com/redhat/ceylon/compiler/java/test/issues/*/**"
            exclude "com/redhat/ceylon/compiler/java/test/recovery/bug6290/**"
        }
        resources {
            include "META-INF/**"
            include "**/*.txt"
            include "**/*.md"
            include "**/*.properties"
        }
    }

    jdk6Stubs {
        java {
            srcDirs = ['src','langtools/src/share/classes']
            source project(':common').sourceSets.main.java
            include "**/Java7Checker.java"
            include "com/redhat/ceylon/tools/Tool.java"
            include "com/redhat/ceylon/tools/Plugin.java"
            include "com/redhat/ceylon/ant/**"
            include "com/redhat/ceylon/launcher/**"
            include "com/redhat/ceylon/common/*"
            include "com/redhat/ceylon/common/config/*"
            include "com/redhat/ceylon/common/tools/ModuleWildcardsHelper.java"
        }
        resources {
            srcDirs = []
        }
        compileClasspath = configurations.compile
        runtimeClasspath = output + compileClasspath
        output.classesDir = sourceSets.main.output.classesDir
    }
}

compileJdk6StubsJava {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
    dependsOn compileJava
}


assemble {
    dependsOn compileJdk6StubsJava
}


jar {
    exclude "com/redhat/ceylon/ant/**"
    exclude "com/redhat/ceylon/common/**"
    exclude "com/redhat/ceylon/launcher/**"

    ceylon {
        importJavaxModel true
    }
}


task antJar ( type : Jar ) {
    group 'Build'
    description 'Create Ant tasks jar'
    dependsOn classes,processAntTaskResources

    destinationDir = jar.destinationDir
    archiveName = 'ceylon-ant.jar'
    from sourceSets.main.output.classesDir, {
        include "com/redhat/ceylon/ant/**"
        include "com/redhat/ceylon/common/**"
        include "com/redhat/ceylon/launcher/**"
        exclude "com/redhat/ceylon/common/log/*.class"
    }
    from sourceSets.antTask.output.resourcesDir
}

task bootstrapJar( type : Jar ) {
    group 'Build'
    description 'Create bootstrap jar'
    dependsOn classes, processResources
    destinationDir = jar.destinationDir
    archiveName = 'ceylon-bootstrap.jar'
    from sourceSets.main.output.classesDir, {
        include "com/redhat/ceylon/launcher/Bootstrap*.class"
        include "com/redhat/ceylon/launcher/CeylonClassLoader.class"
        include "com/redhat/ceylon/launcher/LauncherUtil.class"
    }

    manifest {
        attributes 'Manifest-Version': 1.0,
            'Main-Class': 'com.redhat.ceylon.launcher.Bootstrap'
    }
}

task bootstrapModuleXml( type : CeylonBuildModuleXml ) {
    description "Create module.xml for the bootstrap JAR"
    sourceModule {
        new File(project.file("${project(':runtime').projectDir}/dist/repo/" +
            cbp."ceylon.bootstrap.dir").parentFile, '/_version_/module.xml')
    }
    destinationDir = {"${moduleXml.destinationDir}/bootstrap"}
}

task bootstrapModule( type : Jar ) {
    group 'Build'
    description 'Create bootstrap module'
    setAsOsgiArchive()
    dependsOn classes, processResources, bootstrapModuleXml
    destinationDir = jar.destinationDir

    ext {
        bmSymbolicName = 'com.redhat.ceylon.bootstrap'
        bmVersionName = cbp."module.ceylon.bootstrap.version"
    }

    ceylon {
        importJavaxModel  false
        bundleSymbolicName bmSymbolicName
        exportedBundleVersion bmVersionName+".${TimeStamp.BUILD}"
        moduleLocation {bootstrapModuleXml.destinationFile}
        forceOptionalResolutionFor 'ceylon.runtime'
    }

    archiveName = "ceylon.bootstrap-${bmVersionName}.jar"

    from sourceSets.main.output.classesDir, {
        include "com/redhat/ceylon/launcher/**"
        exclude "com/redhat/ceylon/launcher/Start.class"
    }

    from bootstrapModuleXml, {
        into "META-INF/jbossmodules/" + cbp."ceylon.bootstrap.dir"
    }

}

sha1 {
    archive bootstrapModule
    dependsOn bootstrapModule
}

task publishBootstrapModule( type : Copy ) {
    group 'Distribution'
    description 'Copies binary artifacts to distribution area'

    from sha1, {
        include "**/ceylon.bootstrap-${bootstrapModule.ext.bmVersionName}.jar.*"
    }

    from bootstrapModule
    from bootstrapModuleXml
    into "${repoDir}/${cbp.'ceylon.bootstrap.dir'}"
}

task publishJvmCompilerJars ( type : Copy ) {
    group "Distribution"
    description "Copy bootstrap & Ant jars to distribution area"
    from bootstrapJar
    from antJar
    into repoLibDir
}

publishInternal {
    dependsOn publishJvmCompilerJars
    dependsOn publishBootstrapModule
}

// TODO: Do something different for Jigsaw
