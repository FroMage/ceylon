import ceylon.language.meta.model {
  ClosedType=Type,
  Member, Interface, Class, ClassOrInterface, Attribute, Method, Value, Function,
  MemberInterface,MemberClass
}
import ceylon.language.meta.declaration {
  ClassDeclaration, InterfaceDeclaration, ValueDeclaration, FunctionDeclaration,
  TypeParameter
}

shared class AppliedFunction<out Type, in Arguments>() satisfies Function<Type,Arguments>
    given Arguments satisfies Anything[] {
  shared actual ClosedType<Anything>[] parameterTypes => [];
  shared actual Type apply(Anything* arguments) { throw Exception("AppliedClass.namedApply"); }
  shared actual Type namedApply(Iterable<String->Object> arguments) { throw Exception("AppliedClass.namedApply"); }

  shared actual FunctionDeclaration declaration { throw Exception("Function declaration"); }
  shared actual ClosedType<Type> type {throw Exception("Function.type"); }
  shared actual ClosedType<Anything>? container { throw Exception("Class declaration"); }
  shared actual Map<TypeParameter, ClosedType> typeArguments { throw Exception("unimplemented"); }
}

shared class AppliedAttribute<in Container, out Get=Anything, in Set=Nothing>() satisfies Attribute<Container,Get,Set> {
    shared actual ClassOrInterface<Anything>? container { throw Exception("unimplemented"); }
    shared actual default ClassOrInterface<Anything> declaringType { throw Exception("unimplemented"); }
    shared actual ClosedType<Get> type { throw Exception("unimplemented"); }
    shared actual default ValueDeclaration declaration { throw Exception("unimplemented"); }
    shared actual Value<Get,Set> bind(Object container) { throw Exception("AppliedAttribute.bind"); }
}

shared abstract class AppliedMemberInterface<in Container, out Type=Anything>()
        satisfies MemberInterface<Container,Type> {
    shared actual Interface<Type> bind(Object container) { throw Exception("IMPL MemberInterface.bind"); }
}
