import ceylon.language.meta.model {
  ClosedType=Type, UnionType, IntersectionType,
  Member, Interface, VariableAttribute, Class, ClassOrInterface, Attribute, Method, Value, Variable, Function,
  ClassModel,InterfaceModel
}
import ceylon.language.meta.declaration {
  ClassDeclaration, InterfaceDeclaration, ValueDeclaration, FunctionDeclaration,
  TypeParameter, VariableDeclaration
}

shared class AppliedClass<out Type, in Arguments>() satisfies Class<Type,Arguments>
    given Type satisfies Object
    given Arguments satisfies Anything[] {

  shared actual ClassDeclaration declaration { throw Exception("Class declaration"); }
  shared actual Map<TypeParameter, ClosedType> typeArguments { throw Exception("Class declaration"); }
  shared actual ClassModel<Anything, Nothing>? extendedType { throw Exception("unimplemented"); }
  shared actual InterfaceModel<Anything>[] satisfiedTypes { throw Exception("unimplemented"); }
  shared actual Member<SubType, Kind>? getClassOrInterface<SubType, Kind>(String name, ClosedType* types)
    given Kind satisfies ClassOrInterface<Anything> { throw Exception("unimplemented"); }
  shared actual Method<SubType, Type, Arguments>? getMethod<SubType, Type, Arguments>(String name, ClosedType* types)
    given Arguments satisfies Anything[] { throw Exception("unimplemented"); }
  shared actual Attribute<Container, Type>? getAttribute<Container, Type>(String name) { throw Exception("unimplemented"); }
  shared actual VariableAttribute<Container, Type>? getVariableAttribute<Container, Type>(String name) { throw Exception("unimplemented"); }

  shared actual Boolean isTypeOf(Anything instance) { throw Exception("Class declaration"); }
  shared actual Boolean isSuperTypeOf(ClosedType<Anything> type) { throw Exception("Class declaration"); }
  shared actual Boolean isExactly(ClosedType<Anything> type) { throw Exception("Class declaration"); }
  shared actual ClosedType<Anything>? container { throw Exception("Class declaration"); }
}

shared class AppliedInterface<out Type>() satisfies Interface<Type>
    given Type satisfies Object {
  shared actual InterfaceDeclaration declaration { throw Exception("Interface declaration"); }
  shared actual Map<TypeParameter, ClosedType> typeArguments { throw Exception("unimplemented"); }
  shared actual ClassModel<Anything, Nothing>? extendedType { throw Exception("unimplemented"); }
  shared actual InterfaceModel<Anything>[] satisfiedTypes { throw Exception("unimplemented"); }
  shared actual Method<SubType, Type, Arguments>? getMethod<SubType, Type, Arguments>(String name, ClosedType* types)
    given Arguments satisfies Anything[] { throw Exception("unimplemented"); }
  shared actual Member<SubType, Kind>? getClassOrInterface<SubType, Kind>(String name, ClosedType* types)
    given Kind satisfies ClassOrInterface<Anything> { throw Exception("unimplemented"); }
  shared actual Attribute<Container, Type>? getAttribute<Container, Type>(String name) { throw Exception("unimplemented"); }
  shared actual VariableAttribute<Container, Type>? getVariableAttribute<Container, Type>(String name) { throw Exception("unimplemented"); }

  shared actual Boolean isTypeOf(Anything instance) { throw Exception("Class declaration"); }
  shared actual Boolean isSuperTypeOf(ClosedType<Anything> type) { throw Exception("Class declaration"); }
  shared actual Boolean isExactly(ClosedType<Anything> type) { throw Exception("Class declaration"); }
  shared actual ClosedType<Anything>? container { throw Exception("Class declaration"); }
}

shared class AppliedValue<out Type>() satisfies Value<Type> {
  shared actual Type get() { throw Exception("Implement get"); }
  shared actual default ValueDeclaration declaration {throw Exception("Value.declaration"); }
  shared actual ClosedType<Type> type { throw Exception("Value.type"); }

  shared actual ClosedType<Anything>? container { throw Exception("Class declaration"); }
}

shared class AppliedFunction<out Type, in Arguments>() satisfies Function<Type,Arguments>
    given Arguments satisfies Anything[] {
  shared actual FunctionDeclaration declaration { throw Exception("Function declaration"); }
  shared actual ClosedType<Type> type {throw Exception("Function.type"); }
  shared actual ClosedType<Anything>? container { throw Exception("Class declaration"); }
  shared actual Map<TypeParameter, ClosedType> typeArguments { throw Exception("unimplemented"); }
}

shared class AppliedUnionType<out Union=Anything>() satisfies UnionType<Union> {
  shared actual List<ClosedType<Union>> caseTypes { throw Exception("Implement case types"); }

  shared actual Boolean isTypeOf(Anything instance) { throw Exception("Class declaration"); }
  shared actual Boolean isSuperTypeOf(ClosedType<Anything> type) { throw Exception("Class declaration"); }
  shared actual Boolean isExactly(ClosedType<Anything> type) { throw Exception("Class declaration"); }
}

shared class AppliedIntersectionType<out Union=Anything>() satisfies IntersectionType<Union> {
  shared actual List<ClosedType<Union>> satisfiedTypes { throw Exception("Implement satisfied types"); }

  shared actual Boolean isTypeOf(Anything instance) { throw Exception("Class declaration"); }
  shared actual Boolean isSuperTypeOf(ClosedType<Anything> type) { throw Exception("Class declaration"); }
  shared actual Boolean isExactly(ClosedType<Anything> type) { throw Exception("Class declaration"); }
}

shared class AppliedMethod<in Container, out Type=Anything, in Arguments=Nothing>()
    satisfies Method<Container,Type,Arguments>
    given Arguments satisfies Anything[] {

    shared actual FunctionDeclaration declaration { throw Exception("unimplemented"); }
    shared actual ClosedType<Type> type { throw Exception("unimplemented"); }
    shared actual ClassOrInterface<Anything> declaringType { throw Exception("unimplemented"); }

    shared actual ClassOrInterface<Anything>? container { throw Exception("unimplemented"); }

    shared actual Map<TypeParameter, ClosedType<Anything>> typeArguments { throw Exception("unimplemented"); }
}

shared class AppliedAttribute<in Container, out Type=Anything>() satisfies Attribute<Container,Type> {
    shared actual ClassOrInterface<Anything>? container { throw Exception("unimplemented"); }
    shared actual default ClassOrInterface<Anything> declaringType { throw Exception("unimplemented"); }
    shared actual ClosedType<Type> type { throw Exception("unimplemented"); }
    shared actual default ValueDeclaration declaration { throw Exception("unimplemented"); }
}

shared class AppliedVariable<Type>() extends AppliedValue<Type>() satisfies Variable<Type> {
  shared actual void set(Type newValue) { throw Exception("unimplemented"); }
  shared actual default VariableDeclaration declaration { throw Exception("unimplemented"); }
}
shared class AppliedVariableAttribute<in Container, Type>() extends AppliedAttribute<Container,Type>()
    satisfies VariableAttribute<Container,Type> {
  shared actual VariableDeclaration declaration { throw Exception("unimplemented"); }
  shared actual ClassOrInterface<Anything> declaringType { throw Exception("unimplemented"); }
}
