package com.redhat.ceylon.compiler.java.language;

import com.redhat.ceylon.compiler.java.runtime.model.ReifiedType;
import com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor;

import ceylon.language.Callable;

/**
 * Stub implementation for {@link Callable}, so the anonymous inner classes 
 * generated by the compiler only need to define a single method.
 *
 * @param <Return>
 */
public class AbstractCallable<Return> implements Callable<Return>, ReifiedType {
    
    private final String string;
    private final TypeDescriptor $reifiedArguments;
    private final TypeDescriptor $reifiedReturn;
    private final short variadicParameterIndex;

    public AbstractCallable(TypeDescriptor $reifiedReturn, TypeDescriptor $reifiedArguments, String string, short variadicParameterIndex) {
        this.string = string;
        this.$reifiedReturn = $reifiedReturn;
        this.$reifiedArguments = $reifiedArguments;
        this.variadicParameterIndex = variadicParameterIndex;
    }
    
    public Return $call() {
        throw new UnsupportedOperationException();
    }
    
    public Return $call(java.lang.Object arg0) {
        throw new UnsupportedOperationException();
    }
    
    public Return $call(java.lang.Object arg0, java.lang.Object arg1) {
        throw new UnsupportedOperationException();
    }
    
    public Return $call(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) {
        throw new UnsupportedOperationException();
    }
    
    public Return $call(java.lang.Object... args) {
        throw new UnsupportedOperationException();
    }
    
    @java.lang.Override
    public String toString() {
        return string;
    }

    @Override
    public TypeDescriptor $getType() {
        return TypeDescriptor.klass(Callable.class, $reifiedReturn, $reifiedArguments);
    }

    @Override
    public short $getVariadicParameterIndex() {
        return variadicParameterIndex;
    }
}