<?xml version="1.0" encoding="UTF-8"?>
<project name="ceylon-dist" default="help" basedir=".">

    <tstamp>
        <format property="NOW" pattern="yyyyMMddHHmm" />
    </tstamp>

    <property file="build.properties"/>
    <property name="projects.dir" value="${basedir}/projects"/>
    <property name="ceylon.dist.dir" value="${basedir}/dist"/>
    <property name="ceylon.repo.dir" value="${ceylon.dist.dir}/repo"/>

    <property name="modules" value="ceylon-common,ceylon-module-resolver,ceylon-spec,ceylon-compiler,ceylon-js,ceylon.language,ceylon-runtime" />

    <property name="msg.needlocalorsiblings" value="Needs 'local' or 'siblings' target to be mentioned first" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="help">
        <echo>Options for building a Ceylon distribution package:
    ant setup              - Sets up a new clean environment for development
    ant publish-all        - Performs "ant clean publish" on all sibling projects

    ant release            - Does a clean, get-code, local, package
                             using the sources tagged with the name as
                             defined by ceylon.version.tag in build.properties
                             Use this when doing a release!

    ant nightly            - Does a clean, get-code, local, package
                             using the sources from master.
                             Use this when NOT doing a release!

Some more basic ant tasks:
    ant get-code           - Downloads latest code for all projects
    ant get-code -Dtag=0.5 - Downloads latest code and checks out the tag
    ant checkout -Dtag=0.5 - Makes sure we're using the specified tag
    ant checkout-master    - To make sure we're using master

    ant local install-all  - Quick builds the distribution projects, cloning/pulling 
                             dependent Ceylon git repositories into the 
                             ${projects.dir} directory.
                             Doesn't touch any sibling project folders.
                             Doesn't touch your local repo (~/.ceylon/repo).
    ant local package      - Same as install-all but will clean projects first and
                             will generate documentation and the final distribution
                             package

    ant siblings install-all - Quick builds the distribution projects using
                             existing sibling project folders.
                             Doesn't clone or pull. Doesn't touch your local 
                             repo (~/.ceylon/repo).
    ant siblings package   - Same as install-all but will clean projects first and
                             will generate documentation and the final distribution
                             package

    ant clean              - Cleans the distribution package
    ant clean-all          - Cleans the distribution package
                             and deletes all local projects</echo>
    </target>

    <target name="setup" depends="siblings,git-clone"
            description="Sets up a new clean environment for development">
    </target>

    <target name="setup-admins"
            description="Sets up a new clean environment for developers with write access to the core repositories">
        <property name="github-url" value="git@github.com:"/>
        <antcall target="setup" />
    </target>

    <target name="publish-all" depends="siblings,clean-projects,install-all,publish-all-quick"
            description="Publishes all sibling projects" />
    <target name="publish-all-quick" depends="siblings">
        <foreach list="${modules}"
                 target="publish-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="publish-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
        <echo>Publishing ${project.item.name}</echo>
        <ant antfile="${projects.base.dir}/${project.item.name}/build.xml"
             target="publish-internal"
             dir="${projects.base.dir}/${project.item.name}"
             inheritall="false">
        </ant>
    </target>

    <target name="ide" depends="siblings">
        <delete dir="../ceylon-ide-eclipse/plugins/com.redhat.ceylon.eclipse.ui/defaultRepository" includes="**/*" includeEmptyDirs="true"/>
        <property name="buildtarget" value="ide" />
        <foreach list="${modules}"
                 target="ide-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="ide-quick" depends="siblings">
        <delete dir="../ceylon-ide-eclipse/plugins/com.redhat.ceylon.eclipse.ui/defaultRepository" includes="**/*" includeEmptyDirs="true"/>
        <property name="buildtarget" value="ide-quick" />
        <foreach list="${modules}"
                 target="ide-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="ide-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
        <echo>Publishing ${project.item.name} to IDE</echo>
        <ant antfile="${projects.base.dir}/${project.item.name}/build.xml"
             target="${buildtarget}"
             dir="${projects.base.dir}/${project.item.name}"
             inheritall="false">
        </ant>
    </target>

    <target name="update-all" depends="siblings,git-update"
            description="Updates sibling projects with latest code from git">
    </target>

    <target name="status-all" depends="siblings,git-status"
            description="Shows git status of all sibling projects">
    </target>

    <target name="release"
            description="Does a clean, get-code, local, package using the 
sources tagged with the name as defined by ceylon.version in 
build.properties
Use this when doing a release!">
        <property name="tag" value="${ceylon.version.tag}"/>
        <antcall target="bootstrap" />
    </target>

    <target name="nightly"
            description="Does a clean, get-code, local, package using the sources from master. 
Use this when NOT doing a release!">
        <property name="dist.name" value="ceylon-${ceylon.version}-master-${NOW}"/>
        <antcall target="bootstrap" />
    </target>

    <target name="bootstrap" depends="clean,local,get-code-internal,package">
    </target>

    <target name="local"
            description="Builds using dependent projects in the ${projects.dir} directory.
Used with another target such as 'package'.">
        <property name="projects.base.dir" value="${projects.dir}"/>
        <property name="ceylon-common.dir" value="${projects.base.dir}/ceylon-common"/>
        <property name="ceylon-compiler.dir" value="${projects.base.dir}/ceylon-compiler"/>
        <property name="ceylon-spec.dir" value="${projects.base.dir}/ceylon-spec"/>
        <property name="ceylon.language.dir" value="${projects.base.dir}/ceylon.language"/>
        <property name="ceylon-module-resolver.dir" value="${projects.base.dir}/ceylon-module-resolver"/>
        <property name="ceylon-runtime.dir" value="${projects.base.dir}/ceylon-runtime"/>
        <property name="ceylon-js.dir" value="${projects.base.dir}/ceylon-js"/>
        <property name="dist.name" value="ceylon-${ceylon.version}"/>
        <property name="github-url" value="https://github.com/"/>
    </target>

    <target name="siblings"
            description="Builds using dependent projects in existing sibling project folders.
Used with another target such as 'package'">
        <property name="projects.base.dir" value="${basedir}/.." />
        <property name="ceylon-common.dir" value="${projects.base.dir}/ceylon-common"/>
        <property name="ceylon-compiler.dir" value="${projects.base.dir}/ceylon-compiler"/>
        <property name="ceylon-spec.dir" value="${projects.base.dir}/ceylon-spec"/>
        <property name="ceylon.language.dir" value="${projects.base.dir}/ceylon.language"/>
        <property name="ceylon-module-resolver.dir" value="${projects.base.dir}/ceylon-module-resolver"/>
        <property name="ceylon-runtime.dir" value="${projects.base.dir}/ceylon-runtime"/>
        <property name="ceylon-js.dir" value="${projects.base.dir}/ceylon-js"/>
        <property name="dist.name" value="ceylon-${ceylon.version}-custom-${NOW}"/>
        <property name="github-url" value="https://github.com/"/>
    </target>

    <target name="package" 
            depends="clean-projects, install-all, generate-spec, generate-apidoc, generate-tooldoc, zip"
            description="Generates a distributable zip file">
    </target>

    <target name="clean-projects" 
            description="Cleans all sub projects">
        <fail unless="projects.base.dir" message="${msg.needlocalorsiblings}" />
        <foreach list="${modules}"
                 target="clean-projects-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="clean-projects-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
        <echo>Cleaning ${project.item.name}</echo>
        <ant antfile="${projects.base.dir}/${project.item.name}/build.xml"
             target="clean"
             dir="${projects.base.dir}/${project.item.name}"
             inheritall="false"/>
    </target>

    <target name="install-all" 
            depends="setup-repo, install-compiler, install-js, copy-compiler-binaries, 
                     copy-samples, copy-templates, copy-jvm-compiler-libraries,
                     copy-licenses, install-runtime-libs, install-language, install-runtime"
            description="Generates all binaries and copies them to the distribution folder">
    </target>

    <target name="zip">
        <fail unless="projects.base.dir" message="${msg.needlocalorsiblings}" />
        <zip destfile="${basedir}/${dist.name}.zip">
            <zipfileset dir="${ceylon.dist.dir}" prefix="${dist.name}">
                <exclude name="bin/ceylon*" />
            </zipfileset>
            <zipfileset dir="${ceylon.dist.dir}" filemode="755"  prefix="${dist.name}">
                <include name="bin/ceylon*" />
            </zipfileset>
        </zip>        
    </target>
    
    <target name="setup-repo">
        <mkdir dir="${ceylon.dist.dir}/repo"/>
    </target>

    <target name="copy-compiler-binaries">
        <mkdir dir="${ceylon.dist.dir}/bin"/>
        <copy todir="${ceylon.dist.dir}/bin">
            <fileset dir="${ceylon-compiler.dir}/build/bin">
                <include name="java.bat"/>
                <include name="ceylon"/>
                <include name="ceylon.bat"/>
                <include name="ceylon-completion.bash"/>
            </fileset>
        </copy>
        <chmod perm="0755">
            <fileset dir="${ceylon.dist.dir}/bin">
                <include name="ceylon"/>
            </fileset>
        </chmod>
    </target>

    <target name="copy-jvm-compiler-libraries">
        <mkdir dir="${ceylon.dist.dir}/lib"/>
        <copy todir="${ceylon.dist.dir}/lib">
            <fileset dir="${ceylon-compiler.dir}/build/lib">
                <include name="ceylon-bootstrap.jar"/>
                <include name="ceylon-ant.jar"/>
                <include name="txtmark-*.jar"/>
                <include name="markdownpapers-core-*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="copy-samples">
        <mkdir dir="${ceylon.dist.dir}/samples"/>
        <copy todir="${ceylon.dist.dir}/samples">
            <fileset dir="samples">
                <include name="helloworld/**"/>
                <include name="no-module/**"/>
                <include name="with-module/**"/>
                <include name="interop-java/**"/>
            </fileset>
        </copy>
    </target>
	
    <target name="copy-templates">
        <mkdir dir="${ceylon.dist.dir}/templates"/>
        <copy todir="${ceylon.dist.dir}/templates">
            <fileset dir="templates">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="copy-licenses">
        <copy todir="${ceylon.dist.dir}">
            <fileset dir="${basedir}">
                <include name="LICENSE-ASL" />
                <include name="LICENSE-LGPL" />
                <include name="LICENSE-GPL-CP" />
                <include name="NOTICE" />
                <include name="README.md" />
            </fileset>
        </copy>
    </target>

    <target name="install-compiler" depends="install-typechecker">
        <ant antfile="${ceylon-compiler.dir}/build.xml" target="publish" dir="${ceylon-compiler.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
        </ant>
    </target>

    <target name="install-js" depends="install-typechecker">
        <ant antfile="${ceylon-js.dir}/build.xml" target="publish" dir="${ceylon-js.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
            <!-- Special property that will make the build skip the language module -->
            <property name="skip.language.module" value="true"/>
        </ant>
    </target>

    <target name="install-typechecker" depends="install-cmr">
        <ant antfile="${ceylon-spec.dir}/build.xml" target="publish" dir="${ceylon-spec.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
        </ant>
    </target>

    <target name="install-language" depends="install-compiler,install-js,copy-compiler-binaries,copy-jvm-compiler-libraries">
        <ant antfile="${ceylon.language.dir}/build.xml" target="publish" dir="${ceylon.language.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
        </ant>
    </target>

    <target name="install-common">
        <ant antfile="${ceylon-common.dir}/build.xml" target="publish" dir="${ceylon-common.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
        </ant>
    </target>

    <target name="install-cmr" depends="install-common">
        <ant antfile="${ceylon-module-resolver.dir}/build.xml" target="publish" dir="${ceylon-module-resolver.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
        </ant>
    </target>

    <target name="install-runtime-libs">
        <ant antfile="${ceylon-runtime.dir}/build.xml" target="publish-libs" dir="${ceylon-runtime.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
        </ant>
        <copy todir="${ceylon.dist.dir}">
            <fileset dir="${ceylon-runtime.dir}/build/dist">
            </fileset>
        </copy>
    </target>

    <target name="install-runtime" depends="install-cmr">
        <ant antfile="${ceylon-runtime.dir}/build.xml" target="publish" dir="${ceylon-runtime.dir}" inheritall="false">
            <property name="ceylon.repo.dir" value="${ceylon.repo.dir}"/>
            <property name="ceylon.dist.dir" value="${ceylon.dist.dir}"/>
        </ant>
        <copy todir="${ceylon.dist.dir}">
            <fileset dir="${ceylon-runtime.dir}/build/dist">
            </fileset>
        </copy>
    </target>

    <target name="generate-spec">
        <ant antfile="${ceylon-spec.dir}/build.xml" target="doc" dir="${ceylon-spec.dir}" inheritall="false"/>
        <copy todir="${ceylon.dist.dir}/doc/en/spec">
            <fileset dir="${ceylon-spec.dir}/build/en"/>            
        </copy>
    </target>

    <target name="generate-apidoc">
        <exec executable="${ceylon.dist.dir}/bin/ceylon" failonerror="yes">
        	<arg value="--stacktraces"/>
        	<arg value="doc"/>
            <arg value="--out=${ceylon.dist.dir}/repo"/>
            <arg value="--src=${ceylon.language.dir}/src/"/>
            <arg value="--source-code"/>
            <arg value="ceylon.language"/>
        </exec>
    </target>

    <target name="generate-tooldoc">
        <exec executable="${ceylon.dist.dir}/bin/ceylon" failonerror="yes">
        	<arg value="--stacktraces"/>
            <arg value="doc-tool"/>
            <arg value="--output=${ceylon.dist.dir}/doc/en/toolset"/>
            <arg value="--index"/>
            <arg value="--all-plumbing"/>
            <arg value="--all-porcelain"/>
        </exec>	
    </target>

    <target name="get-code" depends="local,get-code-internal"
            description="Downloads latest code for all projects">
        <echo>
If you are building a distribution package for a specific tagged release
then execute the following command:

    ant checkout -Dtag=0.5 - Makes sure we're using the specified tag

or you can go straight to the package building:

    ant local package      - Builds the distribution package
</echo>
    </target>
    <target name="get-code-internal" depends="git-clone-or-pull,checkout-tagged">
    </target>

    <target name="git-clone-or-pull">
        <fail unless="projects.base.dir" message="${msg.needlocalorsiblings}" />
        <mkdir dir="${projects.base.dir}"/>
        <foreach list="${modules}"
                 target="git-clone-or-pull-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="git-clone-or-pull-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
        <if>
            <available file="${projects.base.dir}/${project.item.name}" type="dir" />
            <then>
		<echo>Updating ${project.item.name}:</echo>
                <antcall target="checkout-internal-item">
                    <param name="tag-internal" value="master" />
                </antcall>
                <exec executable="git" dir="${projects.base.dir}/${project.item.name}" failonerror="yes">
                    <arg value="pull"/>
                    <arg value="--ff-only"/>
                </exec>
            </then>
            <else>
		<echo>Cloning ${project.item.name}:</echo>
                <exec executable="git" dir="${projects.base.dir}" failonerror="yes">
                    <arg value="clone"/>
                    <arg value="${github-url}ceylon/${project.item.name}.git"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="git-clone">
        <fail unless="projects.base.dir" message="${msg.needlocalorsiblings}" />
        <mkdir dir="${projects.base.dir}"/>
        <foreach list="${modules}"
                 target="git-clone-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="git-clone-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
        <if>
            <available file="${projects.base.dir}/${project.item.name}" type="dir" />
            <else>
		<echo>Cloning ${project.item.name}:</echo>
                <exec executable="git" dir="${projects.base.dir}" failonerror="yes">
                    <arg value="clone"/>
                    <arg value="${github-url}ceylon/${project.item.name}.git"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="git-update">
        <fail unless="projects.base.dir" message="${msg.needlocalorsiblings}" />
        <mkdir dir="${projects.base.dir}"/>
        <foreach list="${modules}"
                 target="git-update-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="git-update-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
	<echo>Updating ${project.item.name}:</echo>
        <if>
            <available file="${projects.base.dir}/${project.item.name}/.git/ceylon-update" type="file" />
            <then>
                <exec executable="${projects.base.dir}/${project.item.name}/.git/ceylon-update"
                      dir="${projects.base.dir}/${project.item.name}" failonerror="no">
                </exec>
            </then>
            <else>
                <exec executable="git" dir="${projects.base.dir}/${project.item.name}" failonerror="no">
                    <arg value="pull"/>
                    <arg value="--rebase"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="git-status">
        <fail unless="projects.base.dir" message="${msg.needlocalorsiblings}" />
        <mkdir dir="${projects.base.dir}"/>
        <foreach list="${modules}"
                 target="git-status-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="git-status-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
        <if>
            <available file="${projects.base.dir}/${project.item.name}" type="dir" />
            <then>
		<echo>Status of ${project.item.name}:</echo>
                <exec executable="git" dir="${projects.base.dir}/${project.item.name}" failonerror="yes">
                    <arg value="status"/>
                    <arg value="--short"/>
                    <arg value="--branch"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="checkout" depends="local">
        <fail unless="tag" />
        <antcall target="checkout-internal">
            <param name="tag-internal" value="${tag}" />
        </antcall>
        <echo>
You can now build the package by executing:

    ant local package      - Builds the distribution package
</echo>
    </target>

    <target name="checkout-internal">
        <fail unless="tag-internal" />
        <foreach list="${modules}"
                 target="checkout-internal-item"
                 param="project.item.name"
                 inheritall="true" />
    </target>
    <target name="checkout-internal-item">
        <fail unless="projects.base.dir" />
        <fail unless="project.item.name" />
        <fail unless="tag-internal" />
        <exec executable="git" dir="${projects.base.dir}/${project.item.name}" failonerror="yes">
            <arg value="checkout"/>
            <arg value="-q"/>
            <arg value="${tag-internal}"/>
        </exec>
    </target>

    <target name="checkout-master" depends="local">
        <antcall target="checkout-internal">
            <param name="tag-internal" value="master" />
        </antcall>
    </target>

    <target name="checkout-tagged" if="tag" depends="local">
        <echo message="Checking out tag '${tag}'" />
        <antcall target="checkout-internal">
            <param name="tag-internal" value="${tag}" />
        </antcall>
    </target>

    <target name="clean"
            description="Cleans the distribution package">
        <delete dir="${ceylon.dist.dir}"/>
    </target>

    <target name="clean-all" depends="clean"
            description="Cleans the distribution package and deletes all local projects">
        <delete dir="${projects.dir}"/>
    </target>
</project>
